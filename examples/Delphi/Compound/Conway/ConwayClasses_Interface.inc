(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:57:28         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ConwayClasses_Interface.inc}
{$DEFINE ConwayClasses_Interface.inc}

{$IFNDEF ConwayClasses_unitheader}
unit ConwayClasses;
{$ENDIF}

interface

uses
  // interface uses
  Windows,
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TCell = class;
  TCellList = class;
  TGame = class;
  TGameList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TCell = class(TBusinessClassesRoot)
  private
    fIntermediate: Boolean;
    fNeighboursEnsured: Boolean;
    function _Get_M_Active: TBABoolean;
    function _GetActive: Boolean;
    procedure _SetActive(NewValue: Boolean);
    function _Get_M_neighbours: TBAInteger;
    function _Getneighbours: Integer;
    function _Get_M_x: TBAInteger;
    function _Getx: Integer;
    procedure _Setx(NewValue: Integer);
    function _Get_M_y: TBAInteger;
    function _Gety: Integer;
    procedure _Sety(NewValue: Integer);
    function _Get_M_ActiveCount: TBAInteger;
    function _GetActiveCount: Integer;
    function _GetGame: TGame;
    function _Get_M_Game: TBoldObjectReference;
    procedure _SetGame(value: TGame);
    function _GetcLeft: TCell;
    function _Get_M_cLeft: TBoldObjectReference;
    procedure _SetcLeft(value: TCell);
    function _GetcRight: TCell;
    function _Get_M_cRight: TBoldObjectReference;
    procedure _SetcRight(value: TCell);
    function _GetcDown: TCell;
    function _Get_M_cDown: TBoldObjectReference;
    procedure _SetcDown(value: TCell);
    function _GetcUp: TCell;
    function _Get_M_cUp: TBoldObjectReference;
    procedure _SetcUp(value: TCell);
    function _GetcDownLeft: TCell;
    function _Get_M_cDownLeft: TBoldObjectReference;
    procedure _SetcDownLeft(value: TCell);
    function _GetcUpRight: TCell;
    function _Get_M_cUpRight: TBoldObjectReference;
    procedure _SetcUpRight(value: TCell);
    function _GetcDownRight: TCell;
    function _Get_M_cDownRight: TBoldObjectReference;
    procedure _SetcDownRight(value: TCell);
    function _GetcUpLeft: TCell;
    function _Get_M_cUpLeft: TBoldObjectReference;
    procedure _SetcUpLeft(value: TCell);
    procedure UnensureNeighbours; 
    property M_ActiveCount: TBAInteger read _Get_M_ActiveCount;
    property ActiveCount: Integer read _GetActiveCount;
    property Intermediate: Boolean read fIntermediate write fIntermediate;
  protected
    procedure CalculateIntermediate; 
    procedure UpdateActive; 
    property M_neighbours: TBAInteger read _Get_M_neighbours;
    property neighbours: Integer read _Getneighbours;
    property NeighboursEnsured: Boolean read fNeighboursEnsured write fNeighboursEnsured;
  public
    procedure SetupCell(x: integer; y: integer); 
    function EnsureCell(aCell: TCell; x: integer; y: integer): TCell; 
    function AllowRemove: boolean; 
    procedure PrepareDelete; override;
    procedure NeighboursNotEnsured; 
    procedure UnensureCell(aCell: TCell); 
    procedure EnsureNeighbours; 
    property M_Active: TBABoolean read _Get_M_Active;
    property M_x: TBAInteger read _Get_M_x;
    property M_y: TBAInteger read _Get_M_y;
    property M_Game: TBoldObjectReference read _Get_M_Game;
    property M_cLeft: TBoldObjectReference read _Get_M_cLeft;
    property M_cRight: TBoldObjectReference read _Get_M_cRight;
    property M_cDown: TBoldObjectReference read _Get_M_cDown;
    property M_cUp: TBoldObjectReference read _Get_M_cUp;
    property M_cDownLeft: TBoldObjectReference read _Get_M_cDownLeft;
    property M_cUpRight: TBoldObjectReference read _Get_M_cUpRight;
    property M_cDownRight: TBoldObjectReference read _Get_M_cDownRight;
    property M_cUpLeft: TBoldObjectReference read _Get_M_cUpLeft;
    property Active: Boolean read _GetActive write _SetActive;
    property x: Integer read _Getx write _Setx;
    property y: Integer read _Gety write _Sety;
    property Game: TGame read _GetGame write _SetGame;
    property cLeft: TCell read _GetcLeft write _SetcLeft;
    property cRight: TCell read _GetcRight write _SetcRight;
    property cDown: TCell read _GetcDown write _SetcDown;
    property cUp: TCell read _GetcUp write _SetcUp;
    property cDownLeft: TCell read _GetcDownLeft write _SetcDownLeft;
    property cUpRight: TCell read _GetcUpRight write _SetcUpRight;
    property cDownRight: TCell read _GetcDownRight write _SetcDownRight;
    property cUpLeft: TCell read _GetcUpLeft write _SetcUpLeft;
  end;

  TGame = class(TBusinessClassesRoot)
  private
    fInactiveCount: Integer;
    function _Get_M_TimerTime: TBAInteger;
    function _GetTimerTime: Integer;
    procedure _SetTimerTime(NewValue: Integer);
    function _Get_M_Generations: TBAInteger;
    function _GetGenerations: Integer;
    procedure _SetGenerations(NewValue: Integer);
    function _Get_M_board: TBABlob;
    function _Getboard: String;
    procedure _Setboard(NewValue: String);
    function _Get_M_xMax: TBAInteger;
    function _GetxMax: Integer;
    procedure _SetxMax(NewValue: Integer);
    function _Get_M_xMin: TBAInteger;
    function _GetxMin: Integer;
    procedure _SetxMin(NewValue: Integer);
    function _Get_M_yMax: TBAInteger;
    function _GetyMax: Integer;
    procedure _SetyMax(NewValue: Integer);
    function _Get_M_yMin: TBAInteger;
    function _GetyMin: Integer;
    procedure _SetyMin(NewValue: Integer);
    function _Get_M_xSize: TBAInteger;
    function _GetxSize: Integer;
    function _Get_M_FontSize: TBAInteger;
    function _GetFontSize: Integer;
    procedure _SetFontSize(NewValue: Integer);
    function _Get_M_collecting: TBABoolean;
    function _Getcollecting: Boolean;
    procedure _Setcollecting(NewValue: Boolean);
    function _GetCell: TCellList;
    function _Getcoord: TCellList;
    function _Get_Q_coord(x: Integer; y: Integer): TCell;
    procedure UpdateBounds(x: integer; y: integer); 
    procedure RefreshBounds; 
    function GetBounds: TRect; 
    property InactiveCount: Integer read fInactiveCount write fInactiveCount;
  protected
    procedure _board_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _board_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    procedure Tick; 
    procedure ClearCells; 
    procedure GarbageCollect; 
    procedure ResetBounds; 
    property M_TimerTime: TBAInteger read _Get_M_TimerTime;
    property M_Generations: TBAInteger read _Get_M_Generations;
    property M_board: TBABlob read _Get_M_board;
    property M_xMax: TBAInteger read _Get_M_xMax;
    property M_xMin: TBAInteger read _Get_M_xMin;
    property M_yMax: TBAInteger read _Get_M_yMax;
    property M_yMin: TBAInteger read _Get_M_yMin;
    property M_xSize: TBAInteger read _Get_M_xSize;
    property M_FontSize: TBAInteger read _Get_M_FontSize;
    property M_collecting: TBABoolean read _Get_M_collecting;
    property M_Cell: TCellList read _GetCell;
    property M_coord: TCellList read _Getcoord;
    property TimerTime: Integer read _GetTimerTime write _SetTimerTime;
    property Generations: Integer read _GetGenerations write _SetGenerations;
    property board: String read _Getboard write _Setboard;
    property xMax: Integer read _GetxMax write _SetxMax;
    property xMin: Integer read _GetxMin write _SetxMin;
    property yMax: Integer read _GetyMax write _SetyMax;
    property yMin: Integer read _GetyMin write _SetyMin;
    property xSize: Integer read _GetxSize;
    property FontSize: Integer read _GetFontSize write _SetFontSize;
    property collecting: Boolean read _Getcollecting write _Setcollecting;
    property Cell: TCellList read _GetCell;
    property coord[x: Integer; y: Integer]: TCell read _Get_Q_coord;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TCellList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCell;
    procedure SetBoldObject(index: Integer; NewObject: TCell);
  public
    function Includes(anObject: TCell): Boolean;
    function IndexOf(anObject: TCell): Integer;
    procedure Add(NewObject: TCell);
    function AddNew: TCell;
    procedure Insert(index: Integer; NewObject: TCell);
    property BoldObjects[index: Integer]: TCell read GetBoldObject write SetBoldObject; default;
  end;

  TGameList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TGame;
    procedure SetBoldObject(index: Integer; NewObject: TGame);
  public
    function Includes(anObject: TGame): Boolean;
    function IndexOf(anObject: TGame): Integer;
    procedure Add(NewObject: TGame);
    function AddNew: TGame;
    procedure Insert(index: Integer; NewObject: TGame);
    property BoldObjects[index: Integer]: TGame read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

