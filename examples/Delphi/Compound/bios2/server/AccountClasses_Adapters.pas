(************************************)
(*    This file is autogenerated    *)
(* Any manual changes will be LOST! *)
(************************************)

(* This file should be stored in the same directory    *)
(* as the form/datamodule with the corresponding model *)

// IMPORTANT NOTE:
// This unit needs AccountClasses_TLB to be generated. To generate this follow the following steps:
// * create a new TypeLibrary (In Delphi: File->New->ActiveX tab->Type Library)
// * Switch to the Uses-tab in the Type Library editor
// * RightClick and select "Show All Type Libraries"
// * Check the "Bold ObjectSpace Type Library
// * RightClick and select "Show Selected"
// * Switch to the Text-tab
// * Paste the text from AccountClasses.idl
// * Save the TypeLibrary (CTRL-S) as AccountClasses.tlb in the same catalog as this unit

// 

{ File generated 2/15/2001 2:49:00 PM }

unit AccountClasses_Adapters;

interface

uses
  ActiveX,
  Classes,
  Controls, 
  SysUtils,
  
  BoldDefs,
  BoldComAdapter,
  BoldComObjectSpace_TLB,
  BoldComObjectSpaceAdapters,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldSystemRT,
  BoldDomainElement,
  BoldSystem,
  BoldAttributes,
  AccountClasses,
  AccountClasses_TLB;

type

  TAccountClassesRootAdapter = class;
  TAccountAdapter = class;

  TAccountClassesRootAdapter = class(TBoldComObjectAdapter, IAccountClassesRoot)
  private
    function GetAsAccountClassesRoot: TAccountClassesRoot;
  protected
  public
    constructor Create(AdaptableObject: TBoldAdaptableObject; Owner: Boolean; const TypeLib: ITypeLib; const DispIntf: TGUID); override;
    property AsAccountClassesRoot: TAccountClassesRoot read GetAsAccountClassesRoot;
  end;


  TAccountAdapter = class(TAccountClassesRootAdapter, IAccount)
  private
    function GetAsAccount: TAccount;
  protected
    function Get_Total: Integer; safecall;
    procedure Set_Total(NewValue: Integer); safecall;
    function Get_Number: WideString; safecall;
    procedure Set_Number(const NewValue: WideString); safecall;
    function Get_Credit: Integer; safecall;
    procedure Set_Credit(NewValue: Integer); safecall;
  public
    constructor Create(AdaptableObject: TBoldAdaptableObject; Owner: Boolean; const TypeLib: ITypeLib; const DispIntf: TGUID); override;
    property AsAccount: TAccount read GetAsAccount;
  end;


implementation

uses
  
  BoldComUtils;

var
  G_TypeLibrary: ITypeLib = nil;

function AccountClasses_TypeLibrary: ITypeLib;
begin
  if not Assigned(G_TypeLibrary) then
  begin
    if Failed(LoadRegTypeLib(LIBID_AccountClasses,1,0,0,G_TypeLibrary)) then
      raise EBoldCom.Create('Unable to load type library (AccountClasses)');
  end;
  Result := G_TypeLibrary;
end;


{ TAccountClassesRootAdapter }

constructor TAccountClassesRootAdapter.Create(AdaptableObject: TBoldAdaptableObject; Owner: Boolean; const TypeLib: ITypeLib; const DispIntf: TGUID);
begin
  if Assigned(TypeLib) then
    inherited Create(AdaptableObject, Owner, TypeLib, DispIntf)
  else
    inherited Create(AdaptableObject, Owner, AccountClasses_TypeLibrary, IAccountClassesRoot);
end;

function TAccountClassesRootAdapter.GetAsAccountClassesRoot: TAccountClassesRoot;
begin
  Result := EnsuredAdaptee as TAccountClassesRoot;
end;




{ TAccountAdapter }

constructor TAccountAdapter.Create(AdaptableObject: TBoldAdaptableObject; Owner: Boolean; const TypeLib: ITypeLib; const DispIntf: TGUID);
begin
  if Assigned(TypeLib) then
    inherited Create(AdaptableObject, Owner, TypeLib, DispIntf)
  else
    inherited Create(AdaptableObject, Owner, AccountClasses_TypeLibrary, IAccount);
end;

function TAccountAdapter.GetAsAccount: TAccount;
begin
  Result := EnsuredAdaptee as TAccount;
end;


function TAccountAdapter.Get_Total: Integer;
begin
  result := AsAccount.Total;
end;

procedure TAccountAdapter.Set_Total(NewValue: Integer);
begin
  AsAccount.Total := NewValue;
end;

function TAccountAdapter.Get_Number: WideString;
begin
  result := AsAccount.Number;
end;

procedure TAccountAdapter.Set_Number(const NewValue: WideString);
begin
  AsAccount.Number := NewValue;
end;

function TAccountAdapter.Get_Credit: Integer;
begin
  result := AsAccount.Credit;
end;

procedure TAccountAdapter.Set_Credit(NewValue: Integer);
begin
  AsAccount.Credit := NewValue;
end;



initialization
  BoldComRegisterAdapter(TAccountClassesRootAdapter, TAccountClassesRoot);
  BoldComRegisterAdapter(TAccountAdapter, TAccount);
end.

 