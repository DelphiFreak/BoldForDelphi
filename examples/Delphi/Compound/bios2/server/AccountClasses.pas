(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-15 15:19:49         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit AccountClasses;

{$DEFINE AccountClasses_unitheader}
{$INCLUDE AccountClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE AccountClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TAccountClassesRoot }

procedure TAccountClassesRootList.Add(NewObject: TAccountClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TAccountClassesRootList.IndexOf(anObject: TAccountClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TAccountClassesRootList.Includes(anObject: TAccountClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TAccountClassesRootList.AddNew: TAccountClassesRoot;
begin
  result := TAccountClassesRoot(InternalAddNew);
end;

procedure TAccountClassesRootList.Insert(index: Integer; NewObject: TAccountClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TAccountClassesRootList.GetBoldObject(index: Integer): TAccountClassesRoot;
begin
  result := TAccountClassesRoot(GetElement(index));
end;

procedure TAccountClassesRootList.SetBoldObject(index: Integer; NewObject: TAccountClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TAccount }

function TAccount._Get_M_Total: TBAInteger;
begin
  assert(ValidateMember('TAccount', 'Total', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TAccount._GetTotal: Integer;
begin
  Result := M_Total.AsInteger;
end;

procedure TAccount._SetTotal(NewValue: Integer);
begin
  M_Total.AsInteger := NewValue;
end;

function TAccount._Get_M_Number: TBAString;
begin
  assert(ValidateMember('TAccount', 'Number', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TAccount._GetNumber: String;
begin
  Result := M_Number.AsString;
end;

procedure TAccount._SetNumber(NewValue: String);
begin
  M_Number.AsString := NewValue;
end;

function TAccount._Get_M_Credit: TBAInteger;
begin
  assert(ValidateMember('TAccount', 'Credit', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TAccount._GetCredit: Integer;
begin
  Result := M_Credit.AsInteger;
end;

procedure TAccount._SetCredit(NewValue: Integer);
begin
  M_Credit.AsInteger := NewValue;
end;

procedure TAccountList.Add(NewObject: TAccount);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TAccountList.IndexOf(anObject: TAccount): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TAccountList.Includes(anObject: TAccount) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TAccountList.AddNew: TAccount;
begin
  result := TAccount(InternalAddNew);
end;

procedure TAccountList.Insert(index: Integer; NewObject: TAccount);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TAccountList.GetBoldObject(index: Integer): TAccount;
begin
  result := TAccount(GetElement(index));
end;

procedure TAccountList.SetBoldObject(index: Integer; NewObject: TAccount);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1314621803';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('AccountClassesRoot', TAccountClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Account', TAccountList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('AccountClassesRoot', TAccountClassesRoot);
  BoldObjectClasses.AddObjectEntry('Account', TAccount);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('AccountClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

