(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-07-26 16:13:31         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF OrgChartClasses_Interface.inc}
{$DEFINE OrgChartClasses_Interface.inc}

{$IFNDEF OrgChartClasses_unitheader}
unit OrgChartClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TOrgChartClassesRoot = class;
  TOrgChartClassesRootList = class;
  TAddress = class;
  TAddressList = class;
  TCompany = class;
  TCompanyList = class;
  TDepartment = class;
  TDepartmentList = class;
  TDescription = class;
  TDescriptionList = class;
  TEmployment = class;
  TEmploymentList = class;
  TOffice = class;
  TOfficeList = class;
  TOfficesOrganization = class;
  TOfficesOrganizationList = class;
  TPerson = class;
  TPersonList = class;

  TOrgChartClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TAddress = class(TOrgChartClassesRoot)
  private
    function _Get_M_street: TBAString;
    function _Getstreet: String;
    procedure _Setstreet(NewValue: String);
    function _Get_M_city: TBAString;
    function _Getcity: String;
    procedure _Setcity(NewValue: String);
    function _Get_M_country: TBAString;
    function _Getcountry: String;
    procedure _Setcountry(NewValue: String);
    function _Get_M_postcode: TBAString;
    function _Getpostcode: String;
    procedure _Setpostcode(NewValue: String);
    function _Get_M_zip: TBAString;
    function _Getzip: String;
    procedure _Setzip(NewValue: String);
    function _Get_M_state: TBAString;
    function _Getstate: String;
    procedure _Setstate(NewValue: String);
    function _GettheOffice: TOffice;
    function _Get_M_theOffice: TBoldObjectReference;
    procedure _SettheOffice(value: TOffice);
  protected
  public
    property M_street: TBAString read _Get_M_street;
    property M_city: TBAString read _Get_M_city;
    property M_country: TBAString read _Get_M_country;
    property M_postcode: TBAString read _Get_M_postcode;
    property M_zip: TBAString read _Get_M_zip;
    property M_state: TBAString read _Get_M_state;
    property M_theOffice: TBoldObjectReference read _Get_M_theOffice;
    property street: String read _Getstreet write _Setstreet;
    property city: String read _Getcity write _Setcity;
    property country: String read _Getcountry write _Setcountry;
    property postcode: String read _Getpostcode write _Setpostcode;
    property zip: String read _Getzip write _Setzip;
    property state: String read _Getstate write _Setstate;
    property theOffice: TOffice read _GettheOffice write _SettheOffice;
  end;

  TCompany = class(TOrgChartClassesRoot)
  private
    function _Get_M_Logo: TBABlob;
    function _GetLogo: String;
    procedure _SetLogo(NewValue: String);
    function _Get_M_CompanyName: TBAString;
    function _GetCompanyName: String;
    procedure _SetCompanyName(NewValue: String);
    function _GetEmployees: TPersonList;
    function _GetEmployment: TEmploymentList;
    function _GetOffices: TOfficeList;
    function _GetOfficesOrganization: TOfficesOrganizationList;
  protected
  public
    property M_Logo: TBABlob read _Get_M_Logo;
    property M_CompanyName: TBAString read _Get_M_CompanyName;
    property M_Employees: TPersonList read _GetEmployees;
    property M_Employment: TEmploymentList read _GetEmployment;
    property M_Offices: TOfficeList read _GetOffices;
    property M_OfficesOrganization: TOfficesOrganizationList read _GetOfficesOrganization;
    property Logo: String read _GetLogo write _SetLogo;
    property CompanyName: String read _GetCompanyName write _SetCompanyName;
    property Employees: TPersonList read _GetEmployees;
    property Employment: TEmploymentList read _GetEmployment;
    property Offices: TOfficeList read _GetOffices;
    property OfficesOrganization: TOfficesOrganizationList read _GetOfficesOrganization;
  end;

  TDepartment = class(TOrgChartClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _GetOffice: TOffice;
    function _Get_M_Office: TBoldObjectReference;
    procedure _SetOffice(value: TOffice);
    function _GetEmployment: TEmploymentList;
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_Office: TBoldObjectReference read _Get_M_Office;
    property M_Employment: TEmploymentList read _GetEmployment;
    property Name: String read _GetName write _SetName;
    property Office: TOffice read _GetOffice write _SetOffice;
    property Employment: TEmploymentList read _GetEmployment;
  end;

  TDescription = class(TOrgChartClassesRoot)
  private
    function _Get_M_Content: TBAString;
    function _GetContent: String;
    procedure _SetContent(NewValue: String);
    function _GetOffice: TOffice;
    function _Get_M_Office: TBoldObjectReference;
    procedure _SetOffice(value: TOffice);
  protected
  public
    property M_Content: TBAString read _Get_M_Content;
    property M_Office: TBoldObjectReference read _Get_M_Office;
    property Content: String read _GetContent write _SetContent;
    property Office: TOffice read _GetOffice write _SetOffice;
  end;

  TEmployment = class(TOrgChartClassesRoot)
  private
    function _Get_M_Title: TBAString;
    function _GetTitle: String;
    procedure _SetTitle(NewValue: String);
    function _Get_M_PhoneExt: TBAString;
    function _GetPhoneExt: String;
    procedure _SetPhoneExt(NewValue: String);
    function _Get_M_Email: TBAString;
    function _GetEmail: String;
    procedure _SetEmail(NewValue: String);
    function _GetDepartment: TDepartment;
    function _Get_M_Department: TBoldObjectReference;
    procedure _SetDepartment(value: TDepartment);
    function _GetEmployer: TCompany;
    function _Get_M_Employer: TBoldObjectReference;
    function _GetEmployees: TPerson;
    function _Get_M_Employees: TBoldObjectReference;
  protected
  public
    property M_Title: TBAString read _Get_M_Title;
    property M_PhoneExt: TBAString read _Get_M_PhoneExt;
    property M_Email: TBAString read _Get_M_Email;
    property M_Department: TBoldObjectReference read _Get_M_Department;
    property M_Employer: TBoldObjectReference read _Get_M_Employer;
    property M_Employees: TBoldObjectReference read _Get_M_Employees;
    property Title: String read _GetTitle write _SetTitle;
    property PhoneExt: String read _GetPhoneExt write _SetPhoneExt;
    property Email: String read _GetEmail write _SetEmail;
    property Department: TDepartment read _GetDepartment write _SetDepartment;
    property Employer: TCompany read _GetEmployer;
    property Employees: TPerson read _GetEmployees;
  end;

  TOffice = class(TOrgChartClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _Get_M_EstablishedDate: TBADate;
    function _GetEstablishedDate: TDate;
    procedure _SetEstablishedDate(NewValue: TDate);
    function _Get_M_phone: TBAString;
    function _Getphone: String;
    procedure _Setphone(NewValue: String);
    function _Get_M_fax: TBAString;
    function _Getfax: String;
    procedure _Setfax(NewValue: String);
    function _Get_M_Email: TBAString;
    function _GetEmail: String;
    procedure _SetEmail(NewValue: String);
    function _Getaddress: TAddress;
    function _Get_M_address: TBoldObjectReference;
    procedure _Setaddress(value: TAddress);
    function _GetDepartments: TDepartmentList;
    function _GetOrganization: TCompany;
    function _Get_M_Organization: TBoldObjectReference;
    procedure _SetOrganization(value: TCompany);
    function _GetOfficesOrganization: TOfficesOrganization;
    function _Get_M_OfficesOrganization: TBoldObjectReference;
    function _GetDescription: TDescription;
    function _Get_M_Description: TBoldObjectReference;
    procedure _SetDescription(value: TDescription);
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_EstablishedDate: TBADate read _Get_M_EstablishedDate;
    property M_phone: TBAString read _Get_M_phone;
    property M_fax: TBAString read _Get_M_fax;
    property M_Email: TBAString read _Get_M_Email;
    property M_address: TBoldObjectReference read _Get_M_address;
    property M_Departments: TDepartmentList read _GetDepartments;
    property M_Organization: TBoldObjectReference read _Get_M_Organization;
    property M_OfficesOrganization: TBoldObjectReference read _Get_M_OfficesOrganization;
    property M_Description: TBoldObjectReference read _Get_M_Description;
    property Name: String read _GetName write _SetName;
    property EstablishedDate: TDate read _GetEstablishedDate write _SetEstablishedDate;
    property phone: String read _Getphone write _Setphone;
    property fax: String read _Getfax write _Setfax;
    property Email: String read _GetEmail write _SetEmail;
    property address: TAddress read _Getaddress write _Setaddress;
    property Departments: TDepartmentList read _GetDepartments;
    property Organization: TCompany read _GetOrganization write _SetOrganization;
    property OfficesOrganization: TOfficesOrganization read _GetOfficesOrganization;
    property Description: TDescription read _GetDescription write _SetDescription;
  end;

  TOfficesOrganization = class(TOrgChartClassesRoot)
  private
    function _GetOrganization: TCompany;
    function _Get_M_Organization: TBoldObjectReference;
    function _GetOffices: TOffice;
    function _Get_M_Offices: TBoldObjectReference;
  protected
  public
    property M_Organization: TBoldObjectReference read _Get_M_Organization;
    property M_Offices: TBoldObjectReference read _Get_M_Offices;
    property Organization: TCompany read _GetOrganization;
    property Offices: TOffice read _GetOffices;
  end;

  TPerson = class(TOrgChartClassesRoot)
  private
    function _Get_M_FirstName: TBAString;
    function _GetFirstName: String;
    procedure _SetFirstName(NewValue: String);
    function _Get_M_LastName: TBAString;
    function _GetLastName: String;
    procedure _SetLastName(NewValue: String);
    function _Get_M_FullName: TBAString;
    function _GetFullName: String;
    function _GetEmployer: TCompanyList;
    function _GetEmployment: TEmploymentList;
  protected
    procedure _FullName_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_FirstName: TBAString read _Get_M_FirstName;
    property M_LastName: TBAString read _Get_M_LastName;
    property M_FullName: TBAString read _Get_M_FullName;
    property M_Employer: TCompanyList read _GetEmployer;
    property M_Employment: TEmploymentList read _GetEmployment;
    property FirstName: String read _GetFirstName write _SetFirstName;
    property LastName: String read _GetLastName write _SetLastName;
    property FullName: String read _GetFullName;
    property Employer: TCompanyList read _GetEmployer;
    property Employment: TEmploymentList read _GetEmployment;
  end;

  TOrgChartClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TOrgChartClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TOrgChartClassesRoot);
  public
    function Includes(anObject: TOrgChartClassesRoot): Boolean;
    function IndexOf(anObject: TOrgChartClassesRoot): Integer;
    procedure Add(NewObject: TOrgChartClassesRoot);
    function AddNew: TOrgChartClassesRoot;
    procedure Insert(index: Integer; NewObject: TOrgChartClassesRoot);
    property BoldObjects[index: Integer]: TOrgChartClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TAddressList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TAddress;
    procedure SetBoldObject(index: Integer; NewObject: TAddress);
  public
    function Includes(anObject: TAddress): Boolean;
    function IndexOf(anObject: TAddress): Integer;
    procedure Add(NewObject: TAddress);
    function AddNew: TAddress;
    procedure Insert(index: Integer; NewObject: TAddress);
    property BoldObjects[index: Integer]: TAddress read GetBoldObject write SetBoldObject; default;
  end;

  TCompanyList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCompany;
    procedure SetBoldObject(index: Integer; NewObject: TCompany);
  public
    function Includes(anObject: TCompany): Boolean;
    function IndexOf(anObject: TCompany): Integer;
    procedure Add(NewObject: TCompany);
    function AddNew: TCompany;
    procedure Insert(index: Integer; NewObject: TCompany);
    property BoldObjects[index: Integer]: TCompany read GetBoldObject write SetBoldObject; default;
  end;

  TDepartmentList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDepartment;
    procedure SetBoldObject(index: Integer; NewObject: TDepartment);
  public
    function Includes(anObject: TDepartment): Boolean;
    function IndexOf(anObject: TDepartment): Integer;
    procedure Add(NewObject: TDepartment);
    function AddNew: TDepartment;
    procedure Insert(index: Integer; NewObject: TDepartment);
    property BoldObjects[index: Integer]: TDepartment read GetBoldObject write SetBoldObject; default;
  end;

  TDescriptionList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDescription;
    procedure SetBoldObject(index: Integer; NewObject: TDescription);
  public
    function Includes(anObject: TDescription): Boolean;
    function IndexOf(anObject: TDescription): Integer;
    procedure Add(NewObject: TDescription);
    function AddNew: TDescription;
    procedure Insert(index: Integer; NewObject: TDescription);
    property BoldObjects[index: Integer]: TDescription read GetBoldObject write SetBoldObject; default;
  end;

  TEmploymentList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TEmployment;
    procedure SetBoldObject(index: Integer; NewObject: TEmployment);
  public
    function Includes(anObject: TEmployment): Boolean;
    function IndexOf(anObject: TEmployment): Integer;
    procedure Add(NewObject: TEmployment);
    function AddNew: TEmployment;
    procedure Insert(index: Integer; NewObject: TEmployment);
    property BoldObjects[index: Integer]: TEmployment read GetBoldObject write SetBoldObject; default;
  end;

  TOfficeList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOffice;
    procedure SetBoldObject(index: Integer; NewObject: TOffice);
  public
    function Includes(anObject: TOffice): Boolean;
    function IndexOf(anObject: TOffice): Integer;
    procedure Add(NewObject: TOffice);
    function AddNew: TOffice;
    procedure Insert(index: Integer; NewObject: TOffice);
    property BoldObjects[index: Integer]: TOffice read GetBoldObject write SetBoldObject; default;
  end;

  TOfficesOrganizationList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOfficesOrganization;
    procedure SetBoldObject(index: Integer; NewObject: TOfficesOrganization);
  public
    function Includes(anObject: TOfficesOrganization): Boolean;
    function IndexOf(anObject: TOfficesOrganization): Integer;
    procedure Add(NewObject: TOfficesOrganization);
    function AddNew: TOfficesOrganization;
    procedure Insert(index: Integer; NewObject: TOfficesOrganization);
    property BoldObjects[index: Integer]: TOfficesOrganization read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TOrgChartClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}

