(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-07-26 16:13:30         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit OrgChartClasses;

{$DEFINE OrgChartClasses_unitheader}
{$INCLUDE OrgChartClasses_Interface.inc}

{ Includefile for methodimplementations }

{$INCLUDE OrgChartClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TOrgChartClassesRoot }

procedure TOrgChartClassesRootList.Add(NewObject: TOrgChartClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrgChartClassesRootList.IndexOf(anObject: TOrgChartClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrgChartClassesRootList.Includes(anObject: TOrgChartClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrgChartClassesRootList.AddNew: TOrgChartClassesRoot;
begin
  result := TOrgChartClassesRoot(InternalAddNew);
end;

procedure TOrgChartClassesRootList.Insert(index: Integer; NewObject: TOrgChartClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrgChartClassesRootList.GetBoldObject(index: Integer): TOrgChartClassesRoot;
begin
  result := TOrgChartClassesRoot(GetElement(index));
end;

procedure TOrgChartClassesRootList.SetBoldObject(index: Integer; NewObject: TOrgChartClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TAddress }

function TAddress._Get_M_street: TBAString;
begin
  assert(ValidateMember('TAddress', 'street', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TAddress._Getstreet: String;
begin
  Result := M_street.AsString;
end;

procedure TAddress._Setstreet(NewValue: String);
begin
  M_street.AsString := NewValue;
end;

function TAddress._Get_M_city: TBAString;
begin
  assert(ValidateMember('TAddress', 'city', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TAddress._Getcity: String;
begin
  Result := M_city.AsString;
end;

procedure TAddress._Setcity(NewValue: String);
begin
  M_city.AsString := NewValue;
end;

function TAddress._Get_M_country: TBAString;
begin
  assert(ValidateMember('TAddress', 'country', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TAddress._Getcountry: String;
begin
  Result := M_country.AsString;
end;

procedure TAddress._Setcountry(NewValue: String);
begin
  M_country.AsString := NewValue;
end;

function TAddress._Get_M_postcode: TBAString;
begin
  assert(ValidateMember('TAddress', 'postcode', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TAddress._Getpostcode: String;
begin
  Result := M_postcode.AsString;
end;

procedure TAddress._Setpostcode(NewValue: String);
begin
  M_postcode.AsString := NewValue;
end;

function TAddress._Get_M_zip: TBAString;
begin
  assert(ValidateMember('TAddress', 'zip', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TAddress._Getzip: String;
begin
  Result := M_zip.AsString;
end;

procedure TAddress._Setzip(NewValue: String);
begin
  M_zip.AsString := NewValue;
end;

function TAddress._Get_M_state: TBAString;
begin
  assert(ValidateMember('TAddress', 'state', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TAddress._Getstate: String;
begin
  Result := M_state.AsString;
end;

procedure TAddress._Setstate(NewValue: String);
begin
  M_state.AsString := NewValue;
end;

function TAddress._Get_M_theOffice: TBoldObjectReference;
begin
  assert(ValidateMember('TAddress', 'theOffice', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TAddress._GettheOffice: TOffice;
begin
  assert(not assigned(M_theOffice.BoldObject) or (M_theOffice.BoldObject is TOffice), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'theOffice', M_theOffice.BoldObject.ClassName, 'TOffice']));
  Result := TOffice(M_theOffice.BoldObject);
end;

procedure TAddress._SettheOffice(value: TOffice);
begin
  M_theOffice.BoldObject := value;
end;

procedure TAddressList.Add(NewObject: TAddress);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TAddressList.IndexOf(anObject: TAddress): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TAddressList.Includes(anObject: TAddress) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TAddressList.AddNew: TAddress;
begin
  result := TAddress(InternalAddNew);
end;

procedure TAddressList.Insert(index: Integer; NewObject: TAddress);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TAddressList.GetBoldObject(index: Integer): TAddress;
begin
  result := TAddress(GetElement(index));
end;

procedure TAddressList.SetBoldObject(index: Integer; NewObject: TAddress);
begin;
  SetElement(index, NewObject);
end;

{ TCompany }

function TCompany._Get_M_Logo: TBABlob;
begin
  assert(ValidateMember('TCompany', 'Logo', 0, TBABlob));
  Result := TBABlob(BoldMembers[0]);
end;

function TCompany._GetLogo: String;
begin
  Result := M_Logo.AsString;
end;

procedure TCompany._SetLogo(NewValue: String);
begin
  M_Logo.AsString := NewValue;
end;

function TCompany._Get_M_CompanyName: TBAString;
begin
  assert(ValidateMember('TCompany', 'CompanyName', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TCompany._GetCompanyName: String;
begin
  Result := M_CompanyName.AsString;
end;

procedure TCompany._SetCompanyName(NewValue: String);
begin
  M_CompanyName.AsString := NewValue;
end;

function TCompany._GetEmployees: TPersonList;
begin
  assert(ValidateMember('TCompany', 'Employees', 2, TPersonList));
  Result := TPersonList(BoldMembers[2]);
end;

function TCompany._GetEmployment: TEmploymentList;
begin
  assert(ValidateMember('TCompany', 'Employment', 3, TEmploymentList));
  Result := TEmploymentList(BoldMembers[3]);
end;

function TCompany._GetOffices: TOfficeList;
begin
  assert(ValidateMember('TCompany', 'Offices', 4, TOfficeList));
  Result := TOfficeList(BoldMembers[4]);
end;

function TCompany._GetOfficesOrganization: TOfficesOrganizationList;
begin
  assert(ValidateMember('TCompany', 'OfficesOrganization', 5, TOfficesOrganizationList));
  Result := TOfficesOrganizationList(BoldMembers[5]);
end;

procedure TCompanyList.Add(NewObject: TCompany);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TCompanyList.IndexOf(anObject: TCompany): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TCompanyList.Includes(anObject: TCompany) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TCompanyList.AddNew: TCompany;
begin
  result := TCompany(InternalAddNew);
end;

procedure TCompanyList.Insert(index: Integer; NewObject: TCompany);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TCompanyList.GetBoldObject(index: Integer): TCompany;
begin
  result := TCompany(GetElement(index));
end;

procedure TCompanyList.SetBoldObject(index: Integer; NewObject: TCompany);
begin;
  SetElement(index, NewObject);
end;

{ TDepartment }

function TDepartment._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TDepartment', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TDepartment._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TDepartment._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TDepartment._Get_M_Office: TBoldObjectReference;
begin
  assert(ValidateMember('TDepartment', 'Office', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TDepartment._GetOffice: TOffice;
begin
  assert(not assigned(M_Office.BoldObject) or (M_Office.BoldObject is TOffice), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Office', M_Office.BoldObject.ClassName, 'TOffice']));
  Result := TOffice(M_Office.BoldObject);
end;

procedure TDepartment._SetOffice(value: TOffice);
begin
  M_Office.BoldObject := value;
end;

function TDepartment._GetEmployment: TEmploymentList;
begin
  assert(ValidateMember('TDepartment', 'Employment', 2, TEmploymentList));
  Result := TEmploymentList(BoldMembers[2]);
end;

procedure TDepartmentList.Add(NewObject: TDepartment);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDepartmentList.IndexOf(anObject: TDepartment): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDepartmentList.Includes(anObject: TDepartment) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDepartmentList.AddNew: TDepartment;
begin
  result := TDepartment(InternalAddNew);
end;

procedure TDepartmentList.Insert(index: Integer; NewObject: TDepartment);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDepartmentList.GetBoldObject(index: Integer): TDepartment;
begin
  result := TDepartment(GetElement(index));
end;

procedure TDepartmentList.SetBoldObject(index: Integer; NewObject: TDepartment);
begin;
  SetElement(index, NewObject);
end;

{ TDescription }

function TDescription._Get_M_Content: TBAString;
begin
  assert(ValidateMember('TDescription', 'Content', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TDescription._GetContent: String;
begin
  Result := M_Content.AsString;
end;

procedure TDescription._SetContent(NewValue: String);
begin
  M_Content.AsString := NewValue;
end;

function TDescription._Get_M_Office: TBoldObjectReference;
begin
  assert(ValidateMember('TDescription', 'Office', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TDescription._GetOffice: TOffice;
begin
  assert(not assigned(M_Office.BoldObject) or (M_Office.BoldObject is TOffice), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Office', M_Office.BoldObject.ClassName, 'TOffice']));
  Result := TOffice(M_Office.BoldObject);
end;

procedure TDescription._SetOffice(value: TOffice);
begin
  M_Office.BoldObject := value;
end;

procedure TDescriptionList.Add(NewObject: TDescription);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDescriptionList.IndexOf(anObject: TDescription): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDescriptionList.Includes(anObject: TDescription) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDescriptionList.AddNew: TDescription;
begin
  result := TDescription(InternalAddNew);
end;

procedure TDescriptionList.Insert(index: Integer; NewObject: TDescription);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDescriptionList.GetBoldObject(index: Integer): TDescription;
begin
  result := TDescription(GetElement(index));
end;

procedure TDescriptionList.SetBoldObject(index: Integer; NewObject: TDescription);
begin;
  SetElement(index, NewObject);
end;

{ TEmployment }

function TEmployment._Get_M_Title: TBAString;
begin
  assert(ValidateMember('TEmployment', 'Title', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TEmployment._GetTitle: String;
begin
  Result := M_Title.AsString;
end;

procedure TEmployment._SetTitle(NewValue: String);
begin
  M_Title.AsString := NewValue;
end;

function TEmployment._Get_M_PhoneExt: TBAString;
begin
  assert(ValidateMember('TEmployment', 'PhoneExt', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TEmployment._GetPhoneExt: String;
begin
  Result := M_PhoneExt.AsString;
end;

procedure TEmployment._SetPhoneExt(NewValue: String);
begin
  M_PhoneExt.AsString := NewValue;
end;

function TEmployment._Get_M_Email: TBAString;
begin
  assert(ValidateMember('TEmployment', 'Email', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TEmployment._GetEmail: String;
begin
  Result := M_Email.AsString;
end;

procedure TEmployment._SetEmail(NewValue: String);
begin
  M_Email.AsString := NewValue;
end;

function TEmployment._Get_M_Department: TBoldObjectReference;
begin
  assert(ValidateMember('TEmployment', 'Department', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TEmployment._GetDepartment: TDepartment;
begin
  assert(not assigned(M_Department.BoldObject) or (M_Department.BoldObject is TDepartment), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Department', M_Department.BoldObject.ClassName, 'TDepartment']));
  Result := TDepartment(M_Department.BoldObject);
end;

procedure TEmployment._SetDepartment(value: TDepartment);
begin
  M_Department.BoldObject := value;
end;

function TEmployment._Get_M_Employer: TBoldObjectReference;
begin
  assert(ValidateMember('TEmployment', 'Employer', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TEmployment._GetEmployer: TCompany;
begin
  assert(not assigned(M_Employer.BoldObject) or (M_Employer.BoldObject is TCompany), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Employer', M_Employer.BoldObject.ClassName, 'TCompany']));
  Result := TCompany(M_Employer.BoldObject);
end;

function TEmployment._Get_M_Employees: TBoldObjectReference;
begin
  assert(ValidateMember('TEmployment', 'Employees', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TEmployment._GetEmployees: TPerson;
begin
  assert(not assigned(M_Employees.BoldObject) or (M_Employees.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Employees', M_Employees.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_Employees.BoldObject);
end;

procedure TEmploymentList.Add(NewObject: TEmployment);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TEmploymentList.IndexOf(anObject: TEmployment): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TEmploymentList.Includes(anObject: TEmployment) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TEmploymentList.AddNew: TEmployment;
begin
  result := TEmployment(InternalAddNew);
end;

procedure TEmploymentList.Insert(index: Integer; NewObject: TEmployment);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TEmploymentList.GetBoldObject(index: Integer): TEmployment;
begin
  result := TEmployment(GetElement(index));
end;

procedure TEmploymentList.SetBoldObject(index: Integer; NewObject: TEmployment);
begin;
  SetElement(index, NewObject);
end;

{ TOffice }

function TOffice._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TOffice', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TOffice._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TOffice._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TOffice._Get_M_EstablishedDate: TBADate;
begin
  assert(ValidateMember('TOffice', 'EstablishedDate', 1, TBADate));
  Result := TBADate(BoldMembers[1]);
end;

function TOffice._GetEstablishedDate: TDate;
begin
  Result := M_EstablishedDate.AsDate;
end;

procedure TOffice._SetEstablishedDate(NewValue: TDate);
begin
  M_EstablishedDate.AsDate := NewValue;
end;

function TOffice._Get_M_phone: TBAString;
begin
  assert(ValidateMember('TOffice', 'phone', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TOffice._Getphone: String;
begin
  Result := M_phone.AsString;
end;

procedure TOffice._Setphone(NewValue: String);
begin
  M_phone.AsString := NewValue;
end;

function TOffice._Get_M_fax: TBAString;
begin
  assert(ValidateMember('TOffice', 'fax', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TOffice._Getfax: String;
begin
  Result := M_fax.AsString;
end;

procedure TOffice._Setfax(NewValue: String);
begin
  M_fax.AsString := NewValue;
end;

function TOffice._Get_M_Email: TBAString;
begin
  assert(ValidateMember('TOffice', 'Email', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TOffice._GetEmail: String;
begin
  Result := M_Email.AsString;
end;

procedure TOffice._SetEmail(NewValue: String);
begin
  M_Email.AsString := NewValue;
end;

function TOffice._Get_M_address: TBoldObjectReference;
begin
  assert(ValidateMember('TOffice', 'address', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TOffice._Getaddress: TAddress;
begin
  assert(not assigned(M_address.BoldObject) or (M_address.BoldObject is TAddress), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'address', M_address.BoldObject.ClassName, 'TAddress']));
  Result := TAddress(M_address.BoldObject);
end;

procedure TOffice._Setaddress(value: TAddress);
begin
  M_address.BoldObject := value;
end;

function TOffice._GetDepartments: TDepartmentList;
begin
  assert(ValidateMember('TOffice', 'Departments', 6, TDepartmentList));
  Result := TDepartmentList(BoldMembers[6]);
end;

function TOffice._Get_M_Organization: TBoldObjectReference;
begin
  assert(ValidateMember('TOffice', 'Organization', 7, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[7]);
end;

function TOffice._GetOrganization: TCompany;
begin
  assert(not assigned(M_Organization.BoldObject) or (M_Organization.BoldObject is TCompany), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Organization', M_Organization.BoldObject.ClassName, 'TCompany']));
  Result := TCompany(M_Organization.BoldObject);
end;

procedure TOffice._SetOrganization(value: TCompany);
begin
  M_Organization.BoldObject := value;
end;

function TOffice._Get_M_OfficesOrganization: TBoldObjectReference;
begin
  assert(ValidateMember('TOffice', 'OfficesOrganization', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TOffice._GetOfficesOrganization: TOfficesOrganization;
begin
  assert(not assigned(M_OfficesOrganization.BoldObject) or (M_OfficesOrganization.BoldObject is TOfficesOrganization), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'OfficesOrganization', M_OfficesOrganization.BoldObject.ClassName, 'TOfficesOrganization']));
  Result := TOfficesOrganization(M_OfficesOrganization.BoldObject);
end;

function TOffice._Get_M_Description: TBoldObjectReference;
begin
  assert(ValidateMember('TOffice', 'Description', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TOffice._GetDescription: TDescription;
begin
  assert(not assigned(M_Description.BoldObject) or (M_Description.BoldObject is TDescription), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Description', M_Description.BoldObject.ClassName, 'TDescription']));
  Result := TDescription(M_Description.BoldObject);
end;

procedure TOffice._SetDescription(value: TDescription);
begin
  M_Description.BoldObject := value;
end;

procedure TOfficeList.Add(NewObject: TOffice);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOfficeList.IndexOf(anObject: TOffice): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOfficeList.Includes(anObject: TOffice) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOfficeList.AddNew: TOffice;
begin
  result := TOffice(InternalAddNew);
end;

procedure TOfficeList.Insert(index: Integer; NewObject: TOffice);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOfficeList.GetBoldObject(index: Integer): TOffice;
begin
  result := TOffice(GetElement(index));
end;

procedure TOfficeList.SetBoldObject(index: Integer; NewObject: TOffice);
begin;
  SetElement(index, NewObject);
end;

{ TOfficesOrganization }

function TOfficesOrganization._Get_M_Organization: TBoldObjectReference;
begin
  assert(ValidateMember('TOfficesOrganization', 'Organization', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TOfficesOrganization._GetOrganization: TCompany;
begin
  assert(not assigned(M_Organization.BoldObject) or (M_Organization.BoldObject is TCompany), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Organization', M_Organization.BoldObject.ClassName, 'TCompany']));
  Result := TCompany(M_Organization.BoldObject);
end;

function TOfficesOrganization._Get_M_Offices: TBoldObjectReference;
begin
  assert(ValidateMember('TOfficesOrganization', 'Offices', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TOfficesOrganization._GetOffices: TOffice;
begin
  assert(not assigned(M_Offices.BoldObject) or (M_Offices.BoldObject is TOffice), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Offices', M_Offices.BoldObject.ClassName, 'TOffice']));
  Result := TOffice(M_Offices.BoldObject);
end;

procedure TOfficesOrganizationList.Add(NewObject: TOfficesOrganization);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOfficesOrganizationList.IndexOf(anObject: TOfficesOrganization): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOfficesOrganizationList.Includes(anObject: TOfficesOrganization) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOfficesOrganizationList.AddNew: TOfficesOrganization;
begin
  result := TOfficesOrganization(InternalAddNew);
end;

procedure TOfficesOrganizationList.Insert(index: Integer; NewObject: TOfficesOrganization);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOfficesOrganizationList.GetBoldObject(index: Integer): TOfficesOrganization;
begin
  result := TOfficesOrganization(GetElement(index));
end;

procedure TOfficesOrganizationList.SetBoldObject(index: Integer; NewObject: TOfficesOrganization);
begin;
  SetElement(index, NewObject);
end;

{ TPerson }

function TPerson._Get_M_FirstName: TBAString;
begin
  assert(ValidateMember('TPerson', 'FirstName', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPerson._GetFirstName: String;
begin
  Result := M_FirstName.AsString;
end;

procedure TPerson._SetFirstName(NewValue: String);
begin
  M_FirstName.AsString := NewValue;
end;

function TPerson._Get_M_LastName: TBAString;
begin
  assert(ValidateMember('TPerson', 'LastName', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPerson._GetLastName: String;
begin
  Result := M_LastName.AsString;
end;

procedure TPerson._SetLastName(NewValue: String);
begin
  M_LastName.AsString := NewValue;
end;

function TPerson._Get_M_FullName: TBAString;
begin
  assert(ValidateMember('TPerson', 'FullName', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPerson._GetFullName: String;
begin
  Result := M_FullName.AsString;
end;

function TPerson._GetEmployer: TCompanyList;
begin
  assert(ValidateMember('TPerson', 'Employer', 3, TCompanyList));
  Result := TCompanyList(BoldMembers[3]);
end;

function TPerson._GetEmployment: TEmploymentList;
begin
  assert(ValidateMember('TPerson', 'Employment', 4, TEmploymentList));
  Result := TEmploymentList(BoldMembers[4]);
end;

procedure TPersonList.Add(NewObject: TPerson);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonList.IndexOf(anObject: TPerson): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonList.Includes(anObject: TPerson) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonList.AddNew: TPerson;
begin
  result := TPerson(InternalAddNew);
end;

procedure TPersonList.Insert(index: Integer; NewObject: TPerson);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonList.GetBoldObject(index: Integer): TPerson;
begin
  result := TPerson(GetElement(index));
end;

procedure TPersonList.SetBoldObject(index: Integer; NewObject: TPerson);
begin;
  SetElement(index, NewObject);
end;

function TPerson.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_FullName) then result := _FullName_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TPerson.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

function GeneratedCodeCRC: String;
begin
  result := '1649828323';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('OrgChartClassesRoot', TOrgChartClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Address', TAddressList);
  BoldObjectListClasses.AddObjectEntry('Company', TCompanyList);
  BoldObjectListClasses.AddObjectEntry('Department', TDepartmentList);
  BoldObjectListClasses.AddObjectEntry('Description', TDescriptionList);
  BoldObjectListClasses.AddObjectEntry('Employment', TEmploymentList);
  BoldObjectListClasses.AddObjectEntry('Office', TOfficeList);
  BoldObjectListClasses.AddObjectEntry('OfficesOrganization', TOfficesOrganizationList);
  BoldObjectListClasses.AddObjectEntry('Person', TPersonList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('OrgChartClassesRoot', TOrgChartClassesRoot);
  BoldObjectClasses.AddObjectEntry('Address', TAddress);
  BoldObjectClasses.AddObjectEntry('Company', TCompany);
  BoldObjectClasses.AddObjectEntry('Department', TDepartment);
  BoldObjectClasses.AddObjectEntry('Description', TDescription);
  BoldObjectClasses.AddObjectEntry('Employment', TEmployment);
  BoldObjectClasses.AddObjectEntry('Office', TOffice);
  BoldObjectClasses.AddObjectEntry('OfficesOrganization', TOfficesOrganization);
  BoldObjectClasses.AddObjectEntry('Person', TPerson);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('OrgChartClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

