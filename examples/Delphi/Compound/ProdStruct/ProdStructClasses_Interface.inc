(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 17:08:33         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ProdStructClasses_Interface.inc}
{$DEFINE ProdStructClasses_Interface.inc}

{$IFNDEF ProdStructClasses_unitheader}
unit ProdStructClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TProdStructClassesRoot = class;
  TProdStructClassesRootList = class;
  TPartOfParts = class;
  TPartOfPartsList = class;
  TProduct = class;
  TProductList = class;
  TAssembly = class;
  TAssemblyList = class;
  TSimple_Product = class;
  TSimple_ProductList = class;

  TProdStructClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TPartOfParts = class(TProdStructClassesRoot)
  private
    function _GetParts: TProduct;
    function _Get_M_Parts: TBoldObjectReference;
    function _GetPartOf: TAssembly;
    function _Get_M_PartOf: TBoldObjectReference;
    property M_PartOf: TBoldObjectReference read _Get_M_PartOf;
    property PartOf: TAssembly read _GetPartOf;
  protected
  public
    property M_Parts: TBoldObjectReference read _Get_M_Parts;
    property Parts: TProduct read _GetParts;
  end;

  TProduct = class(TProdStructClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _Get_M_Price: TBACurrency;
    function _GetPrice: Currency;
    procedure _SetPrice(NewValue: Currency);
    function _Get_M_TotalCost: TBACurrency;
    function _GetTotalCost: Currency;
    function _GetPartOf: TAssemblyList;
    function _GetPartOfPartOfParts: TPartOfPartsList;
    property M_PartOf: TAssemblyList read _GetPartOf;
    property M_PartOfPartOfParts: TPartOfPartsList read _GetPartOfPartOfParts;
    property PartOf: TAssemblyList read _GetPartOf;
    property PartOfPartOfParts: TPartOfPartsList read _GetPartOfPartOfParts;
  protected
    procedure _TotalCost_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_Price: TBACurrency read _Get_M_Price;
    property M_TotalCost: TBACurrency read _Get_M_TotalCost;
    property Name: String read _GetName write _SetName;
    property Price: Currency read _GetPrice write _SetPrice;
    property TotalCost: Currency read _GetTotalCost;
  end;

  TAssembly = class(TProduct)
  private
    function _Get_M_AssemblyCost: TBACurrency;
    function _GetAssemblyCost: Currency;
    procedure _SetAssemblyCost(NewValue: Currency);
    function _GetParts: TProductList;
    function _GetPartsPartOfParts: TPartOfPartsList;
  protected
    procedure _TotalCost_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); override;
  public
    property M_AssemblyCost: TBACurrency read _Get_M_AssemblyCost;
    property M_Parts: TProductList read _GetParts;
    property M_PartsPartOfParts: TPartOfPartsList read _GetPartsPartOfParts;
    property AssemblyCost: Currency read _GetAssemblyCost write _SetAssemblyCost;
    property Parts: TProductList read _GetParts;
    property PartsPartOfParts: TPartOfPartsList read _GetPartsPartOfParts;
  end;

  TSimple_Product = class(TProduct)
  private
    function _Get_M_ProductionCost: TBACurrency;
    function _GetProductionCost: Currency;
    procedure _SetProductionCost(NewValue: Currency);
  protected
    procedure _TotalCost_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); override;
  public
    property M_ProductionCost: TBACurrency read _Get_M_ProductionCost;
    property ProductionCost: Currency read _GetProductionCost write _SetProductionCost;
  end;

  TProdStructClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TProdStructClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TProdStructClassesRoot);
  public
    function Includes(anObject: TProdStructClassesRoot): Boolean;
    function IndexOf(anObject: TProdStructClassesRoot): Integer;
    procedure Add(NewObject: TProdStructClassesRoot);
    function AddNew: TProdStructClassesRoot;
    procedure Insert(index: Integer; NewObject: TProdStructClassesRoot);
    property BoldObjects[index: Integer]: TProdStructClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TPartOfPartsList = class(TProdStructClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPartOfParts;
    procedure SetBoldObject(index: Integer; NewObject: TPartOfParts);
  public
    function Includes(anObject: TPartOfParts): Boolean;
    function IndexOf(anObject: TPartOfParts): Integer;
    procedure Add(NewObject: TPartOfParts);
    function AddNew: TPartOfParts;
    procedure Insert(index: Integer; NewObject: TPartOfParts);
    property BoldObjects[index: Integer]: TPartOfParts read GetBoldObject write SetBoldObject; default;
  end;

  TProductList = class(TProdStructClassesRootList)
  protected
    function GetBoldObject(index: Integer): TProduct;
    procedure SetBoldObject(index: Integer; NewObject: TProduct);
  public
    function Includes(anObject: TProduct): Boolean;
    function IndexOf(anObject: TProduct): Integer;
    procedure Add(NewObject: TProduct);
    function AddNew: TProduct;
    procedure Insert(index: Integer; NewObject: TProduct);
    property BoldObjects[index: Integer]: TProduct read GetBoldObject write SetBoldObject; default;
  end;

  TAssemblyList = class(TProductList)
  protected
    function GetBoldObject(index: Integer): TAssembly;
    procedure SetBoldObject(index: Integer; NewObject: TAssembly);
  public
    function Includes(anObject: TAssembly): Boolean;
    function IndexOf(anObject: TAssembly): Integer;
    procedure Add(NewObject: TAssembly);
    function AddNew: TAssembly;
    procedure Insert(index: Integer; NewObject: TAssembly);
    property BoldObjects[index: Integer]: TAssembly read GetBoldObject write SetBoldObject; default;
  end;

  TSimple_ProductList = class(TProductList)
  protected
    function GetBoldObject(index: Integer): TSimple_Product;
    procedure SetBoldObject(index: Integer; NewObject: TSimple_Product);
  public
    function Includes(anObject: TSimple_Product): Boolean;
    function IndexOf(anObject: TSimple_Product): Integer;
    procedure Add(NewObject: TSimple_Product);
    function AddNew: TSimple_Product;
    procedure Insert(index: Integer; NewObject: TSimple_Product);
    property BoldObjects[index: Integer]: TSimple_Product read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 