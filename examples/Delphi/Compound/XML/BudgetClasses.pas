(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 17:10:39         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BudgetClasses;

{$DEFINE BudgetClasses_unitheader}
{$INCLUDE BudgetClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE BudgetClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBudgetClassesRoot }

procedure TBudgetClassesRootList.Add(NewObject: TBudgetClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBudgetClassesRootList.IndexOf(anObject: TBudgetClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBudgetClassesRootList.Includes(anObject: TBudgetClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBudgetClassesRootList.AddNew: TBudgetClassesRoot;
begin
  result := TBudgetClassesRoot(InternalAddNew);
end;

procedure TBudgetClassesRootList.Insert(index: Integer; NewObject: TBudgetClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBudgetClassesRootList.GetBoldObject(index: Integer): TBudgetClassesRoot;
begin
  result := TBudgetClassesRoot(GetElement(index));
end;

procedure TBudgetClassesRootList.SetBoldObject(index: Integer; NewObject: TBudgetClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TACell }

function TACell._Get_M_aName: TBAString;
begin
  assert(ValidateMember('TACell', 'aName', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TACell._GetaName: String;
begin
  Result := M_aName.AsString;
end;

procedure TACell._SetaName(NewValue: String);
begin
  M_aName.AsString := NewValue;
end;

function TACell._Get_M_aValue: TBAString;
begin
  assert(ValidateMember('TACell', 'aValue', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TACell._GetaValue: String;
begin
  Result := M_aValue.AsString;
end;

procedure TACell._SetaValue(NewValue: String);
begin
  M_aValue.AsString := NewValue;
end;

function TACell._Get_M_rownum: TBAInteger;
begin
  assert(ValidateMember('TACell', 'rownum', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TACell._Getrownum: Integer;
begin
  Result := M_rownum.AsInteger;
end;

function TACell._Get_M_colnum: TBAInteger;
begin
  assert(ValidateMember('TACell', 'colnum', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TACell._Getcolnum: Integer;
begin
  Result := M_colnum.AsInteger;
end;

function TACell._Get_M_Row: TBoldObjectReference;
begin
  assert(ValidateMember('TACell', 'Row', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TACell._GetRow: TRow;
begin
  assert(not assigned(M_Row.BoldObject) or (M_Row.BoldObject is TRow), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Row', M_Row.BoldObject.ClassName, 'TRow']));
  Result := TRow(M_Row.BoldObject);
end;

procedure TACell._SetRow(value: TRow);
begin
  M_Row.BoldObject := value;
end;

function TACell._Get_M_Col: TBoldObjectReference;
begin
  assert(ValidateMember('TACell', 'Col', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TACell._GetCol: TCol;
begin
  assert(not assigned(M_Col.BoldObject) or (M_Col.BoldObject is TCol), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Col', M_Col.BoldObject.ClassName, 'TCol']));
  Result := TCol(M_Col.BoldObject);
end;

procedure TACell._SetCol(value: TCol);
begin
  M_Col.BoldObject := value;
end;

function TACell._Get_M_Budget: TBoldObjectReference;
begin
  assert(ValidateMember('TACell', 'Budget', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TACell._GetBudget: TBudget;
begin
  assert(not assigned(M_Budget.BoldObject) or (M_Budget.BoldObject is TBudget), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Budget', M_Budget.BoldObject.ClassName, 'TBudget']));
  Result := TBudget(M_Budget.BoldObject);
end;

procedure TACell._SetBudget(value: TBudget);
begin
  M_Budget.BoldObject := value;
end;

procedure TACellList.Add(NewObject: TACell);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TACellList.IndexOf(anObject: TACell): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TACellList.Includes(anObject: TACell) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TACellList.AddNew: TACell;
begin
  result := TACell(InternalAddNew);
end;

procedure TACellList.Insert(index: Integer; NewObject: TACell);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TACellList.GetBoldObject(index: Integer): TACell;
begin
  result := TACell(GetElement(index));
end;

procedure TACellList.SetBoldObject(index: Integer; NewObject: TACell);
begin;
  SetElement(index, NewObject);
end;

{ TBudget }

function TBudget._Get_M_aName: TBAString;
begin
  assert(ValidateMember('TBudget', 'aName', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TBudget._GetaName: String;
begin
  Result := M_aName.AsString;
end;

procedure TBudget._SetaName(NewValue: String);
begin
  M_aName.AsString := NewValue;
end;

function TBudget._Get_M_aNumber: TBAInteger;
begin
  assert(ValidateMember('TBudget', 'aNumber', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TBudget._GetaNumber: Integer;
begin
  Result := M_aNumber.AsInteger;
end;

procedure TBudget._SetaNumber(NewValue: Integer);
begin
  M_aNumber.AsInteger := NewValue;
end;

function TBudget._GetACell: TACellList;
begin
  assert(ValidateMember('TBudget', 'ACell', 2, TACellList));
  Result := TACellList(BoldMembers[2]);
end;

function TBudget._Get_Q_ACell(colnum: Integer; rownum: Integer): TACell;
var
  TempResult: TBoldObject;
  TempList: TBoldMemberList;
  Q_colnum: TBAInteger;
  Q_rownum: TBAInteger;
begin
  TempList := TBoldMemberList.Create;
  TempList.CloneMembers := false;
  Q_colnum := TBAInteger.Create;
  Q_rownum := TBAInteger.Create;
  try
    Q_colnum.AsInteger := colnum;
    TempList.add(Q_colnum);
    Q_rownum.AsInteger := rownum;
    TempList.add(Q_rownum);
    TempResult := M_ACell.GetByIndex(TempList);
    assert(not assigned(TempResult) or (TempResult is TACell), 'Illegal object in multilink');
    result := TACell(TempResult);
  finally
    TempList.Free;
    Q_colnum.Free;
    Q_rownum.Free;
  end;
end;

function TBudget._GetRow: TRowList;
begin
  assert(ValidateMember('TBudget', 'Row', 3, TRowList));
  Result := TRowList(BoldMembers[3]);
end;

function TBudget._GetRowBudget: TRowBudgetList;
begin
  assert(ValidateMember('TBudget', 'RowBudget', 4, TRowBudgetList));
  Result := TRowBudgetList(BoldMembers[4]);
end;

function TBudget._GetCol: TColList;
begin
  assert(ValidateMember('TBudget', 'Col', 5, TColList));
  Result := TColList(BoldMembers[5]);
end;

function TBudget._GetColBudget: TColBudgetList;
begin
  assert(ValidateMember('TBudget', 'ColBudget', 6, TColBudgetList));
  Result := TColBudgetList(BoldMembers[6]);
end;

procedure TBudgetList.Add(NewObject: TBudget);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBudgetList.IndexOf(anObject: TBudget): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBudgetList.Includes(anObject: TBudget) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBudgetList.AddNew: TBudget;
begin
  result := TBudget(InternalAddNew);
end;

procedure TBudgetList.Insert(index: Integer; NewObject: TBudget);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBudgetList.GetBoldObject(index: Integer): TBudget;
begin
  result := TBudget(GetElement(index));
end;

procedure TBudgetList.SetBoldObject(index: Integer; NewObject: TBudget);
begin;
  SetElement(index, NewObject);
end;

{ TCol }

function TCol._Get_M_aNumber: TBAInteger;
begin
  assert(ValidateMember('TCol', 'aNumber', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TCol._GetaNumber: Integer;
begin
  Result := M_aNumber.AsInteger;
end;

procedure TCol._SetaNumber(NewValue: Integer);
begin
  M_aNumber.AsInteger := NewValue;
end;

function TCol._Get_M_aName: TBAString;
begin
  assert(ValidateMember('TCol', 'aName', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TCol._GetaName: String;
begin
  Result := M_aName.AsString;
end;

procedure TCol._SetaName(NewValue: String);
begin
  M_aName.AsString := NewValue;
end;

function TCol._GetBudget: TBudgetList;
begin
  assert(ValidateMember('TCol', 'Budget', 3, TBudgetList));
  Result := TBudgetList(BoldMembers[3]);
end;

function TCol._GetColBudget: TColBudgetList;
begin
  assert(ValidateMember('TCol', 'ColBudget', 4, TColBudgetList));
  Result := TColBudgetList(BoldMembers[4]);
end;

procedure TColList.Add(NewObject: TCol);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TColList.IndexOf(anObject: TCol): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TColList.Includes(anObject: TCol) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TColList.AddNew: TCol;
begin
  result := TCol(InternalAddNew);
end;

procedure TColList.Insert(index: Integer; NewObject: TCol);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TColList.GetBoldObject(index: Integer): TCol;
begin
  result := TCol(GetElement(index));
end;

procedure TColList.SetBoldObject(index: Integer; NewObject: TCol);
begin;
  SetElement(index, NewObject);
end;

{ TColBudget }

function TColBudget._Get_M_Budget: TBoldObjectReference;
begin
  assert(ValidateMember('TColBudget', 'Budget', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TColBudget._GetBudget: TBudget;
begin
  assert(not assigned(M_Budget.BoldObject) or (M_Budget.BoldObject is TBudget), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Budget', M_Budget.BoldObject.ClassName, 'TBudget']));
  Result := TBudget(M_Budget.BoldObject);
end;

function TColBudget._Get_M_Col: TBoldObjectReference;
begin
  assert(ValidateMember('TColBudget', 'Col', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TColBudget._GetCol: TCol;
begin
  assert(not assigned(M_Col.BoldObject) or (M_Col.BoldObject is TCol), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Col', M_Col.BoldObject.ClassName, 'TCol']));
  Result := TCol(M_Col.BoldObject);
end;

procedure TColBudgetList.Add(NewObject: TColBudget);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TColBudgetList.IndexOf(anObject: TColBudget): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TColBudgetList.Includes(anObject: TColBudget) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TColBudgetList.AddNew: TColBudget;
begin
  result := TColBudget(InternalAddNew);
end;

procedure TColBudgetList.Insert(index: Integer; NewObject: TColBudget);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TColBudgetList.GetBoldObject(index: Integer): TColBudget;
begin
  result := TColBudget(GetElement(index));
end;

procedure TColBudgetList.SetBoldObject(index: Integer; NewObject: TColBudget);
begin;
  SetElement(index, NewObject);
end;

{ TRow }

function TRow._Get_M_aNumber: TBAInteger;
begin
  assert(ValidateMember('TRow', 'aNumber', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TRow._GetaNumber: Integer;
begin
  Result := M_aNumber.AsInteger;
end;

procedure TRow._SetaNumber(NewValue: Integer);
begin
  M_aNumber.AsInteger := NewValue;
end;

function TRow._Get_M_aName: TBAString;
begin
  assert(ValidateMember('TRow', 'aName', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TRow._GetaName: String;
begin
  Result := M_aName.AsString;
end;

procedure TRow._SetaName(NewValue: String);
begin
  M_aName.AsString := NewValue;
end;

function TRow._GetBudget: TBudgetList;
begin
  assert(ValidateMember('TRow', 'Budget', 3, TBudgetList));
  Result := TBudgetList(BoldMembers[3]);
end;

function TRow._GetRowBudget: TRowBudgetList;
begin
  assert(ValidateMember('TRow', 'RowBudget', 4, TRowBudgetList));
  Result := TRowBudgetList(BoldMembers[4]);
end;

procedure TRowList.Add(NewObject: TRow);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRowList.IndexOf(anObject: TRow): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRowList.Includes(anObject: TRow) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRowList.AddNew: TRow;
begin
  result := TRow(InternalAddNew);
end;

procedure TRowList.Insert(index: Integer; NewObject: TRow);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRowList.GetBoldObject(index: Integer): TRow;
begin
  result := TRow(GetElement(index));
end;

procedure TRowList.SetBoldObject(index: Integer; NewObject: TRow);
begin;
  SetElement(index, NewObject);
end;

{ TRowBudget }

function TRowBudget._Get_M_Budget: TBoldObjectReference;
begin
  assert(ValidateMember('TRowBudget', 'Budget', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TRowBudget._GetBudget: TBudget;
begin
  assert(not assigned(M_Budget.BoldObject) or (M_Budget.BoldObject is TBudget), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Budget', M_Budget.BoldObject.ClassName, 'TBudget']));
  Result := TBudget(M_Budget.BoldObject);
end;

function TRowBudget._Get_M_Row: TBoldObjectReference;
begin
  assert(ValidateMember('TRowBudget', 'Row', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TRowBudget._GetRow: TRow;
begin
  assert(not assigned(M_Row.BoldObject) or (M_Row.BoldObject is TRow), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Row', M_Row.BoldObject.ClassName, 'TRow']));
  Result := TRow(M_Row.BoldObject);
end;

procedure TRowBudgetList.Add(NewObject: TRowBudget);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRowBudgetList.IndexOf(anObject: TRowBudget): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRowBudgetList.Includes(anObject: TRowBudget) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRowBudgetList.AddNew: TRowBudget;
begin
  result := TRowBudget(InternalAddNew);
end;

procedure TRowBudgetList.Insert(index: Integer; NewObject: TRowBudget);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRowBudgetList.GetBoldObject(index: Integer): TRowBudget;
begin
  result := TRowBudget(GetElement(index));
end;

procedure TRowBudgetList.SetBoldObject(index: Integer; NewObject: TRowBudget);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1298129460';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BudgetClassesRoot', TBudgetClassesRootList);
  BoldObjectListClasses.AddObjectEntry('ACell', TACellList);
  BoldObjectListClasses.AddObjectEntry('Budget', TBudgetList);
  BoldObjectListClasses.AddObjectEntry('Col', TColList);
  BoldObjectListClasses.AddObjectEntry('ColBudget', TColBudgetList);
  BoldObjectListClasses.AddObjectEntry('Row', TRowList);
  BoldObjectListClasses.AddObjectEntry('RowBudget', TRowBudgetList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BudgetClassesRoot', TBudgetClassesRoot);
  BoldObjectClasses.AddObjectEntry('ACell', TACell);
  BoldObjectClasses.AddObjectEntry('Budget', TBudget);
  BoldObjectClasses.AddObjectEntry('Col', TCol);
  BoldObjectClasses.AddObjectEntry('ColBudget', TColBudget);
  BoldObjectClasses.AddObjectEntry('Row', TRow);
  BoldObjectClasses.AddObjectEntry('RowBudget', TRowBudget);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BudgetClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 