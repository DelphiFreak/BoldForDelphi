(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 17:10:40         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BudgetClasses_Interface.inc}
{$DEFINE BudgetClasses_Interface.inc}

{$IFNDEF BudgetClasses_unitheader}
unit BudgetClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBudgetClassesRoot = class;
  TBudgetClassesRootList = class;
  TACell = class;
  TACellList = class;
  TBudget = class;
  TBudgetList = class;
  TCol = class;
  TColList = class;
  TColBudget = class;
  TColBudgetList = class;
  TRow = class;
  TRowList = class;
  TRowBudget = class;
  TRowBudgetList = class;

  TBudgetClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TACell = class(TBudgetClassesRoot)
  private
    function _Get_M_aName: TBAString;
    function _GetaName: String;
    procedure _SetaName(NewValue: String);
    function _Get_M_aValue: TBAString;
    function _GetaValue: String;
    procedure _SetaValue(NewValue: String);
    function _Get_M_rownum: TBAInteger;
    function _Getrownum: Integer;
    function _Get_M_colnum: TBAInteger;
    function _Getcolnum: Integer;
    function _GetRow: TRow;
    function _Get_M_Row: TBoldObjectReference;
    procedure _SetRow(value: TRow);
    function _GetCol: TCol;
    function _Get_M_Col: TBoldObjectReference;
    procedure _SetCol(value: TCol);
    function _GetBudget: TBudget;
    function _Get_M_Budget: TBoldObjectReference;
    procedure _SetBudget(value: TBudget);
  protected
  public
    procedure CompleteCreate; override;
    function CompareToAs(CompareType: TBoldCompareType; BoldDirectElement: TBoldElement): Integer; override;
    property M_aName: TBAString read _Get_M_aName;
    property M_aValue: TBAString read _Get_M_aValue;
    property M_rownum: TBAInteger read _Get_M_rownum;
    property M_colnum: TBAInteger read _Get_M_colnum;
    property M_Row: TBoldObjectReference read _Get_M_Row;
    property M_Col: TBoldObjectReference read _Get_M_Col;
    property M_Budget: TBoldObjectReference read _Get_M_Budget;
    property aName: String read _GetaName write _SetaName;
    property aValue: String read _GetaValue write _SetaValue;
    property rownum: Integer read _Getrownum;
    property colnum: Integer read _Getcolnum;
    property Row: TRow read _GetRow write _SetRow;
    property Col: TCol read _GetCol write _SetCol;
    property Budget: TBudget read _GetBudget write _SetBudget;
  end;

  TBudget = class(TBudgetClassesRoot)
  private
    function _Get_M_aName: TBAString;
    function _GetaName: String;
    procedure _SetaName(NewValue: String);
    function _Get_M_aNumber: TBAInteger;
    function _GetaNumber: Integer;
    procedure _SetaNumber(NewValue: Integer);
    function _GetACell: TACellList;
    function _Get_Q_ACell(colnum: Integer; rownum: Integer): TACell;
    function _GetRow: TRowList;
    function _GetRowBudget: TRowBudgetList;
    function _GetCol: TColList;
    function _GetColBudget: TColBudgetList;
  protected
  public
    procedure CompleteCreate; override;
    property M_aName: TBAString read _Get_M_aName;
    property M_aNumber: TBAInteger read _Get_M_aNumber;
    property M_ACell: TACellList read _GetACell;
    property M_Row: TRowList read _GetRow;
    property M_RowBudget: TRowBudgetList read _GetRowBudget;
    property M_Col: TColList read _GetCol;
    property M_ColBudget: TColBudgetList read _GetColBudget;
    property aName: String read _GetaName write _SetaName;
    property aNumber: Integer read _GetaNumber write _SetaNumber;
    property ACell[colnum: Integer; rownum: Integer]: TACell read _Get_Q_ACell;
    property Row: TRowList read _GetRow;
    property RowBudget: TRowBudgetList read _GetRowBudget;
    property Col: TColList read _GetCol;
    property ColBudget: TColBudgetList read _GetColBudget;
  end;

  TCol = class(TBudgetClassesRoot)
  private
    function _Get_M_aNumber: TBAInteger;
    function _GetaNumber: Integer;
    procedure _SetaNumber(NewValue: Integer);
    function _Get_M_aName: TBAString;
    function _GetaName: String;
    procedure _SetaName(NewValue: String);
    function _GetBudget: TBudgetList;
    function _GetColBudget: TColBudgetList;
  protected
  public
    procedure CompleteCreate; override;
    function CompareToAs(CompareType: TBoldCompareType; BoldDirectElement: TBoldElement): Integer; override;
    property M_aNumber: TBAInteger read _Get_M_aNumber;
    property M_aName: TBAString read _Get_M_aName;
    property M_Budget: TBudgetList read _GetBudget;
    property M_ColBudget: TColBudgetList read _GetColBudget;
    property aNumber: Integer read _GetaNumber write _SetaNumber;
    property aName: String read _GetaName write _SetaName;
    property Budget: TBudgetList read _GetBudget;
    property ColBudget: TColBudgetList read _GetColBudget;
  end;

  TColBudget = class(TBudgetClassesRoot)
  private
    function _GetBudget: TBudget;
    function _Get_M_Budget: TBoldObjectReference;
    function _GetCol: TCol;
    function _Get_M_Col: TBoldObjectReference;
  protected
  public
    property M_Budget: TBoldObjectReference read _Get_M_Budget;
    property M_Col: TBoldObjectReference read _Get_M_Col;
    property Budget: TBudget read _GetBudget;
    property Col: TCol read _GetCol;
  end;

  TRow = class(TBudgetClassesRoot)
  private
    function _Get_M_aNumber: TBAInteger;
    function _GetaNumber: Integer;
    procedure _SetaNumber(NewValue: Integer);
    function _Get_M_aName: TBAString;
    function _GetaName: String;
    procedure _SetaName(NewValue: String);
    function _GetBudget: TBudgetList;
    function _GetRowBudget: TRowBudgetList;
  protected
  public
    procedure CompleteCreate; override;
    function CompareToAs(CompareType: TBoldCompareType; BoldDirectElement: TBoldElement): Integer; override;
    property M_aNumber: TBAInteger read _Get_M_aNumber;
    property M_aName: TBAString read _Get_M_aName;
    property M_Budget: TBudgetList read _GetBudget;
    property M_RowBudget: TRowBudgetList read _GetRowBudget;
    property aNumber: Integer read _GetaNumber write _SetaNumber;
    property aName: String read _GetaName write _SetaName;
    property Budget: TBudgetList read _GetBudget;
    property RowBudget: TRowBudgetList read _GetRowBudget;
  end;

  TRowBudget = class(TBudgetClassesRoot)
  private
    function _GetBudget: TBudget;
    function _Get_M_Budget: TBoldObjectReference;
    function _GetRow: TRow;
    function _Get_M_Row: TBoldObjectReference;
  protected
  public
    property M_Budget: TBoldObjectReference read _Get_M_Budget;
    property M_Row: TBoldObjectReference read _Get_M_Row;
    property Budget: TBudget read _GetBudget;
    property Row: TRow read _GetRow;
  end;

  TBudgetClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBudgetClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBudgetClassesRoot);
  public
    function Includes(anObject: TBudgetClassesRoot): Boolean;
    function IndexOf(anObject: TBudgetClassesRoot): Integer;
    procedure Add(NewObject: TBudgetClassesRoot);
    function AddNew: TBudgetClassesRoot;
    procedure Insert(index: Integer; NewObject: TBudgetClassesRoot);
    property BoldObjects[index: Integer]: TBudgetClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TACellList = class(TBudgetClassesRootList)
  protected
    function GetBoldObject(index: Integer): TACell;
    procedure SetBoldObject(index: Integer; NewObject: TACell);
  public
    function Includes(anObject: TACell): Boolean;
    function IndexOf(anObject: TACell): Integer;
    procedure Add(NewObject: TACell);
    function AddNew: TACell;
    procedure Insert(index: Integer; NewObject: TACell);
    property BoldObjects[index: Integer]: TACell read GetBoldObject write SetBoldObject; default;
  end;

  TBudgetList = class(TBudgetClassesRootList)
  protected
    function GetBoldObject(index: Integer): TBudget;
    procedure SetBoldObject(index: Integer; NewObject: TBudget);
  public
    function Includes(anObject: TBudget): Boolean;
    function IndexOf(anObject: TBudget): Integer;
    procedure Add(NewObject: TBudget);
    function AddNew: TBudget;
    procedure Insert(index: Integer; NewObject: TBudget);
    property BoldObjects[index: Integer]: TBudget read GetBoldObject write SetBoldObject; default;
  end;

  TColList = class(TBudgetClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCol;
    procedure SetBoldObject(index: Integer; NewObject: TCol);
  public
    function Includes(anObject: TCol): Boolean;
    function IndexOf(anObject: TCol): Integer;
    procedure Add(NewObject: TCol);
    function AddNew: TCol;
    procedure Insert(index: Integer; NewObject: TCol);
    property BoldObjects[index: Integer]: TCol read GetBoldObject write SetBoldObject; default;
  end;

  TColBudgetList = class(TBudgetClassesRootList)
  protected
    function GetBoldObject(index: Integer): TColBudget;
    procedure SetBoldObject(index: Integer; NewObject: TColBudget);
  public
    function Includes(anObject: TColBudget): Boolean;
    function IndexOf(anObject: TColBudget): Integer;
    procedure Add(NewObject: TColBudget);
    function AddNew: TColBudget;
    procedure Insert(index: Integer; NewObject: TColBudget);
    property BoldObjects[index: Integer]: TColBudget read GetBoldObject write SetBoldObject; default;
  end;

  TRowList = class(TBudgetClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRow;
    procedure SetBoldObject(index: Integer; NewObject: TRow);
  public
    function Includes(anObject: TRow): Boolean;
    function IndexOf(anObject: TRow): Integer;
    procedure Add(NewObject: TRow);
    function AddNew: TRow;
    procedure Insert(index: Integer; NewObject: TRow);
    property BoldObjects[index: Integer]: TRow read GetBoldObject write SetBoldObject; default;
  end;

  TRowBudgetList = class(TBudgetClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRowBudget;
    procedure SetBoldObject(index: Integer; NewObject: TRowBudget);
  public
    function Includes(anObject: TRowBudget): Boolean;
    function IndexOf(anObject: TRowBudget): Integer;
    procedure Add(NewObject: TRowBudget);
    function AddNew: TRowBudget;
    procedure Insert(index: Integer; NewObject: TRowBudget);
    property BoldObjects[index: Integer]: TRowBudget read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 