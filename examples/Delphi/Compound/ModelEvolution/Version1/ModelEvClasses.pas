(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 17:04:44         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit ModelEvClasses;

{$DEFINE ModelEvClasses_unitheader}
{$INCLUDE ModelEvClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TOrder }

function TOrder._Get_M_orderDate: TBADate;
begin
  assert(ValidateMember('TOrder', 'orderDate', 0, TBADate));
  Result := TBADate(BoldMembers[0]);
end;

function TOrder._GetorderDate: TDate;
begin
  Result := M_orderDate.AsDate;
end;

procedure TOrder._SetorderDate(NewValue: TDate);
begin
  M_orderDate.AsDate := NewValue;
end;

function TOrder._Get_M_totalCost: TBACurrency;
begin
  assert(ValidateMember('TOrder', 'totalCost', 1, TBACurrency));
  Result := TBACurrency(BoldMembers[1]);
end;

function TOrder._GettotalCost: Currency;
begin
  Result := M_totalCost.AsCurrency;
end;

function TOrder._Get_M_discount: TBAInteger;
begin
  assert(ValidateMember('TOrder', 'discount', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TOrder._Getdiscount: Integer;
begin
  Result := M_discount.AsInteger;
end;

procedure TOrder._Setdiscount(NewValue: Integer);
begin
  M_discount.AsInteger := NewValue;
end;

function TOrder._Get_M_Person: TBoldObjectReference;
begin
  assert(ValidateMember('TOrder', 'Person', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TOrder._GetPerson: TPerson;
begin
  assert(not assigned(M_Person.BoldObject) or (M_Person.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Person', M_Person.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_Person.BoldObject);
end;

procedure TOrder._SetPerson(value: TPerson);
begin
  M_Person.BoldObject := value;
end;

function TOrder._GetOrderItem: TOrderItemList;
begin
  assert(ValidateMember('TOrder', 'OrderItem', 4, TOrderItemList));
  Result := TOrderItemList(BoldMembers[4]);
end;

procedure TOrderList.Add(NewObject: TOrder);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrderList.IndexOf(anObject: TOrder): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrderList.Includes(anObject: TOrder) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrderList.AddNew: TOrder;
begin
  result := TOrder(InternalAddNew);
end;

procedure TOrderList.Insert(index: Integer; NewObject: TOrder);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrderList.GetBoldObject(index: Integer): TOrder;
begin
  result := TOrder(GetElement(index));
end;

procedure TOrderList.SetBoldObject(index: Integer; NewObject: TOrder);
begin;
  SetElement(index, NewObject);
end;

{ TOrderItem }

function TOrderItem._Get_M_qty: TBAInteger;
begin
  assert(ValidateMember('TOrderItem', 'qty', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TOrderItem._Getqty: Integer;
begin
  Result := M_qty.AsInteger;
end;

procedure TOrderItem._Setqty(NewValue: Integer);
begin
  M_qty.AsInteger := NewValue;
end;

function TOrderItem._Get_M_Order: TBoldObjectReference;
begin
  assert(ValidateMember('TOrderItem', 'Order', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TOrderItem._GetOrder: TOrder;
begin
  assert(not assigned(M_Order.BoldObject) or (M_Order.BoldObject is TOrder), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Order', M_Order.BoldObject.ClassName, 'TOrder']));
  Result := TOrder(M_Order.BoldObject);
end;

procedure TOrderItem._SetOrder(value: TOrder);
begin
  M_Order.BoldObject := value;
end;

function TOrderItem._Get_M_Product: TBoldObjectReference;
begin
  assert(ValidateMember('TOrderItem', 'Product', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TOrderItem._GetProduct: TProduct;
begin
  assert(not assigned(M_Product.BoldObject) or (M_Product.BoldObject is TProduct), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Product', M_Product.BoldObject.ClassName, 'TProduct']));
  Result := TProduct(M_Product.BoldObject);
end;

procedure TOrderItem._SetProduct(value: TProduct);
begin
  M_Product.BoldObject := value;
end;

procedure TOrderItemList.Add(NewObject: TOrderItem);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrderItemList.IndexOf(anObject: TOrderItem): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrderItemList.Includes(anObject: TOrderItem) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrderItemList.AddNew: TOrderItem;
begin
  result := TOrderItem(InternalAddNew);
end;

procedure TOrderItemList.Insert(index: Integer; NewObject: TOrderItem);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrderItemList.GetBoldObject(index: Integer): TOrderItem;
begin
  result := TOrderItem(GetElement(index));
end;

procedure TOrderItemList.SetBoldObject(index: Integer; NewObject: TOrderItem);
begin;
  SetElement(index, NewObject);
end;

{ TPerson }

function TPerson._Get_M_fullName: TBAString;
begin
  assert(ValidateMember('TPerson', 'fullName', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPerson._GetfullName: String;
begin
  Result := M_fullName.AsString;
end;

procedure TPerson._SetfullName(NewValue: String);
begin
  M_fullName.AsString := NewValue;
end;

function TPerson._GetOrder: TOrderList;
begin
  assert(ValidateMember('TPerson', 'Order', 1, TOrderList));
  Result := TOrderList(BoldMembers[1]);
end;

procedure TPersonList.Add(NewObject: TPerson);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonList.IndexOf(anObject: TPerson): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonList.Includes(anObject: TPerson) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonList.AddNew: TPerson;
begin
  result := TPerson(InternalAddNew);
end;

procedure TPersonList.Insert(index: Integer; NewObject: TPerson);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonList.GetBoldObject(index: Integer): TPerson;
begin
  result := TPerson(GetElement(index));
end;

procedure TPersonList.SetBoldObject(index: Integer; NewObject: TPerson);
begin;
  SetElement(index, NewObject);
end;

{ TProduct }

function TProduct._Get_M_cost: TBACurrency;
begin
  assert(ValidateMember('TProduct', 'cost', 0, TBACurrency));
  Result := TBACurrency(BoldMembers[0]);
end;

function TProduct._Getcost: Currency;
begin
  Result := M_cost.AsCurrency;
end;

procedure TProduct._Setcost(NewValue: Currency);
begin
  M_cost.AsCurrency := NewValue;
end;

function TProduct._Get_M_description: TBAString;
begin
  assert(ValidateMember('TProduct', 'description', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TProduct._Getdescription: String;
begin
  Result := M_description.AsString;
end;

procedure TProduct._Setdescription(NewValue: String);
begin
  M_description.AsString := NewValue;
end;

function TProduct._GetOrderItem: TOrderItemList;
begin
  assert(ValidateMember('TProduct', 'OrderItem', 2, TOrderItemList));
  Result := TOrderItemList(BoldMembers[2]);
end;

procedure TProductList.Add(NewObject: TProduct);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProductList.IndexOf(anObject: TProduct): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProductList.Includes(anObject: TProduct) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProductList.AddNew: TProduct;
begin
  result := TProduct(InternalAddNew);
end;

procedure TProductList.Insert(index: Integer; NewObject: TProduct);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProductList.GetBoldObject(index: Integer): TProduct;
begin
  result := TProduct(GetElement(index));
end;

procedure TProductList.SetBoldObject(index: Integer; NewObject: TProduct);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '413646589';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Order', TOrderList);
  BoldObjectListClasses.AddObjectEntry('OrderItem', TOrderItemList);
  BoldObjectListClasses.AddObjectEntry('Person', TPersonList);
  BoldObjectListClasses.AddObjectEntry('Product', TProductList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Order', TOrder);
  BoldObjectClasses.AddObjectEntry('OrderItem', TOrderItem);
  BoldObjectClasses.AddObjectEntry('Person', TPerson);
  BoldObjectClasses.AddObjectEntry('Product', TProduct);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('ModelEvDemo', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 