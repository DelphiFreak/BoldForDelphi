(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 17:05:53         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ModelEvClasses_Interface.inc}
{$DEFINE ModelEvClasses_Interface.inc}

{$IFNDEF ModelEvClasses_unitheader}
unit ModelEvClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TDiscount = class;
  TDiscountList = class;
  TOrder = class;
  TOrderList = class;
  TOrderItem = class;
  TOrderItemList = class;
  TPerson = class;
  TPersonList = class;
  TProduct = class;
  TProductList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TDiscount = class(TBusinessClassesRoot)
  private
    function _Get_M_percent: TBAInteger;
    function _Getpercent: Integer;
    procedure _Setpercent(NewValue: Integer);
    function _GetOrder: TOrderList;
  protected
  public
    procedure ReceiveEventFromOwned(Originator: TObject; OriginalEvent: TBoldEvent); override;
    property M_percent: TBAInteger read _Get_M_percent;
    property M_Order: TOrderList read _GetOrder;
    property percent: Integer read _Getpercent write _Setpercent;
    property Order: TOrderList read _GetOrder;
  end;

  TOrder = class(TBusinessClassesRoot)
  private
    function _Get_M_orderDate: TBADate;
    function _GetorderDate: TDate;
    procedure _SetorderDate(NewValue: TDate);
    function _Get_M_totalCost: TBACurrency;
    function _GettotalCost: Currency;
    function _Get_M_discount: TBAInteger;
    function _Getdiscount: Integer;
    procedure _Setdiscount(NewValue: Integer);
    function _GetPerson: TPerson;
    function _Get_M_Person: TBoldObjectReference;
    procedure _SetPerson(value: TPerson);
    function _GetOrderItem: TOrderItemList;
    function _GettheDiscount: TDiscount;
    function _Get_M_theDiscount: TBoldObjectReference;
    procedure _SettheDiscount(value: TDiscount);
    property M_discount: TBAInteger read _Get_M_discount;
    property discount: Integer read _Getdiscount write _Setdiscount;
  protected
  public
    procedure Upgrade; 
    property M_orderDate: TBADate read _Get_M_orderDate;
    property M_totalCost: TBACurrency read _Get_M_totalCost;
    property M_Person: TBoldObjectReference read _Get_M_Person;
    property M_OrderItem: TOrderItemList read _GetOrderItem;
    property M_theDiscount: TBoldObjectReference read _Get_M_theDiscount;
    property orderDate: TDate read _GetorderDate write _SetorderDate;
    property totalCost: Currency read _GettotalCost;
    property Person: TPerson read _GetPerson write _SetPerson;
    property OrderItem: TOrderItemList read _GetOrderItem;
    property theDiscount: TDiscount read _GettheDiscount write _SettheDiscount;
  end;

  TOrderItem = class(TBusinessClassesRoot)
  private
    function _Get_M_qty: TBAInteger;
    function _Getqty: Integer;
    procedure _Setqty(NewValue: Integer);
    function _GetOrder: TOrder;
    function _Get_M_Order: TBoldObjectReference;
    procedure _SetOrder(value: TOrder);
    function _GetProduct: TProduct;
    function _Get_M_Product: TBoldObjectReference;
    procedure _SetProduct(value: TProduct);
  protected
  public
    property M_qty: TBAInteger read _Get_M_qty;
    property M_Order: TBoldObjectReference read _Get_M_Order;
    property M_Product: TBoldObjectReference read _Get_M_Product;
    property qty: Integer read _Getqty write _Setqty;
    property Order: TOrder read _GetOrder write _SetOrder;
    property Product: TProduct read _GetProduct write _SetProduct;
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_fullName: TBAString;
    function _GetfullName: String;
    procedure _SetfullName(NewValue: String);
    function _Get_M_firstname: TBAString;
    function _Getfirstname: String;
    procedure _Setfirstname(NewValue: String);
    function _Get_M_lastName: TBAString;
    function _GetlastName: String;
    procedure _SetlastName(NewValue: String);
    function _GetOrder: TOrderList;
    property M_fullName: TBAString read _Get_M_fullName;
    property fullName: String read _GetfullName write _SetfullName;
  protected
    procedure PrepareUpdate; override;
  public
    procedure Upgrade; 
    property M_firstname: TBAString read _Get_M_firstname;
    property M_lastName: TBAString read _Get_M_lastName;
    property M_Order: TOrderList read _GetOrder;
    property firstname: String read _Getfirstname write _Setfirstname;
    property lastName: String read _GetlastName write _SetlastName;
    property Order: TOrderList read _GetOrder;
  end;

  TProduct = class(TBusinessClassesRoot)
  private
    function _Get_M_cost: TBACurrency;
    function _Getcost: Currency;
    procedure _Setcost(NewValue: Currency);
    function _Get_M_CostEuro: TBACurrency;
    function _GetCostEuro: Currency;
    procedure _SetCostEuro(NewValue: Currency);
    function _Get_M_description: TBAString;
    function _Getdescription: String;
    procedure _Setdescription(NewValue: String);
    function _GetOrderItem: TOrderItemList;
    property M_cost: TBACurrency read _Get_M_cost;
    property cost: Currency read _Getcost write _Setcost;
  protected
    procedure PrepareUpdate; override;
  public
    procedure Upgrade; 
    property M_CostEuro: TBACurrency read _Get_M_CostEuro;
    property M_description: TBAString read _Get_M_description;
    property M_OrderItem: TOrderItemList read _GetOrderItem;
    property CostEuro: Currency read _GetCostEuro write _SetCostEuro;
    property description: String read _Getdescription write _Setdescription;
    property OrderItem: TOrderItemList read _GetOrderItem;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TDiscountList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDiscount;
    procedure SetBoldObject(index: Integer; NewObject: TDiscount);
  public
    function Includes(anObject: TDiscount): Boolean;
    function IndexOf(anObject: TDiscount): Integer;
    procedure Add(NewObject: TDiscount);
    function AddNew: TDiscount;
    procedure Insert(index: Integer; NewObject: TDiscount);
    property BoldObjects[index: Integer]: TDiscount read GetBoldObject write SetBoldObject; default;
  end;

  TOrderList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOrder;
    procedure SetBoldObject(index: Integer; NewObject: TOrder);
  public
    function Includes(anObject: TOrder): Boolean;
    function IndexOf(anObject: TOrder): Integer;
    procedure Add(NewObject: TOrder);
    function AddNew: TOrder;
    procedure Insert(index: Integer; NewObject: TOrder);
    property BoldObjects[index: Integer]: TOrder read GetBoldObject write SetBoldObject; default;
  end;

  TOrderItemList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOrderItem;
    procedure SetBoldObject(index: Integer; NewObject: TOrderItem);
  public
    function Includes(anObject: TOrderItem): Boolean;
    function IndexOf(anObject: TOrderItem): Integer;
    procedure Add(NewObject: TOrderItem);
    function AddNew: TOrderItem;
    procedure Insert(index: Integer; NewObject: TOrderItem);
    property BoldObjects[index: Integer]: TOrderItem read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

  TProductList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TProduct;
    procedure SetBoldObject(index: Integer; NewObject: TProduct);
  public
    function Includes(anObject: TProduct): Boolean;
    function IndexOf(anObject: TProduct): Integer;
    procedure Add(NewObject: TProduct);
    function AddNew: TProduct;
    procedure Insert(index: Integer; NewObject: TProduct);
    property BoldObjects[index: Integer]: TProduct read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 