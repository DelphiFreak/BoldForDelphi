(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-14 01:40:46         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TbribesisBribedBy = class;
  TbribesisBribedByList = class;
  TContact = class;
  TContactList = class;
  TCustomer = class;
  TCustomerList = class;
  TEmployee = class;
  TEmployeeList = class;
  TItem = class;
  TItemList = class;
  TOrder = class;
  TOrderList = class;
  TPart = class;
  TPartList = class;
  TVendor = class;
  TVendorList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TbribesisBribedBy = class(TBusinessClassesRoot)
  private
    function _GetisBribedBy: TVendor;
    function _Get_M_isBribedBy: TBoldObjectReference;
    function _Getbribes: TEmployee;
    function _Get_M_bribes: TBoldObjectReference;
  protected
  public
    property M_isBribedBy: TBoldObjectReference read _Get_M_isBribedBy;
    property M_bribes: TBoldObjectReference read _Get_M_bribes;
    property isBribedBy: TVendor read _GetisBribedBy;
    property bribes: TEmployee read _Getbribes;
  end;

  TContact = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _GetCustomer: TCustomer;
    function _Get_M_Customer: TBoldObjectReference;
    procedure _SetCustomer(value: TCustomer);
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_Customer: TBoldObjectReference read _Get_M_Customer;
    property Name: String read _GetName write _SetName;
    property Customer: TCustomer read _GetCustomer write _SetCustomer;
  end;

  TCustomer = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _Get_M_CustomerID: TBAInteger;
    function _GetCustomerID: Integer;
    procedure _SetCustomerID(NewValue: Integer);
    function _Get_M_IsMarried: TBABoolean;
    function _GetIsMarried: Boolean;
    procedure _SetIsMarried(NewValue: Boolean);
    function _GetContacts: TContactList;
    function _Getorders: TOrderList;
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_CustomerID: TBAInteger read _Get_M_CustomerID;
    property M_IsMarried: TBABoolean read _Get_M_IsMarried;
    property M_Contacts: TContactList read _GetContacts;
    property M_orders: TOrderList read _Getorders;
    property Name: String read _GetName write _SetName;
    property CustomerID: Integer read _GetCustomerID write _SetCustomerID;
    property IsMarried: Boolean read _GetIsMarried write _SetIsMarried;
    property Contacts: TContactList read _GetContacts;
    property orders: TOrderList read _Getorders;
  end;

  TEmployee = class(TBusinessClassesRoot)
  private
    function _Get_M_EmployeeNo: TBAInteger;
    function _GetEmployeeNo: Integer;
    procedure _SetEmployeeNo(NewValue: Integer);
    function _Get_M_LastName: TBAString;
    function _GetLastName: String;
    procedure _SetLastName(NewValue: String);
    function _Get_M_FirstName: TBAString;
    function _GetFirstName: String;
    procedure _SetFirstName(NewValue: String);
    function _Getorders: TOrderList;
    function _GetisBribedBy: TVendorList;
    function _GetbribesisBribedBy: TbribesisBribedByList;
  protected
  public
    property M_EmployeeNo: TBAInteger read _Get_M_EmployeeNo;
    property M_LastName: TBAString read _Get_M_LastName;
    property M_FirstName: TBAString read _Get_M_FirstName;
    property M_orders: TOrderList read _Getorders;
    property M_isBribedBy: TVendorList read _GetisBribedBy;
    property M_bribesisBribedBy: TbribesisBribedByList read _GetbribesisBribedBy;
    property EmployeeNo: Integer read _GetEmployeeNo write _SetEmployeeNo;
    property LastName: String read _GetLastName write _SetLastName;
    property FirstName: String read _GetFirstName write _SetFirstName;
    property orders: TOrderList read _Getorders;
    property isBribedBy: TVendorList read _GetisBribedBy;
    property bribesisBribedBy: TbribesisBribedByList read _GetbribesisBribedBy;
  end;

  TItem = class(TBusinessClassesRoot)
  private
    function _Get_M_Qty: TBAInteger;
    function _GetQty: Integer;
    procedure _SetQty(NewValue: Integer);
    function _Get_M_Discount: TBAInteger;
    function _GetDiscount: Integer;
    procedure _SetDiscount(NewValue: Integer);
    function _Get_M_OrderNo: TBAInteger;
    function _GetOrderNo: Integer;
    procedure _SetOrderNo(NewValue: Integer);
    function _Get_M_ItemNo: TBAInteger;
    function _GetItemNo: Integer;
    procedure _SetItemNo(NewValue: Integer);
    function _Get_M_totalCost: TBACurrency;
    function _GettotalCost: Currency;
    function _GetOrder: TOrder;
    function _Get_M_Order: TBoldObjectReference;
    procedure _SetOrder(value: TOrder);
    function _GetPart: TPart;
    function _Get_M_Part: TBoldObjectReference;
    procedure _SetPart(value: TPart);
  protected
  public
    procedure PrepareUpdate; override;
    function MayUpdate: Boolean; override;
    property M_Qty: TBAInteger read _Get_M_Qty;
    property M_Discount: TBAInteger read _Get_M_Discount;
    property M_OrderNo: TBAInteger read _Get_M_OrderNo;
    property M_ItemNo: TBAInteger read _Get_M_ItemNo;
    property M_totalCost: TBACurrency read _Get_M_totalCost;
    property M_Order: TBoldObjectReference read _Get_M_Order;
    property M_Part: TBoldObjectReference read _Get_M_Part;
    property Qty: Integer read _GetQty write _SetQty;
    property Discount: Integer read _GetDiscount write _SetDiscount;
    property OrderNo: Integer read _GetOrderNo write _SetOrderNo;
    property ItemNo: Integer read _GetItemNo write _SetItemNo;
    property totalCost: Currency read _GettotalCost;
    property Order: TOrder read _GetOrder write _SetOrder;
    property Part: TPart read _GetPart write _SetPart;
  end;

  TOrder = class(TBusinessClassesRoot)
  private
    function _Get_M_OrderNo: TBAInteger;
    function _GetOrderNo: Integer;
    procedure _SetOrderNo(NewValue: Integer);
    function _Get_M_ShipDate: TBADate;
    function _GetShipDate: TDate;
    procedure _SetShipDate(NewValue: TDate);
    function _Get_M_SaleDate: TBADate;
    function _GetSaleDate: TDate;
    procedure _SetSaleDate(NewValue: TDate);
    function _Get_M_AmountPaid: TBACurrency;
    function _GetAmountPaid: Currency;
    procedure _SetAmountPaid(NewValue: Currency);
    function _Get_M_totalCost: TBACurrency;
    function _GettotalCost: Currency;
    function _GetCustomer: TCustomer;
    function _Get_M_Customer: TBoldObjectReference;
    procedure _SetCustomer(value: TCustomer);
    function _Getitems: TItemList;
    function _Getresponsible: TEmployee;
    function _Get_M_responsible: TBoldObjectReference;
    procedure _Setresponsible(value: TEmployee);
    function _Getparts: TPartList;
  protected
  public
    function MayUpdate: Boolean; override;
    property M_OrderNo: TBAInteger read _Get_M_OrderNo;
    property M_ShipDate: TBADate read _Get_M_ShipDate;
    property M_SaleDate: TBADate read _Get_M_SaleDate;
    property M_AmountPaid: TBACurrency read _Get_M_AmountPaid;
    property M_totalCost: TBACurrency read _Get_M_totalCost;
    property M_Customer: TBoldObjectReference read _Get_M_Customer;
    property M_items: TItemList read _Getitems;
    property M_responsible: TBoldObjectReference read _Get_M_responsible;
    property M_parts: TPartList read _Getparts;
    property OrderNo: Integer read _GetOrderNo write _SetOrderNo;
    property ShipDate: TDate read _GetShipDate write _SetShipDate;
    property SaleDate: TDate read _GetSaleDate write _SetSaleDate;
    property AmountPaid: Currency read _GetAmountPaid write _SetAmountPaid;
    property totalCost: Currency read _GettotalCost;
    property Customer: TCustomer read _GetCustomer write _SetCustomer;
    property items: TItemList read _Getitems;
    property responsible: TEmployee read _Getresponsible write _Setresponsible;
    property parts: TPartList read _Getparts;
  end;

  TPart = class(TBusinessClassesRoot)
  private
    function _Get_M_PartNo: TBAInteger;
    function _GetPartNo: Integer;
    procedure _SetPartNo(NewValue: Integer);
    function _Get_M_Description: TBAString;
    function _GetDescription: String;
    procedure _SetDescription(NewValue: String);
    function _Get_M_Cost: TBACurrency;
    function _GetCost: Currency;
    procedure _SetCost(NewValue: Currency);
    function _Get_M_ListPrice: TBACurrency;
    function _GetListPrice: Currency;
    procedure _SetListPrice(NewValue: Currency);
    function _GetVendor: TVendor;
    function _Get_M_Vendor: TBoldObjectReference;
    procedure _SetVendor(value: TVendor);
    function _Getitems: TItemList;
  protected
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    function MayUpdate: Boolean; override;
    property M_PartNo: TBAInteger read _Get_M_PartNo;
    property M_Description: TBAString read _Get_M_Description;
    property M_Cost: TBACurrency read _Get_M_Cost;
    property M_ListPrice: TBACurrency read _Get_M_ListPrice;
    property M_Vendor: TBoldObjectReference read _Get_M_Vendor;
    property M_items: TItemList read _Getitems;
    property PartNo: Integer read _GetPartNo write _SetPartNo;
    property Description: String read _GetDescription write _SetDescription;
    property Cost: Currency read _GetCost write _SetCost;
    property ListPrice: Currency read _GetListPrice write _SetListPrice;
    property Vendor: TVendor read _GetVendor write _SetVendor;
    property items: TItemList read _Getitems;
  end;

  TVendor = class(TBusinessClassesRoot)
  private
    function _Get_M_VendorNo: TBAInteger;
    function _GetVendorNo: Integer;
    procedure _SetVendorNo(NewValue: Integer);
    function _Get_M_VendorName: TBAString;
    function _GetVendorName: String;
    procedure _SetVendorName(NewValue: String);
    function _Get_M_Address1: TBAString;
    function _GetAddress1: String;
    procedure _SetAddress1(NewValue: String);
    function _Get_M_Address2: TBAString;
    function _GetAddress2: String;
    procedure _SetAddress2(NewValue: String);
    function _Get_M_Preferred: TBABoolean;
    function _GetPreferred: Boolean;
    procedure _SetPreferred(NewValue: Boolean);
    function _Getparts: TPartList;
    function _Getbribes: TEmployeeList;
    function _GetbribesisBribedBy: TbribesisBribedByList;
  protected
  public
    property M_VendorNo: TBAInteger read _Get_M_VendorNo;
    property M_VendorName: TBAString read _Get_M_VendorName;
    property M_Address1: TBAString read _Get_M_Address1;
    property M_Address2: TBAString read _Get_M_Address2;
    property M_Preferred: TBABoolean read _Get_M_Preferred;
    property M_parts: TPartList read _Getparts;
    property M_bribes: TEmployeeList read _Getbribes;
    property M_bribesisBribedBy: TbribesisBribedByList read _GetbribesisBribedBy;
    property VendorNo: Integer read _GetVendorNo write _SetVendorNo;
    property VendorName: String read _GetVendorName write _SetVendorName;
    property Address1: String read _GetAddress1 write _SetAddress1;
    property Address2: String read _GetAddress2 write _SetAddress2;
    property Preferred: Boolean read _GetPreferred write _SetPreferred;
    property parts: TPartList read _Getparts;
    property bribes: TEmployeeList read _Getbribes;
    property bribesisBribedBy: TbribesisBribedByList read _GetbribesisBribedBy;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TbribesisBribedByList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TbribesisBribedBy;
    procedure SetBoldObject(index: Integer; NewObject: TbribesisBribedBy);
  public
    function Includes(anObject: TbribesisBribedBy): Boolean;
    function IndexOf(anObject: TbribesisBribedBy): Integer;
    procedure Add(NewObject: TbribesisBribedBy);
    function AddNew: TbribesisBribedBy;
    procedure Insert(index: Integer; NewObject: TbribesisBribedBy);
    property BoldObjects[index: Integer]: TbribesisBribedBy read GetBoldObject write SetBoldObject; default;
  end;

  TContactList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TContact;
    procedure SetBoldObject(index: Integer; NewObject: TContact);
  public
    function Includes(anObject: TContact): Boolean;
    function IndexOf(anObject: TContact): Integer;
    procedure Add(NewObject: TContact);
    function AddNew: TContact;
    procedure Insert(index: Integer; NewObject: TContact);
    property BoldObjects[index: Integer]: TContact read GetBoldObject write SetBoldObject; default;
  end;

  TCustomerList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCustomer;
    procedure SetBoldObject(index: Integer; NewObject: TCustomer);
  public
    function Includes(anObject: TCustomer): Boolean;
    function IndexOf(anObject: TCustomer): Integer;
    procedure Add(NewObject: TCustomer);
    function AddNew: TCustomer;
    procedure Insert(index: Integer; NewObject: TCustomer);
    property BoldObjects[index: Integer]: TCustomer read GetBoldObject write SetBoldObject; default;
  end;

  TEmployeeList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TEmployee;
    procedure SetBoldObject(index: Integer; NewObject: TEmployee);
  public
    function Includes(anObject: TEmployee): Boolean;
    function IndexOf(anObject: TEmployee): Integer;
    procedure Add(NewObject: TEmployee);
    function AddNew: TEmployee;
    procedure Insert(index: Integer; NewObject: TEmployee);
    property BoldObjects[index: Integer]: TEmployee read GetBoldObject write SetBoldObject; default;
  end;

  TItemList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TItem;
    procedure SetBoldObject(index: Integer; NewObject: TItem);
  public
    function Includes(anObject: TItem): Boolean;
    function IndexOf(anObject: TItem): Integer;
    procedure Add(NewObject: TItem);
    function AddNew: TItem;
    procedure Insert(index: Integer; NewObject: TItem);
    property BoldObjects[index: Integer]: TItem read GetBoldObject write SetBoldObject; default;
  end;

  TOrderList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOrder;
    procedure SetBoldObject(index: Integer; NewObject: TOrder);
  public
    function Includes(anObject: TOrder): Boolean;
    function IndexOf(anObject: TOrder): Integer;
    procedure Add(NewObject: TOrder);
    function AddNew: TOrder;
    procedure Insert(index: Integer; NewObject: TOrder);
    property BoldObjects[index: Integer]: TOrder read GetBoldObject write SetBoldObject; default;
  end;

  TPartList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPart;
    procedure SetBoldObject(index: Integer; NewObject: TPart);
  public
    function Includes(anObject: TPart): Boolean;
    function IndexOf(anObject: TPart): Integer;
    procedure Add(NewObject: TPart);
    function AddNew: TPart;
    procedure Insert(index: Integer; NewObject: TPart);
    property BoldObjects[index: Integer]: TPart read GetBoldObject write SetBoldObject; default;
  end;

  TVendorList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TVendor;
    procedure SetBoldObject(index: Integer; NewObject: TVendor);
  public
    function Includes(anObject: TVendor): Boolean;
    function IndexOf(anObject: TVendor): Integer;
    procedure Add(NewObject: TVendor);
    function AddNew: TVendor;
    procedure Insert(index: Integer; NewObject: TVendor);
    property BoldObjects[index: Integer]: TVendor read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 