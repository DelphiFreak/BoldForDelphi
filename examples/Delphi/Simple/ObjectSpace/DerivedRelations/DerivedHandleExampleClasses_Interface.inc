(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:53:27         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF DerivedHandleExampleClasses_Interface.inc}
{$DEFINE DerivedHandleExampleClasses_Interface.inc}

{$IFNDEF DerivedHandleExampleClasses_unitheader}
unit DerivedHandleExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TPerson = class;
  TPersonList = class;
  TProject = class;
  TProjectList = class;
  TProjectParticipators = class;
  TProjectParticipatorsList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _GetparticipatesIn: TProjectList;
    function _GetProjectParticipators: TProjectParticipatorsList;
    function _GetleadsProject: TProjectList;
    function _GetmemberOf: TProjectList;
    function _Getassociates: TPersonList;
  protected
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    procedure CompleteCreate; override;
    property M_Name: TBAString read _Get_M_Name;
    property M_participatesIn: TProjectList read _GetparticipatesIn;
    property M_ProjectParticipators: TProjectParticipatorsList read _GetProjectParticipators;
    property M_leadsProject: TProjectList read _GetleadsProject;
    property M_memberOf: TProjectList read _GetmemberOf;
    property M_associates: TPersonList read _Getassociates;
    property Name: String read _GetName write _SetName;
    property participatesIn: TProjectList read _GetparticipatesIn;
    property ProjectParticipators: TProjectParticipatorsList read _GetProjectParticipators;
    property leadsProject: TProjectList read _GetleadsProject;
    property memberOf: TProjectList read _GetmemberOf;
    property associates: TPersonList read _Getassociates;
  end;

  TProject = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _Getparticipator: TPersonList;
    function _GetProjectParticipators: TProjectParticipatorsList;
    function _GetprojectLeader: TPerson;
    function _Get_M_projectLeader: TBoldObjectReference;
    procedure _SetprojectLeader(value: TPerson);
    function _GetallMembers: TPersonList;
  protected
  public
    procedure CompleteCreate; override;
    property M_Name: TBAString read _Get_M_Name;
    property M_participator: TPersonList read _Getparticipator;
    property M_ProjectParticipators: TProjectParticipatorsList read _GetProjectParticipators;
    property M_projectLeader: TBoldObjectReference read _Get_M_projectLeader;
    property M_allMembers: TPersonList read _GetallMembers;
    property Name: String read _GetName write _SetName;
    property participator: TPersonList read _Getparticipator;
    property ProjectParticipators: TProjectParticipatorsList read _GetProjectParticipators;
    property projectLeader: TPerson read _GetprojectLeader write _SetprojectLeader;
    property allMembers: TPersonList read _GetallMembers;
  end;

  TProjectParticipators = class(TBusinessClassesRoot)
  private
    function _GetparticipatesIn: TProject;
    function _Get_M_participatesIn: TBoldObjectReference;
    function _Getparticipator: TPerson;
    function _Get_M_participator: TBoldObjectReference;
  protected
  public
    property M_participatesIn: TBoldObjectReference read _Get_M_participatesIn;
    property M_participator: TBoldObjectReference read _Get_M_participator;
    property participatesIn: TProject read _GetparticipatesIn;
    property participator: TPerson read _Getparticipator;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

  TProjectList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TProject;
    procedure SetBoldObject(index: Integer; NewObject: TProject);
  public
    function Includes(anObject: TProject): Boolean;
    function IndexOf(anObject: TProject): Integer;
    procedure Add(NewObject: TProject);
    function AddNew: TProject;
    procedure Insert(index: Integer; NewObject: TProject);
    property BoldObjects[index: Integer]: TProject read GetBoldObject write SetBoldObject; default;
  end;

  TProjectParticipatorsList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TProjectParticipators;
    procedure SetBoldObject(index: Integer; NewObject: TProjectParticipators);
  public
    function Includes(anObject: TProjectParticipators): Boolean;
    function IndexOf(anObject: TProjectParticipators): Integer;
    procedure Add(NewObject: TProjectParticipators);
    function AddNew: TProjectParticipators;
    procedure Insert(index: Integer; NewObject: TProjectParticipators);
    property BoldObjects[index: Integer]: TProjectParticipators read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

