(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:53:27         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit DerivedHandleExampleClasses;

{$DEFINE DerivedHandleExampleClasses_unitheader}
{$INCLUDE DerivedHandleExampleClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE DerivedHandleExampleClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TPerson }

function TPerson._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TPerson', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPerson._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TPerson._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TPerson._GetparticipatesIn: TProjectList;
begin
  assert(ValidateMember('TPerson', 'participatesIn', 1, TProjectList));
  Result := TProjectList(BoldMembers[1]);
end;

function TPerson._GetProjectParticipators: TProjectParticipatorsList;
begin
  assert(ValidateMember('TPerson', 'ProjectParticipators', 2, TProjectParticipatorsList));
  Result := TProjectParticipatorsList(BoldMembers[2]);
end;

function TPerson._GetleadsProject: TProjectList;
begin
  assert(ValidateMember('TPerson', 'leadsProject', 3, TProjectList));
  Result := TProjectList(BoldMembers[3]);
end;

function TPerson._GetmemberOf: TProjectList;
begin
  assert(ValidateMember('TPerson', 'memberOf', 4, TProjectList));
  Result := TProjectList(BoldMembers[4]);
end;

function TPerson._Getassociates: TPersonList;
begin
  assert(ValidateMember('TPerson', 'associates', 5, TPersonList));
  Result := TPersonList(BoldMembers[5]);
end;

procedure TPersonList.Add(NewObject: TPerson);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonList.IndexOf(anObject: TPerson): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonList.Includes(anObject: TPerson) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonList.AddNew: TPerson;
begin
  result := TPerson(InternalAddNew);
end;

procedure TPersonList.Insert(index: Integer; NewObject: TPerson);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonList.GetBoldObject(index: Integer): TPerson;
begin
  result := TPerson(GetElement(index));
end;

procedure TPersonList.SetBoldObject(index: Integer; NewObject: TPerson);
begin;
  SetElement(index, NewObject);
end;

function TPerson.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  result := inherited GetDeriveMethodForMember(Member);
end;

function TPerson.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TProject }

function TProject._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TProject', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TProject._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TProject._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TProject._Getparticipator: TPersonList;
begin
  assert(ValidateMember('TProject', 'participator', 1, TPersonList));
  Result := TPersonList(BoldMembers[1]);
end;

function TProject._GetProjectParticipators: TProjectParticipatorsList;
begin
  assert(ValidateMember('TProject', 'ProjectParticipators', 2, TProjectParticipatorsList));
  Result := TProjectParticipatorsList(BoldMembers[2]);
end;

function TProject._Get_M_projectLeader: TBoldObjectReference;
begin
  assert(ValidateMember('TProject', 'projectLeader', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TProject._GetprojectLeader: TPerson;
begin
  assert(not assigned(M_projectLeader.BoldObject) or (M_projectLeader.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'projectLeader', M_projectLeader.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_projectLeader.BoldObject);
end;

procedure TProject._SetprojectLeader(value: TPerson);
begin
  M_projectLeader.BoldObject := value;
end;

function TProject._GetallMembers: TPersonList;
begin
  assert(ValidateMember('TProject', 'allMembers', 4, TPersonList));
  Result := TPersonList(BoldMembers[4]);
end;

procedure TProjectList.Add(NewObject: TProject);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProjectList.IndexOf(anObject: TProject): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProjectList.Includes(anObject: TProject) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProjectList.AddNew: TProject;
begin
  result := TProject(InternalAddNew);
end;

procedure TProjectList.Insert(index: Integer; NewObject: TProject);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProjectList.GetBoldObject(index: Integer): TProject;
begin
  result := TProject(GetElement(index));
end;

procedure TProjectList.SetBoldObject(index: Integer; NewObject: TProject);
begin;
  SetElement(index, NewObject);
end;

{ TProjectParticipators }

function TProjectParticipators._Get_M_participatesIn: TBoldObjectReference;
begin
  assert(ValidateMember('TProjectParticipators', 'participatesIn', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TProjectParticipators._GetparticipatesIn: TProject;
begin
  assert(not assigned(M_participatesIn.BoldObject) or (M_participatesIn.BoldObject is TProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'participatesIn', M_participatesIn.BoldObject.ClassName, 'TProject']));
  Result := TProject(M_participatesIn.BoldObject);
end;

function TProjectParticipators._Get_M_participator: TBoldObjectReference;
begin
  assert(ValidateMember('TProjectParticipators', 'participator', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TProjectParticipators._Getparticipator: TPerson;
begin
  assert(not assigned(M_participator.BoldObject) or (M_participator.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'participator', M_participator.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_participator.BoldObject);
end;

procedure TProjectParticipatorsList.Add(NewObject: TProjectParticipators);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProjectParticipatorsList.IndexOf(anObject: TProjectParticipators): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProjectParticipatorsList.Includes(anObject: TProjectParticipators) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProjectParticipatorsList.AddNew: TProjectParticipators;
begin
  result := TProjectParticipators(InternalAddNew);
end;

procedure TProjectParticipatorsList.Insert(index: Integer; NewObject: TProjectParticipators);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProjectParticipatorsList.GetBoldObject(index: Integer): TProjectParticipators;
begin
  result := TProjectParticipators(GetElement(index));
end;

procedure TProjectParticipatorsList.SetBoldObject(index: Integer; NewObject: TProjectParticipators);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '376045650';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Person', TPersonList);
  BoldObjectListClasses.AddObjectEntry('Project', TProjectList);
  BoldObjectListClasses.AddObjectEntry('ProjectParticipators', TProjectParticipatorsList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Person', TPerson);
  BoldObjectClasses.AddObjectEntry('Project', TProject);
  BoldObjectClasses.AddObjectEntry('ProjectParticipators', TProjectParticipators);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('DerivedHandleExampleClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

