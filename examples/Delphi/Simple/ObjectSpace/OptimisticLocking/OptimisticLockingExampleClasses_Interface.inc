(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:06:47         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF OptimisticLockingExampleClasses_Interface.inc}
{$DEFINE OptimisticLockingExampleClasses_Interface.inc}

{$IFNDEF OptimisticLockingExampleClasses_unitheader}
unit OptimisticLockingExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TCar = class;
  TCarList = class;
  TPerson = class;
  TPersonList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TCar = class(TBusinessClassesRoot)
  private
    function _Get_M_color: TBAString;
    function _Getcolor: String;
    procedure _Setcolor(NewValue: String);
    function _Get_M_maxSpeed: TBAString;
    function _GetmaxSpeed: String;
    procedure _SetmaxSpeed(NewValue: String);
    function _Get_M_model: TBAString;
    function _Getmodel: String;
    procedure _Setmodel(NewValue: String);
    function _Getdriver: TPerson;
    function _Get_M_driver: TBoldObjectReference;
    procedure _Setdriver(value: TPerson);
  protected
  public
    property M_color: TBAString read _Get_M_color;
    property M_maxSpeed: TBAString read _Get_M_maxSpeed;
    property M_model: TBAString read _Get_M_model;
    property M_driver: TBoldObjectReference read _Get_M_driver;
    property color: String read _Getcolor write _Setcolor;
    property maxSpeed: String read _GetmaxSpeed write _SetmaxSpeed;
    property model: String read _Getmodel write _Setmodel;
    property driver: TPerson read _Getdriver write _Setdriver;
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    function _Get_M_hasLicense: TBABoolean;
    function _GethasLicense: Boolean;
    procedure _SethasLicense(NewValue: Boolean);
    function _Getcars: TCarList;
  protected
  public
    property M_name: TBAString read _Get_M_name;
    property M_hasLicense: TBABoolean read _Get_M_hasLicense;
    property M_cars: TCarList read _Getcars;
    property name: String read _Getname write _Setname;
    property hasLicense: Boolean read _GethasLicense write _SethasLicense;
    property cars: TCarList read _Getcars;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TCarList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCar;
    procedure SetBoldObject(index: Integer; NewObject: TCar);
  public
    function Includes(anObject: TCar): Boolean;
    function IndexOf(anObject: TCar): Integer;
    procedure Add(NewObject: TCar);
    function AddNew: TCar;
    procedure Insert(index: Integer; NewObject: TCar);
    property BoldObjects[index: Integer]: TCar read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 