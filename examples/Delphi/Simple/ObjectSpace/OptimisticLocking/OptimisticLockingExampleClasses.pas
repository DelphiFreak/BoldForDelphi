(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:06:46         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit OptimisticLockingExampleClasses;

{$DEFINE OptimisticLockingExampleClasses_unitheader}
{$INCLUDE OptimisticLockingExampleClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TCar }

function TCar._Get_M_color: TBAString;
begin
  assert(ValidateMember('TCar', 'color', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TCar._Getcolor: String;
begin
  Result := M_color.AsString;
end;

procedure TCar._Setcolor(NewValue: String);
begin
  M_color.AsString := NewValue;
end;

function TCar._Get_M_maxSpeed: TBAString;
begin
  assert(ValidateMember('TCar', 'maxSpeed', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TCar._GetmaxSpeed: String;
begin
  Result := M_maxSpeed.AsString;
end;

procedure TCar._SetmaxSpeed(NewValue: String);
begin
  M_maxSpeed.AsString := NewValue;
end;

function TCar._Get_M_model: TBAString;
begin
  assert(ValidateMember('TCar', 'model', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TCar._Getmodel: String;
begin
  Result := M_model.AsString;
end;

procedure TCar._Setmodel(NewValue: String);
begin
  M_model.AsString := NewValue;
end;

function TCar._Get_M_driver: TBoldObjectReference;
begin
  assert(ValidateMember('TCar', 'driver', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TCar._Getdriver: TPerson;
begin
  assert(not assigned(M_driver.BoldObject) or (M_driver.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'driver', M_driver.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_driver.BoldObject);
end;

procedure TCar._Setdriver(value: TPerson);
begin
  M_driver.BoldObject := value;
end;

procedure TCarList.Add(NewObject: TCar);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TCarList.IndexOf(anObject: TCar): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TCarList.Includes(anObject: TCar) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TCarList.AddNew: TCar;
begin
  result := TCar(InternalAddNew);
end;

procedure TCarList.Insert(index: Integer; NewObject: TCar);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TCarList.GetBoldObject(index: Integer): TCar;
begin
  result := TCar(GetElement(index));
end;

procedure TCarList.SetBoldObject(index: Integer; NewObject: TCar);
begin;
  SetElement(index, NewObject);
end;

{ TPerson }

function TPerson._Get_M_name: TBAString;
begin
  assert(ValidateMember('TPerson', 'name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPerson._Getname: String;
begin
  Result := M_name.AsString;
end;

procedure TPerson._Setname(NewValue: String);
begin
  M_name.AsString := NewValue;
end;

function TPerson._Get_M_hasLicense: TBABoolean;
begin
  assert(ValidateMember('TPerson', 'hasLicense', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TPerson._GethasLicense: Boolean;
begin
  Result := M_hasLicense.AsBoolean;
end;

procedure TPerson._SethasLicense(NewValue: Boolean);
begin
  M_hasLicense.AsBoolean := NewValue;
end;

function TPerson._Getcars: TCarList;
begin
  assert(ValidateMember('TPerson', 'cars', 2, TCarList));
  Result := TCarList(BoldMembers[2]);
end;

procedure TPersonList.Add(NewObject: TPerson);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonList.IndexOf(anObject: TPerson): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonList.Includes(anObject: TPerson) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonList.AddNew: TPerson;
begin
  result := TPerson(InternalAddNew);
end;

procedure TPersonList.Insert(index: Integer; NewObject: TPerson);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonList.GetBoldObject(index: Integer): TPerson;
begin
  result := TPerson(GetElement(index));
end;

procedure TPersonList.SetBoldObject(index: Integer; NewObject: TPerson);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1864445554';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Car', TCarList);
  BoldObjectListClasses.AddObjectEntry('Person', TPersonList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Car', TCar);
  BoldObjectClasses.AddObjectEntry('Person', TPerson);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('OptimisticLockingExampleClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 