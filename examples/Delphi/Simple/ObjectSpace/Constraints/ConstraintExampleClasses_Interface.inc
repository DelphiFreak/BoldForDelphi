(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:28:11         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ConstraintExampleClasses_Interface.inc}
{$DEFINE ConstraintExampleClasses_Interface.inc}

{$IFNDEF ConstraintExampleClasses_unitheader}
unit ConstraintExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  BoldValueSpaceInterfaces,
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TCustomer = class;
  TCustomerList = class;
  TOrder = class;
  TOrderList = class;
  TOrderItem = class;
  TOrderItemList = class;
  TPart = class;
  TPartList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
    function MayUpdate: Boolean; override;
    function ReceiveQueryFromOwned(Originator: TObject; OriginalEvent: TBoldEvent; const Args: array of const; Subscriber: TBoldSubscriber): Boolean; override;
  end;

  TCustomer = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    function _Get_M_creditLimit: TBACurrency;
    function _GetcreditLimit: Currency;
    procedure _SetcreditLimit(NewValue: Currency);
    function _Get_M_shippingaddress: TBAString;
    function _Getshippingaddress: String;
    procedure _Setshippingaddress(NewValue: String);
    function _Get_M_creditCardNo: TBAString;
    function _GetcreditCardNo: String;
    procedure _SetcreditCardNo(NewValue: String);
    function _Getorders: TOrderList;
  protected
  public
    property M_name: TBAString read _Get_M_name;
    property M_creditLimit: TBACurrency read _Get_M_creditLimit;
    property M_shippingaddress: TBAString read _Get_M_shippingaddress;
    property M_creditCardNo: TBAString read _Get_M_creditCardNo;
    property M_orders: TOrderList read _Getorders;
    property name: String read _Getname write _Setname;
    property creditLimit: Currency read _GetcreditLimit write _SetcreditLimit;
    property shippingaddress: String read _Getshippingaddress write _Setshippingaddress;
    property creditCardNo: String read _GetcreditCardNo write _SetcreditCardNo;
    property orders: TOrderList read _Getorders;
  end;

  TOrder = class(TBusinessClassesRoot)
  private
    function _Get_M_orderDate: TBADate;
    function _GetorderDate: TDate;
    procedure _SetorderDate(NewValue: TDate);
    function _Get_M_shippingDate: TBADate;
    function _GetshippingDate: TDate;
    procedure _SetshippingDate(NewValue: TDate);
    function _Get_M_orderSum: TBAFloat;
    function _GetorderSum: double;
    function _Getcustomer: TCustomer;
    function _Get_M_customer: TBoldObjectReference;
    procedure _Setcustomer(value: TCustomer);
    function _Getitems: TOrderItemList;
  protected
  public
    procedure CompleteCreate; override;
    property M_orderDate: TBADate read _Get_M_orderDate;
    property M_shippingDate: TBADate read _Get_M_shippingDate;
    property M_orderSum: TBAFloat read _Get_M_orderSum;
    property M_customer: TBoldObjectReference read _Get_M_customer;
    property M_items: TOrderItemList read _Getitems;
    property orderDate: TDate read _GetorderDate write _SetorderDate;
    property shippingDate: TDate read _GetshippingDate write _SetshippingDate;
    property orderSum: double read _GetorderSum;
    property customer: TCustomer read _Getcustomer write _Setcustomer;
    property items: TOrderItemList read _Getitems;
  end;

  TOrderItem = class(TBusinessClassesRoot)
  private
    function _Get_M_qty: TBAInteger;
    function _Getqty: Integer;
    procedure _Setqty(NewValue: Integer);
    function _Get_M_itemSum: TBAFloat;
    function _GetitemSum: double;
    function _Getorder: TOrder;
    function _Get_M_order: TBoldObjectReference;
    procedure _Setorder(value: TOrder);
    function _Getpart: TPart;
    function _Get_M_part: TBoldObjectReference;
    procedure _Setpart(value: TPart);
  protected
  public
    property M_qty: TBAInteger read _Get_M_qty;
    property M_itemSum: TBAFloat read _Get_M_itemSum;
    property M_order: TBoldObjectReference read _Get_M_order;
    property M_part: TBoldObjectReference read _Get_M_part;
    property qty: Integer read _Getqty write _Setqty;
    property itemSum: double read _GetitemSum;
    property order: TOrder read _Getorder write _Setorder;
    property part: TPart read _Getpart write _Setpart;
  end;

  TPart = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    function _Get_M_price: TBACurrency;
    function _Getprice: Currency;
    procedure _Setprice(NewValue: Currency);
    function _Getorderitems: TOrderItemList;
  protected
  public
    property M_name: TBAString read _Get_M_name;
    property M_price: TBACurrency read _Get_M_price;
    property M_orderitems: TOrderItemList read _Getorderitems;
    property name: String read _Getname write _Setname;
    property price: Currency read _Getprice write _Setprice;
    property orderitems: TOrderItemList read _Getorderitems;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TCustomerList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCustomer;
    procedure SetBoldObject(index: Integer; NewObject: TCustomer);
  public
    function Includes(anObject: TCustomer): Boolean;
    function IndexOf(anObject: TCustomer): Integer;
    procedure Add(NewObject: TCustomer);
    function AddNew: TCustomer;
    procedure Insert(index: Integer; NewObject: TCustomer);
    property BoldObjects[index: Integer]: TCustomer read GetBoldObject write SetBoldObject; default;
  end;

  TOrderList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOrder;
    procedure SetBoldObject(index: Integer; NewObject: TOrder);
  public
    function Includes(anObject: TOrder): Boolean;
    function IndexOf(anObject: TOrder): Integer;
    procedure Add(NewObject: TOrder);
    function AddNew: TOrder;
    procedure Insert(index: Integer; NewObject: TOrder);
    property BoldObjects[index: Integer]: TOrder read GetBoldObject write SetBoldObject; default;
  end;

  TOrderItemList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOrderItem;
    procedure SetBoldObject(index: Integer; NewObject: TOrderItem);
  public
    function Includes(anObject: TOrderItem): Boolean;
    function IndexOf(anObject: TOrderItem): Integer;
    procedure Add(NewObject: TOrderItem);
    function AddNew: TOrderItem;
    procedure Insert(index: Integer; NewObject: TOrderItem);
    property BoldObjects[index: Integer]: TOrderItem read GetBoldObject write SetBoldObject; default;
  end;

  TPartList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPart;
    procedure SetBoldObject(index: Integer; NewObject: TPart);
  public
    function Includes(anObject: TPart): Boolean;
    function IndexOf(anObject: TPart): Integer;
    procedure Add(NewObject: TPart);
    function AddNew: TPart;
    procedure Insert(index: Integer; NewObject: TPart);
    property BoldObjects[index: Integer]: TPart read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 