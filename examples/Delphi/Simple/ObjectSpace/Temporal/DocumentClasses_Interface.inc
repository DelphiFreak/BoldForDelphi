(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:17:19         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF DocumentClasses_Interface.inc}
{$DEFINE DocumentClasses_Interface.inc}

{$IFNDEF DocumentClasses_unitheader}
unit DocumentClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TDocumentClassesRoot = class;
  TDocumentClassesRootList = class;
  TContainsProject = class;
  TContainsProjectList = class;
  TContext = class;
  TContextList = class;
  TDocument = class;
  TDocumentList = class;
  TDocumentPart = class;
  TDocumentPartList = class;
  TPerson = class;
  TPersonList = class;
  TProject = class;
  TProjectList = class;
  TVersion = class;
  TVersionList = class;

  TDocumentClassesRoot = class(TBoldObject)
  private
  protected
  public
    function AtTime(Time: TBoldTimestampType): TDocumentClassesRoot;
  end;

  TContainsProject = class(TDocumentClassesRoot)
  private
    function _GetProject: TProject;
    function _Get_M_Project: TBoldObjectReference;
    function _GetContains: TDocument;
    function _Get_M_Contains: TBoldObjectReference;
  protected
  public
    property M_Project: TBoldObjectReference read _Get_M_Project;
    property M_Contains: TBoldObjectReference read _Get_M_Contains;
    property Project: TProject read _GetProject;
    property Contains: TDocument read _GetContains;
  end;

  TContext = class(TDocumentClassesRoot)
  private
    function _GetCurrentUser: TPerson;
    function _Get_M_CurrentUser: TBoldObjectReference;
    procedure _SetCurrentUser(value: TPerson);
  protected
  public
    property M_CurrentUser: TBoldObjectReference read _Get_M_CurrentUser;
    property CurrentUser: TPerson read _GetCurrentUser write _SetCurrentUser;
  end;

  TDocument = class(TDocumentClassesRoot)
  private
    function _Get_M_ViewVersion: TBAInteger;
    function _GetViewVersion: Integer;
    function _Get_M_Title: TBAString;
    function _GetTitle: String;
    procedure _SetTitle(NewValue: String);
    function _Get_M_LastPublished: TBAInteger;
    function _GetLastPublished: Integer;
    function _GetProject: TProject;
    function _Get_M_Project: TBoldObjectReference;
    procedure _SetProject(value: TProject);
    function _GetContainsProject: TContainsProject;
    function _Get_M_ContainsProject: TBoldObjectReference;
    function _GetAuthor: TPerson;
    function _Get_M_Author: TBoldObjectReference;
    procedure _SetAuthor(value: TPerson);
    function _GetVersion: TVersionList;
    function _GetDocumentPart: TDocumentPartList;
  protected
  public
    function AtTime(Time: TBoldTimestampType): TDocument;
    procedure CompleteCreate; override;
    property M_ViewVersion: TBAInteger read _Get_M_ViewVersion;
    property M_Title: TBAString read _Get_M_Title;
    property M_LastPublished: TBAInteger read _Get_M_LastPublished;
    property M_Project: TBoldObjectReference read _Get_M_Project;
    property M_ContainsProject: TBoldObjectReference read _Get_M_ContainsProject;
    property M_Author: TBoldObjectReference read _Get_M_Author;
    property M_Version: TVersionList read _GetVersion;
    property M_DocumentPart: TDocumentPartList read _GetDocumentPart;
    property ViewVersion: Integer read _GetViewVersion;
    property Title: String read _GetTitle write _SetTitle;
    property LastPublished: Integer read _GetLastPublished;
    property Project: TProject read _GetProject write _SetProject;
    property ContainsProject: TContainsProject read _GetContainsProject;
    property Author: TPerson read _GetAuthor write _SetAuthor;
    property Version: TVersionList read _GetVersion;
    property DocumentPart: TDocumentPartList read _GetDocumentPart;
  end;

  TDocumentPart = class(TDocumentClassesRoot)
  private
    function _Get_M_Header: TBAString;
    function _GetHeader: String;
    procedure _SetHeader(NewValue: String);
    function _Get_M_Text: TBAString;
    function _GetText: String;
    procedure _SetText(NewValue: String);
    function _GetDocument: TDocument;
    function _Get_M_Document: TBoldObjectReference;
    procedure _SetDocument(value: TDocument);
    function _GetPartOf: TDocumentPart;
    function _Get_M_PartOf: TBoldObjectReference;
    procedure _SetPartOf(value: TDocumentPart);
    function _GetPart: TDocumentPartList;
  protected
  public
    function AtTime(Time: TBoldTimestampType): TDocumentPart;
    property M_Header: TBAString read _Get_M_Header;
    property M_Text: TBAString read _Get_M_Text;
    property M_Document: TBoldObjectReference read _Get_M_Document;
    property M_PartOf: TBoldObjectReference read _Get_M_PartOf;
    property M_Part: TDocumentPartList read _GetPart;
    property Header: String read _GetHeader write _SetHeader;
    property Text: String read _GetText write _SetText;
    property Document: TDocument read _GetDocument write _SetDocument;
    property PartOf: TDocumentPart read _GetPartOf write _SetPartOf;
    property Part: TDocumentPartList read _GetPart;
  end;

  TPerson = class(TDocumentClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _GetDocument: TDocumentList;
    function _GetContext: TContextList;
  protected
  public
    function AtTime(Time: TBoldTimestampType): TPerson;
    property M_Name: TBAString read _Get_M_Name;
    property M_Document: TDocumentList read _GetDocument;
    property M_Context: TContextList read _GetContext;
    property Name: String read _GetName write _SetName;
    property Document: TDocumentList read _GetDocument;
    property Context: TContextList read _GetContext;
  end;

  TProject = class(TDocumentClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _GetContains: TDocumentList;
    function _GetContainsProject: TContainsProjectList;
    function _GetViewContains: TDocumentList;
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_Contains: TDocumentList read _GetContains;
    property M_ContainsProject: TContainsProjectList read _GetContainsProject;
    property M_ViewContains: TDocumentList read _GetViewContains;
    property Name: String read _GetName write _SetName;
    property Contains: TDocumentList read _GetContains;
    property ContainsProject: TContainsProjectList read _GetContainsProject;
    property ViewContains: TDocumentList read _GetViewContains;
  end;

  TVersion = class(TDocumentClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
    function _Get_M_Time: TBAInteger;
    function _GetTime: Integer;
    procedure _SetTime(NewValue: Integer);
    function _Get_M_IsPublished: TBABoolean;
    function _GetIsPublished: Boolean;
    procedure _SetIsPublished(NewValue: Boolean);
    function _GetDocument: TDocument;
    function _Get_M_Document: TBoldObjectReference;
    procedure _SetDocument(value: TDocument);
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property M_Time: TBAInteger read _Get_M_Time;
    property M_IsPublished: TBABoolean read _Get_M_IsPublished;
    property M_Document: TBoldObjectReference read _Get_M_Document;
    property Name: String read _GetName write _SetName;
    property Time: Integer read _GetTime write _SetTime;
    property IsPublished: Boolean read _GetIsPublished write _SetIsPublished;
    property Document: TDocument read _GetDocument write _SetDocument;
  end;

  TDocumentClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TDocumentClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TDocumentClassesRoot);
  public
    function Includes(anObject: TDocumentClassesRoot): Boolean;
    function IndexOf(anObject: TDocumentClassesRoot): Integer;
    procedure Add(NewObject: TDocumentClassesRoot);
    function AddNew: TDocumentClassesRoot;
    procedure Insert(index: Integer; NewObject: TDocumentClassesRoot);
    property BoldObjects[index: Integer]: TDocumentClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TContainsProjectList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TContainsProject;
    procedure SetBoldObject(index: Integer; NewObject: TContainsProject);
  public
    function Includes(anObject: TContainsProject): Boolean;
    function IndexOf(anObject: TContainsProject): Integer;
    procedure Add(NewObject: TContainsProject);
    function AddNew: TContainsProject;
    procedure Insert(index: Integer; NewObject: TContainsProject);
    property BoldObjects[index: Integer]: TContainsProject read GetBoldObject write SetBoldObject; default;
  end;

  TContextList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TContext;
    procedure SetBoldObject(index: Integer; NewObject: TContext);
  public
    function Includes(anObject: TContext): Boolean;
    function IndexOf(anObject: TContext): Integer;
    procedure Add(NewObject: TContext);
    function AddNew: TContext;
    procedure Insert(index: Integer; NewObject: TContext);
    property BoldObjects[index: Integer]: TContext read GetBoldObject write SetBoldObject; default;
  end;

  TDocumentList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDocument;
    procedure SetBoldObject(index: Integer; NewObject: TDocument);
  public
    function Includes(anObject: TDocument): Boolean;
    function IndexOf(anObject: TDocument): Integer;
    procedure Add(NewObject: TDocument);
    function AddNew: TDocument;
    procedure Insert(index: Integer; NewObject: TDocument);
    property BoldObjects[index: Integer]: TDocument read GetBoldObject write SetBoldObject; default;
  end;

  TDocumentPartList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TDocumentPart;
    procedure SetBoldObject(index: Integer; NewObject: TDocumentPart);
  public
    function Includes(anObject: TDocumentPart): Boolean;
    function IndexOf(anObject: TDocumentPart): Integer;
    procedure Add(NewObject: TDocumentPart);
    function AddNew: TDocumentPart;
    procedure Insert(index: Integer; NewObject: TDocumentPart);
    property BoldObjects[index: Integer]: TDocumentPart read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

  TProjectList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TProject;
    procedure SetBoldObject(index: Integer; NewObject: TProject);
  public
    function Includes(anObject: TProject): Boolean;
    function IndexOf(anObject: TProject): Integer;
    procedure Add(NewObject: TProject);
    function AddNew: TProject;
    procedure Insert(index: Integer; NewObject: TProject);
    property BoldObjects[index: Integer]: TProject read GetBoldObject write SetBoldObject; default;
  end;

  TVersionList = class(TDocumentClassesRootList)
  protected
    function GetBoldObject(index: Integer): TVersion;
    procedure SetBoldObject(index: Integer; NewObject: TVersion);
  public
    function Includes(anObject: TVersion): Boolean;
    function IndexOf(anObject: TVersion): Integer;
    procedure Add(NewObject: TVersion);
    function AddNew: TVersion;
    procedure Insert(index: Integer; NewObject: TVersion);
    property BoldObjects[index: Integer]: TVersion read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 