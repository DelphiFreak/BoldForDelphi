(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:17:18         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit DocumentClasses;

{$DEFINE DocumentClasses_unitheader}
{$INCLUDE DocumentClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE DocumentClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TDocumentClassesRoot }

function TDocumentClassesRoot.AtTime(Time: TBoldTimestampType): TDocumentClassesRoot;
begin
  result := TDocumentClassesRoot(inherited AtTime(Time));
end;

procedure TDocumentClassesRootList.Add(NewObject: TDocumentClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDocumentClassesRootList.IndexOf(anObject: TDocumentClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDocumentClassesRootList.Includes(anObject: TDocumentClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDocumentClassesRootList.AddNew: TDocumentClassesRoot;
begin
  result := TDocumentClassesRoot(InternalAddNew);
end;

procedure TDocumentClassesRootList.Insert(index: Integer; NewObject: TDocumentClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDocumentClassesRootList.GetBoldObject(index: Integer): TDocumentClassesRoot;
begin
  result := TDocumentClassesRoot(GetElement(index));
end;

procedure TDocumentClassesRootList.SetBoldObject(index: Integer; NewObject: TDocumentClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TContainsProject }

function TContainsProject._Get_M_Project: TBoldObjectReference;
begin
  assert(ValidateMember('TContainsProject', 'Project', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TContainsProject._GetProject: TProject;
begin
  assert(not assigned(M_Project.BoldObject) or (M_Project.BoldObject is TProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Project', M_Project.BoldObject.ClassName, 'TProject']));
  Result := TProject(M_Project.BoldObject);
end;

function TContainsProject._Get_M_Contains: TBoldObjectReference;
begin
  assert(ValidateMember('TContainsProject', 'Contains', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TContainsProject._GetContains: TDocument;
begin
  assert(not assigned(M_Contains.BoldObject) or (M_Contains.BoldObject is TDocument), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Contains', M_Contains.BoldObject.ClassName, 'TDocument']));
  Result := TDocument(M_Contains.BoldObject);
end;

procedure TContainsProjectList.Add(NewObject: TContainsProject);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TContainsProjectList.IndexOf(anObject: TContainsProject): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TContainsProjectList.Includes(anObject: TContainsProject) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TContainsProjectList.AddNew: TContainsProject;
begin
  result := TContainsProject(InternalAddNew);
end;

procedure TContainsProjectList.Insert(index: Integer; NewObject: TContainsProject);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TContainsProjectList.GetBoldObject(index: Integer): TContainsProject;
begin
  result := TContainsProject(GetElement(index));
end;

procedure TContainsProjectList.SetBoldObject(index: Integer; NewObject: TContainsProject);
begin;
  SetElement(index, NewObject);
end;

{ TContext }

function TContext._Get_M_CurrentUser: TBoldObjectReference;
begin
  assert(ValidateMember('TContext', 'CurrentUser', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TContext._GetCurrentUser: TPerson;
begin
  assert(not assigned(M_CurrentUser.BoldObject) or (M_CurrentUser.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'CurrentUser', M_CurrentUser.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_CurrentUser.BoldObject);
end;

procedure TContext._SetCurrentUser(value: TPerson);
begin
  M_CurrentUser.BoldObject := value;
end;

procedure TContextList.Add(NewObject: TContext);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TContextList.IndexOf(anObject: TContext): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TContextList.Includes(anObject: TContext) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TContextList.AddNew: TContext;
begin
  result := TContext(InternalAddNew);
end;

procedure TContextList.Insert(index: Integer; NewObject: TContext);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TContextList.GetBoldObject(index: Integer): TContext;
begin
  result := TContext(GetElement(index));
end;

procedure TContextList.SetBoldObject(index: Integer; NewObject: TContext);
begin;
  SetElement(index, NewObject);
end;

{ TDocument }

function TDocument._Get_M_ViewVersion: TBAInteger;
begin
  assert(ValidateMember('TDocument', 'ViewVersion', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TDocument._GetViewVersion: Integer;
begin
  Result := M_ViewVersion.AsInteger;
end;

function TDocument._Get_M_Title: TBAString;
begin
  assert(ValidateMember('TDocument', 'Title', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TDocument._GetTitle: String;
begin
  Result := M_Title.AsString;
end;

procedure TDocument._SetTitle(NewValue: String);
begin
  M_Title.AsString := NewValue;
end;

function TDocument._Get_M_LastPublished: TBAInteger;
begin
  assert(ValidateMember('TDocument', 'LastPublished', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TDocument._GetLastPublished: Integer;
begin
  Result := M_LastPublished.AsInteger;
end;

function TDocument._Get_M_Project: TBoldObjectReference;
begin
  assert(ValidateMember('TDocument', 'Project', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TDocument._GetProject: TProject;
begin
  assert(not assigned(M_Project.BoldObject) or (M_Project.BoldObject is TProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Project', M_Project.BoldObject.ClassName, 'TProject']));
  Result := TProject(M_Project.BoldObject);
end;

procedure TDocument._SetProject(value: TProject);
begin
  M_Project.BoldObject := value;
end;

function TDocument._Get_M_ContainsProject: TBoldObjectReference;
begin
  assert(ValidateMember('TDocument', 'ContainsProject', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TDocument._GetContainsProject: TContainsProject;
begin
  assert(not assigned(M_ContainsProject.BoldObject) or (M_ContainsProject.BoldObject is TContainsProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ContainsProject', M_ContainsProject.BoldObject.ClassName, 'TContainsProject']));
  Result := TContainsProject(M_ContainsProject.BoldObject);
end;

function TDocument._Get_M_Author: TBoldObjectReference;
begin
  assert(ValidateMember('TDocument', 'Author', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TDocument._GetAuthor: TPerson;
begin
  assert(not assigned(M_Author.BoldObject) or (M_Author.BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Author', M_Author.BoldObject.ClassName, 'TPerson']));
  Result := TPerson(M_Author.BoldObject);
end;

procedure TDocument._SetAuthor(value: TPerson);
begin
  M_Author.BoldObject := value;
end;

function TDocument._GetVersion: TVersionList;
begin
  assert(ValidateMember('TDocument', 'Version', 6, TVersionList));
  Result := TVersionList(BoldMembers[6]);
end;

function TDocument._GetDocumentPart: TDocumentPartList;
begin
  assert(ValidateMember('TDocument', 'DocumentPart', 7, TDocumentPartList));
  Result := TDocumentPartList(BoldMembers[7]);
end;

function TDocument.AtTime(Time: TBoldTimestampType): TDocument;
begin
  result := TDocument(inherited AtTime(Time));
end;

procedure TDocumentList.Add(NewObject: TDocument);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDocumentList.IndexOf(anObject: TDocument): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDocumentList.Includes(anObject: TDocument) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDocumentList.AddNew: TDocument;
begin
  result := TDocument(InternalAddNew);
end;

procedure TDocumentList.Insert(index: Integer; NewObject: TDocument);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDocumentList.GetBoldObject(index: Integer): TDocument;
begin
  result := TDocument(GetElement(index));
end;

procedure TDocumentList.SetBoldObject(index: Integer; NewObject: TDocument);
begin;
  SetElement(index, NewObject);
end;

{ TDocumentPart }

function TDocumentPart._Get_M_Header: TBAString;
begin
  assert(ValidateMember('TDocumentPart', 'Header', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TDocumentPart._GetHeader: String;
begin
  Result := M_Header.AsString;
end;

procedure TDocumentPart._SetHeader(NewValue: String);
begin
  M_Header.AsString := NewValue;
end;

function TDocumentPart._Get_M_Text: TBAString;
begin
  assert(ValidateMember('TDocumentPart', 'Text', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TDocumentPart._GetText: String;
begin
  Result := M_Text.AsString;
end;

procedure TDocumentPart._SetText(NewValue: String);
begin
  M_Text.AsString := NewValue;
end;

function TDocumentPart._Get_M_Document: TBoldObjectReference;
begin
  assert(ValidateMember('TDocumentPart', 'Document', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TDocumentPart._GetDocument: TDocument;
begin
  assert(not assigned(M_Document.BoldObject) or (M_Document.BoldObject is TDocument), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Document', M_Document.BoldObject.ClassName, 'TDocument']));
  Result := TDocument(M_Document.BoldObject);
end;

procedure TDocumentPart._SetDocument(value: TDocument);
begin
  M_Document.BoldObject := value;
end;

function TDocumentPart._Get_M_PartOf: TBoldObjectReference;
begin
  assert(ValidateMember('TDocumentPart', 'PartOf', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TDocumentPart._GetPartOf: TDocumentPart;
begin
  assert(not assigned(M_PartOf.BoldObject) or (M_PartOf.BoldObject is TDocumentPart), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'PartOf', M_PartOf.BoldObject.ClassName, 'TDocumentPart']));
  Result := TDocumentPart(M_PartOf.BoldObject);
end;

procedure TDocumentPart._SetPartOf(value: TDocumentPart);
begin
  M_PartOf.BoldObject := value;
end;

function TDocumentPart._GetPart: TDocumentPartList;
begin
  assert(ValidateMember('TDocumentPart', 'Part', 4, TDocumentPartList));
  Result := TDocumentPartList(BoldMembers[4]);
end;

function TDocumentPart.AtTime(Time: TBoldTimestampType): TDocumentPart;
begin
  result := TDocumentPart(inherited AtTime(Time));
end;

procedure TDocumentPartList.Add(NewObject: TDocumentPart);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDocumentPartList.IndexOf(anObject: TDocumentPart): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDocumentPartList.Includes(anObject: TDocumentPart) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDocumentPartList.AddNew: TDocumentPart;
begin
  result := TDocumentPart(InternalAddNew);
end;

procedure TDocumentPartList.Insert(index: Integer; NewObject: TDocumentPart);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDocumentPartList.GetBoldObject(index: Integer): TDocumentPart;
begin
  result := TDocumentPart(GetElement(index));
end;

procedure TDocumentPartList.SetBoldObject(index: Integer; NewObject: TDocumentPart);
begin;
  SetElement(index, NewObject);
end;

{ TPerson }

function TPerson._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TPerson', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPerson._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TPerson._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TPerson._GetDocument: TDocumentList;
begin
  assert(ValidateMember('TPerson', 'Document', 1, TDocumentList));
  Result := TDocumentList(BoldMembers[1]);
end;

function TPerson._GetContext: TContextList;
begin
  assert(ValidateMember('TPerson', 'Context', 2, TContextList));
  Result := TContextList(BoldMembers[2]);
end;

function TPerson.AtTime(Time: TBoldTimestampType): TPerson;
begin
  result := TPerson(inherited AtTime(Time));
end;

procedure TPersonList.Add(NewObject: TPerson);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonList.IndexOf(anObject: TPerson): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonList.Includes(anObject: TPerson) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonList.AddNew: TPerson;
begin
  result := TPerson(InternalAddNew);
end;

procedure TPersonList.Insert(index: Integer; NewObject: TPerson);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonList.GetBoldObject(index: Integer): TPerson;
begin
  result := TPerson(GetElement(index));
end;

procedure TPersonList.SetBoldObject(index: Integer; NewObject: TPerson);
begin;
  SetElement(index, NewObject);
end;

{ TProject }

function TProject._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TProject', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TProject._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TProject._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TProject._GetContains: TDocumentList;
begin
  assert(ValidateMember('TProject', 'Contains', 1, TDocumentList));
  Result := TDocumentList(BoldMembers[1]);
end;

function TProject._GetContainsProject: TContainsProjectList;
begin
  assert(ValidateMember('TProject', 'ContainsProject', 2, TContainsProjectList));
  Result := TContainsProjectList(BoldMembers[2]);
end;

function TProject._GetViewContains: TDocumentList;
begin
  assert(ValidateMember('TProject', 'ViewContains', 3, TDocumentList));
  Result := TDocumentList(BoldMembers[3]);
end;

procedure TProjectList.Add(NewObject: TProject);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProjectList.IndexOf(anObject: TProject): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProjectList.Includes(anObject: TProject) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProjectList.AddNew: TProject;
begin
  result := TProject(InternalAddNew);
end;

procedure TProjectList.Insert(index: Integer; NewObject: TProject);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProjectList.GetBoldObject(index: Integer): TProject;
begin
  result := TProject(GetElement(index));
end;

procedure TProjectList.SetBoldObject(index: Integer; NewObject: TProject);
begin;
  SetElement(index, NewObject);
end;

{ TVersion }

function TVersion._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TVersion', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TVersion._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TVersion._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TVersion._Get_M_Time: TBAInteger;
begin
  assert(ValidateMember('TVersion', 'Time', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TVersion._GetTime: Integer;
begin
  Result := M_Time.AsInteger;
end;

procedure TVersion._SetTime(NewValue: Integer);
begin
  M_Time.AsInteger := NewValue;
end;

function TVersion._Get_M_IsPublished: TBABoolean;
begin
  assert(ValidateMember('TVersion', 'IsPublished', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TVersion._GetIsPublished: Boolean;
begin
  Result := M_IsPublished.AsBoolean;
end;

procedure TVersion._SetIsPublished(NewValue: Boolean);
begin
  M_IsPublished.AsBoolean := NewValue;
end;

function TVersion._Get_M_Document: TBoldObjectReference;
begin
  assert(ValidateMember('TVersion', 'Document', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TVersion._GetDocument: TDocument;
begin
  assert(not assigned(M_Document.BoldObject) or (M_Document.BoldObject is TDocument), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Document', M_Document.BoldObject.ClassName, 'TDocument']));
  Result := TDocument(M_Document.BoldObject);
end;

procedure TVersion._SetDocument(value: TDocument);
begin
  M_Document.BoldObject := value;
end;

procedure TVersionList.Add(NewObject: TVersion);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVersionList.IndexOf(anObject: TVersion): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVersionList.Includes(anObject: TVersion) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVersionList.AddNew: TVersion;
begin
  result := TVersion(InternalAddNew);
end;

procedure TVersionList.Insert(index: Integer; NewObject: TVersion);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVersionList.GetBoldObject(index: Integer): TVersion;
begin
  result := TVersion(GetElement(index));
end;

procedure TVersionList.SetBoldObject(index: Integer; NewObject: TVersion);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '726230855';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('DocumentClassesRoot', TDocumentClassesRootList);
  BoldObjectListClasses.AddObjectEntry('ContainsProject', TContainsProjectList);
  BoldObjectListClasses.AddObjectEntry('Context', TContextList);
  BoldObjectListClasses.AddObjectEntry('Document', TDocumentList);
  BoldObjectListClasses.AddObjectEntry('DocumentPart', TDocumentPartList);
  BoldObjectListClasses.AddObjectEntry('Person', TPersonList);
  BoldObjectListClasses.AddObjectEntry('Project', TProjectList);
  BoldObjectListClasses.AddObjectEntry('Version', TVersionList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('DocumentClassesRoot', TDocumentClassesRoot);
  BoldObjectClasses.AddObjectEntry('ContainsProject', TContainsProject);
  BoldObjectClasses.AddObjectEntry('Context', TContext);
  BoldObjectClasses.AddObjectEntry('Document', TDocument);
  BoldObjectClasses.AddObjectEntry('DocumentPart', TDocumentPart);
  BoldObjectClasses.AddObjectEntry('Person', TPerson);
  BoldObjectClasses.AddObjectEntry('Project', TProject);
  BoldObjectClasses.AddObjectEntry('Version', TVersion);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('DocumentClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 