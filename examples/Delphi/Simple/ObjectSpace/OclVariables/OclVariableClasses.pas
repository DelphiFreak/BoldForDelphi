(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:55:54         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit OclVariableClasses;

{$DEFINE OclVariableClasses_unitheader}
{$INCLUDE OclVariableClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TGlobalSettings }

function TGlobalSettings._Get_M_vat: TBAFloat;
begin
  assert(ValidateMember('TGlobalSettings', 'vat', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TGlobalSettings._Getvat: double;
begin
  Result := M_vat.AsFloat;
end;

procedure TGlobalSettings._Setvat(NewValue: double);
begin
  M_vat.AsFloat := NewValue;
end;

procedure TGlobalSettingsList.Add(NewObject: TGlobalSettings);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TGlobalSettingsList.IndexOf(anObject: TGlobalSettings): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TGlobalSettingsList.Includes(anObject: TGlobalSettings) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TGlobalSettingsList.AddNew: TGlobalSettings;
begin
  result := TGlobalSettings(InternalAddNew);
end;

procedure TGlobalSettingsList.Insert(index: Integer; NewObject: TGlobalSettings);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TGlobalSettingsList.GetBoldObject(index: Integer): TGlobalSettings;
begin
  result := TGlobalSettings(GetElement(index));
end;

procedure TGlobalSettingsList.SetBoldObject(index: Integer; NewObject: TGlobalSettings);
begin;
  SetElement(index, NewObject);
end;

{ TProduct }

function TProduct._Get_M_prodName: TBAString;
begin
  assert(ValidateMember('TProduct', 'prodName', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TProduct._GetprodName: String;
begin
  Result := M_prodName.AsString;
end;

procedure TProduct._SetprodName(NewValue: String);
begin
  M_prodName.AsString := NewValue;
end;

function TProduct._Get_M_net_Price: TBACurrency;
begin
  assert(ValidateMember('TProduct', 'net_Price', 1, TBACurrency));
  Result := TBACurrency(BoldMembers[1]);
end;

function TProduct._Getnet_Price: Currency;
begin
  Result := M_net_Price.AsCurrency;
end;

procedure TProduct._Setnet_Price(NewValue: Currency);
begin
  M_net_Price.AsCurrency := NewValue;
end;

procedure TProductList.Add(NewObject: TProduct);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProductList.IndexOf(anObject: TProduct): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProductList.Includes(anObject: TProduct) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProductList.AddNew: TProduct;
begin
  result := TProduct(InternalAddNew);
end;

procedure TProductList.Insert(index: Integer; NewObject: TProduct);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProductList.GetBoldObject(index: Integer): TProduct;
begin
  result := TProduct(GetElement(index));
end;

procedure TProductList.SetBoldObject(index: Integer; NewObject: TProduct);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '379036377';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('GlobalSettings', TGlobalSettingsList);
  BoldObjectListClasses.AddObjectEntry('Product', TProductList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('GlobalSettings', TGlobalSettings);
  BoldObjectClasses.AddObjectEntry('Product', TProduct);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('OclVariableClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 