(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:08:59         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit QueryDemoClasses;

{$DEFINE QueryDemoClasses_unitheader}
{$INCLUDE QueryDemoClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE QueryDemoClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TThing }

function TThing._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TThing', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TThing._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TThing._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

function TThing._Get_M_partof: TBoldObjectReference;
begin
  assert(ValidateMember('TThing', 'partof', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TThing._Getpartof: TThing;
begin
  assert(not assigned(M_partof.BoldObject) or (M_partof.BoldObject is TThing), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'partof', M_partof.BoldObject.ClassName, 'TThing']));
  Result := TThing(M_partof.BoldObject);
end;

procedure TThing._Setpartof(value: TThing);
begin
  M_partof.BoldObject := value;
end;

function TThing._Getparts: TThingList;
begin
  assert(ValidateMember('TThing', 'parts', 2, TThingList));
  Result := TThingList(BoldMembers[2]);
end;

procedure TThingList.Add(NewObject: TThing);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TThingList.IndexOf(anObject: TThing): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TThingList.Includes(anObject: TThing) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TThingList.AddNew: TThing;
begin
  result := TThing(InternalAddNew);
end;

procedure TThingList.Insert(index: Integer; NewObject: TThing);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TThingList.GetBoldObject(index: Integer): TThing;
begin
  result := TThing(GetElement(index));
end;

procedure TThingList.SetBoldObject(index: Integer; NewObject: TThing);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '101090197';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Thing', TThingList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Thing', TThing);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('QueryDemoClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 