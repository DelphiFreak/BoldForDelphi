(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:34:27         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF DataSetExampleClasses_Interface.inc}
{$DEFINE DataSetExampleClasses_Interface.inc}

{$IFNDEF DataSetExampleClasses_unitheader}
unit DataSetExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TBuilding = class;
  TBuildingList = class;
  TPerson = class;
  TPersonList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TBuilding = class(TBusinessClassesRoot)
  private
    function _Get_M_ZipCode: TBAInteger;
    function _GetZipCode: Integer;
    procedure _SetZipCode(NewValue: Integer);
    function _Get_M_Address: TBAString;
    function _GetAddress: String;
    procedure _SetAddress(NewValue: String);
    function _GetResidents: TPersonList;
  protected
  public
    procedure CompleteCreate; override;
    property M_ZipCode: TBAInteger read _Get_M_ZipCode;
    property M_Address: TBAString read _Get_M_Address;
    property M_Residents: TPersonList read _GetResidents;
    property ZipCode: Integer read _GetZipCode write _SetZipCode;
    property Address: String read _GetAddress write _SetAddress;
    property Residents: TPersonList read _GetResidents;
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_FirstName: TBAString;
    function _GetFirstName: String;
    procedure _SetFirstName(NewValue: String);
    function _Get_M_LastName: TBAString;
    function _GetLastName: String;
    procedure _SetLastName(NewValue: String);
    function _GetHome: TBuilding;
    function _Get_M_Home: TBoldObjectReference;
    procedure _SetHome(value: TBuilding);
  protected
  public
    procedure CompleteCreate; override;
    property M_FirstName: TBAString read _Get_M_FirstName;
    property M_LastName: TBAString read _Get_M_LastName;
    property M_Home: TBoldObjectReference read _Get_M_Home;
    property FirstName: String read _GetFirstName write _SetFirstName;
    property LastName: String read _GetLastName write _SetLastName;
    property Home: TBuilding read _GetHome write _SetHome;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TBuildingList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TBuilding;
    procedure SetBoldObject(index: Integer; NewObject: TBuilding);
  public
    function Includes(anObject: TBuilding): Boolean;
    function IndexOf(anObject: TBuilding): Integer;
    procedure Add(NewObject: TBuilding);
    function AddNew: TBuilding;
    procedure Insert(index: Integer; NewObject: TBuilding);
    property BoldObjects[index: Integer]: TBuilding read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 