(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:14:47         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF SQLHandleClasses_Interface.inc}
{$DEFINE SQLHandleClasses_Interface.inc}

{$IFNDEF SQLHandleClasses_unitheader}
unit SQLHandleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TSQLHandleClassesRoot = class;
  TSQLHandleClassesRootList = class;
  TBuilding = class;
  TBuildingList = class;
  TOwnership = class;
  TOwnershipList = class;
  TPerson = class;
  TPersonList = class;

  TSQLHandleClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TBuilding = class(TSQLHandleClassesRoot)
  private
    function _Get_M_Address: TBAString;
    function _GetAddress: String;
    procedure _SetAddress(NewValue: String);
    function _Get_M_TotalRent: TBACurrency;
    function _GetTotalRent: Currency;
    procedure _SetTotalRent(NewValue: Currency);
    function _GetOwners: TPersonList;
    function _GetOwnership: TOwnershipList;
    function _GetResidents: TPersonList;
    property M_Address: TBAString read _Get_M_Address;
    property M_TotalRent: TBACurrency read _Get_M_TotalRent;
    property M_Owners: TPersonList read _GetOwners;
    property M_Ownership: TOwnershipList read _GetOwnership;
    property M_Residents: TPersonList read _GetResidents;
    property Address: String read _GetAddress write _SetAddress;
    property TotalRent: Currency read _GetTotalRent write _SetTotalRent;
    property Owners: TPersonList read _GetOwners;
    property Ownership: TOwnershipList read _GetOwnership;
    property Residents: TPersonList read _GetResidents;
  protected
  public
  end;

  TOwnership = class(TSQLHandleClassesRoot)
  private
    function _GetOwners: TPerson;
    function _Get_M_Owners: TBoldObjectReference;
    function _GetOwnedBuildings: TBuilding;
    function _Get_M_OwnedBuildings: TBoldObjectReference;
    property M_Owners: TBoldObjectReference read _Get_M_Owners;
    property M_OwnedBuildings: TBoldObjectReference read _Get_M_OwnedBuildings;
    property Owners: TPerson read _GetOwners;
    property OwnedBuildings: TBuilding read _GetOwnedBuildings;
  protected
  public
  end;

  TPerson = class(TSQLHandleClassesRoot)
  private
    function _Get_M_Assets: TBACurrency;
    function _GetAssets: Currency;
    procedure _SetAssets(NewValue: Currency);
    function _Get_M_FirstName: TBAString;
    function _GetFirstName: String;
    procedure _SetFirstName(NewValue: String);
    function _Get_M_LastName: TBAString;
    function _GetLastName: String;
    procedure _SetLastName(NewValue: String);
    function _GetOwnedBuildings: TBuildingList;
    function _GetOwnership: TOwnershipList;
    function _GetHome: TBuilding;
    function _Get_M_Home: TBoldObjectReference;
    procedure _SetHome(value: TBuilding);
    property M_OwnedBuildings: TBuildingList read _GetOwnedBuildings;
    property M_Ownership: TOwnershipList read _GetOwnership;
    property M_Home: TBoldObjectReference read _Get_M_Home;
    property OwnedBuildings: TBuildingList read _GetOwnedBuildings;
    property Ownership: TOwnershipList read _GetOwnership;
    property Home: TBuilding read _GetHome write _SetHome;
  protected
  public
    property M_Assets: TBACurrency read _Get_M_Assets;
    property M_FirstName: TBAString read _Get_M_FirstName;
    property M_LastName: TBAString read _Get_M_LastName;
    property Assets: Currency read _GetAssets write _SetAssets;
    property FirstName: String read _GetFirstName write _SetFirstName;
    property LastName: String read _GetLastName write _SetLastName;
  end;

  TSQLHandleClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TSQLHandleClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TSQLHandleClassesRoot);
  public
    function Includes(anObject: TSQLHandleClassesRoot): Boolean;
    function IndexOf(anObject: TSQLHandleClassesRoot): Integer;
    procedure Add(NewObject: TSQLHandleClassesRoot);
    function AddNew: TSQLHandleClassesRoot;
    procedure Insert(index: Integer; NewObject: TSQLHandleClassesRoot);
    property BoldObjects[index: Integer]: TSQLHandleClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TBuildingList = class(TSQLHandleClassesRootList)
  protected
    function GetBoldObject(index: Integer): TBuilding;
    procedure SetBoldObject(index: Integer; NewObject: TBuilding);
  public
    function Includes(anObject: TBuilding): Boolean;
    function IndexOf(anObject: TBuilding): Integer;
    procedure Add(NewObject: TBuilding);
    function AddNew: TBuilding;
    procedure Insert(index: Integer; NewObject: TBuilding);
    property BoldObjects[index: Integer]: TBuilding read GetBoldObject write SetBoldObject; default;
  end;

  TOwnershipList = class(TSQLHandleClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOwnership;
    procedure SetBoldObject(index: Integer; NewObject: TOwnership);
  public
    function Includes(anObject: TOwnership): Boolean;
    function IndexOf(anObject: TOwnership): Integer;
    procedure Add(NewObject: TOwnership);
    function AddNew: TOwnership;
    procedure Insert(index: Integer; NewObject: TOwnership);
    property BoldObjects[index: Integer]: TOwnership read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TSQLHandleClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 