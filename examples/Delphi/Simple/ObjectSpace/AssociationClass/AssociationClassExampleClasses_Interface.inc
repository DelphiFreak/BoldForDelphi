(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:23:11         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF AssociationClassExampleClasses_Interface.inc}
{$DEFINE AssociationClassExampleClasses_Interface.inc}

{$IFNDEF AssociationClassExampleClasses_unitheader}
unit AssociationClassExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TCompany = class;
  TCompanyList = class;
  TEmployee = class;
  TEmployeeList = class;
  TJob = class;
  TJobList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TCompany = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    function _GetEmployee: TEmployeeList;
    function _GetJob: TJobList;
  protected
  public
    procedure CompleteCreate; override;
    property M_name: TBAString read _Get_M_name;
    property M_Employee: TEmployeeList read _GetEmployee;
    property M_Job: TJobList read _GetJob;
    property name: String read _Getname write _Setname;
    property Employee: TEmployeeList read _GetEmployee;
    property Job: TJobList read _GetJob;
  end;

  TEmployee = class(TBusinessClassesRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    function _GetEmployer: TCompanyList;
    function _GetJob: TJobList;
  protected
  public
    procedure CompleteCreate; override;
    property M_name: TBAString read _Get_M_name;
    property M_Employer: TCompanyList read _GetEmployer;
    property M_Job: TJobList read _GetJob;
    property name: String read _Getname write _Setname;
    property Employer: TCompanyList read _GetEmployer;
    property Job: TJobList read _GetJob;
  end;

  TJob = class(TBusinessClassesRoot)
  private
    function _Get_M_title: TBAString;
    function _Gettitle: String;
    procedure _Settitle(NewValue: String);
    function _Get_M_salary: TBACurrency;
    function _Getsalary: Currency;
    procedure _Setsalary(NewValue: Currency);
    function _GetEmployee: TEmployee;
    function _Get_M_Employee: TBoldObjectReference;
    function _GetEmployer: TCompany;
    function _Get_M_Employer: TBoldObjectReference;
  protected
  public
    procedure CompleteCreate; override;
    property M_title: TBAString read _Get_M_title;
    property M_salary: TBACurrency read _Get_M_salary;
    property M_Employee: TBoldObjectReference read _Get_M_Employee;
    property M_Employer: TBoldObjectReference read _Get_M_Employer;
    property title: String read _Gettitle write _Settitle;
    property salary: Currency read _Getsalary write _Setsalary;
    property Employee: TEmployee read _GetEmployee;
    property Employer: TCompany read _GetEmployer;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TCompanyList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TCompany;
    procedure SetBoldObject(index: Integer; NewObject: TCompany);
  public
    function Includes(anObject: TCompany): Boolean;
    function IndexOf(anObject: TCompany): Integer;
    procedure Add(NewObject: TCompany);
    function AddNew: TCompany;
    procedure Insert(index: Integer; NewObject: TCompany);
    property BoldObjects[index: Integer]: TCompany read GetBoldObject write SetBoldObject; default;
  end;

  TEmployeeList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TEmployee;
    procedure SetBoldObject(index: Integer; NewObject: TEmployee);
  public
    function Includes(anObject: TEmployee): Boolean;
    function IndexOf(anObject: TEmployee): Integer;
    procedure Add(NewObject: TEmployee);
    function AddNew: TEmployee;
    procedure Insert(index: Integer; NewObject: TEmployee);
    property BoldObjects[index: Integer]: TEmployee read GetBoldObject write SetBoldObject; default;
  end;

  TJobList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TJob;
    procedure SetBoldObject(index: Integer; NewObject: TJob);
  public
    function Includes(anObject: TJob): Boolean;
    function IndexOf(anObject: TJob): Integer;
    procedure Add(NewObject: TJob);
    function AddNew: TJob;
    procedure Insert(index: Integer; NewObject: TJob);
    property BoldObjects[index: Integer]: TJob read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

