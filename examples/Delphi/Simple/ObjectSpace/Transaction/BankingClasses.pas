(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:20:01         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BankingClasses;

{$DEFINE BankingClasses_unitheader}
{$INCLUDE BankingClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE BankingClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBankingClassesRoot }

procedure TBankingClassesRootList.Add(NewObject: TBankingClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBankingClassesRootList.IndexOf(anObject: TBankingClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBankingClassesRootList.Includes(anObject: TBankingClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBankingClassesRootList.AddNew: TBankingClassesRoot;
begin
  result := TBankingClassesRoot(InternalAddNew);
end;

procedure TBankingClassesRootList.Insert(index: Integer; NewObject: TBankingClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBankingClassesRootList.GetBoldObject(index: Integer): TBankingClassesRoot;
begin
  result := TBankingClassesRoot(GetElement(index));
end;

procedure TBankingClassesRootList.SetBoldObject(index: Integer; NewObject: TBankingClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TAccount }

function TAccount._Get_M_Total: TBAInteger;
begin
  assert(ValidateMember('TAccount', 'Total', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TAccount._GetTotal: Integer;
begin
  Result := M_Total.AsInteger;
end;

procedure TAccount._SetTotal(NewValue: Integer);
begin
  M_Total.AsInteger := NewValue;
end;

function TAccount._Get_M_Number: TBAString;
begin
  assert(ValidateMember('TAccount', 'Number', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TAccount._GetNumber: String;
begin
  Result := M_Number.AsString;
end;

procedure TAccount._SetNumber(NewValue: String);
begin
  M_Number.AsString := NewValue;
end;

function TAccount._Get_M_Credit: TBAInteger;
begin
  assert(ValidateMember('TAccount', 'Credit', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TAccount._GetCredit: Integer;
begin
  Result := M_Credit.AsInteger;
end;

procedure TAccount._SetCredit(NewValue: Integer);
begin
  M_Credit.AsInteger := NewValue;
end;

function TAccount._Gettransfer1: TTransferList;
begin
  assert(ValidateMember('TAccount', 'transfer1', 3, TTransferList));
  Result := TTransferList(BoldMembers[3]);
end;

function TAccount._Gettransfer2: TTransferList;
begin
  assert(ValidateMember('TAccount', 'transfer2', 4, TTransferList));
  Result := TTransferList(BoldMembers[4]);
end;

function TAccount._Get_M_close: TBoldObjectReference;
begin
  assert(ValidateMember('TAccount', 'close', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TAccount._Getclose: TClose;
begin
  assert(not assigned(M_close.BoldObject) or (M_close.BoldObject is TClose), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'close', M_close.BoldObject.ClassName, 'TClose']));
  Result := TClose(M_close.BoldObject);
end;

procedure TAccount._Setclose(value: TClose);
begin
  M_close.BoldObject := value;
end;

function TAccount._Get_M_modifyCredit: TBoldObjectReference;
begin
  assert(ValidateMember('TAccount', 'modifyCredit', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TAccount._GetmodifyCredit: TModifyCredit;
begin
  assert(not assigned(M_modifyCredit.BoldObject) or (M_modifyCredit.BoldObject is TModifyCredit), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'modifyCredit', M_modifyCredit.BoldObject.ClassName, 'TModifyCredit']));
  Result := TModifyCredit(M_modifyCredit.BoldObject);
end;

procedure TAccount._SetmodifyCredit(value: TModifyCredit);
begin
  M_modifyCredit.BoldObject := value;
end;

procedure TAccountList.Add(NewObject: TAccount);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TAccountList.IndexOf(anObject: TAccount): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TAccountList.Includes(anObject: TAccount) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TAccountList.AddNew: TAccount;
begin
  result := TAccount(InternalAddNew);
end;

procedure TAccountList.Insert(index: Integer; NewObject: TAccount);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TAccountList.GetBoldObject(index: Integer): TAccount;
begin
  result := TAccount(GetElement(index));
end;

procedure TAccountList.SetBoldObject(index: Integer; NewObject: TAccount);
begin;
  SetElement(index, NewObject);
end;

{ TRequest }

procedure TRequestList.Add(NewObject: TRequest);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRequestList.IndexOf(anObject: TRequest): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRequestList.Includes(anObject: TRequest) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRequestList.AddNew: TRequest;
begin
  result := TRequest(InternalAddNew);
end;

procedure TRequestList.Insert(index: Integer; NewObject: TRequest);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRequestList.GetBoldObject(index: Integer): TRequest;
begin
  result := TRequest(GetElement(index));
end;

procedure TRequestList.SetBoldObject(index: Integer; NewObject: TRequest);
begin;
  SetElement(index, NewObject);
end;

{ TClose }

function TClose._Get_M_account: TBoldObjectReference;
begin
  assert(ValidateMember('TClose', 'account', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TClose._Getaccount: TAccount;
begin
  assert(not assigned(M_account.BoldObject) or (M_account.BoldObject is TAccount), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'account', M_account.BoldObject.ClassName, 'TAccount']));
  Result := TAccount(M_account.BoldObject);
end;

procedure TClose._Setaccount(value: TAccount);
begin
  M_account.BoldObject := value;
end;

procedure TCloseList.Add(NewObject: TClose);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TCloseList.IndexOf(anObject: TClose): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TCloseList.Includes(anObject: TClose) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TCloseList.AddNew: TClose;
begin
  result := TClose(InternalAddNew);
end;

procedure TCloseList.Insert(index: Integer; NewObject: TClose);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TCloseList.GetBoldObject(index: Integer): TClose;
begin
  result := TClose(GetElement(index));
end;

procedure TCloseList.SetBoldObject(index: Integer; NewObject: TClose);
begin;
  SetElement(index, NewObject);
end;

{ TModifyCredit }

function TModifyCredit._Get_M_NewCredit: TBAInteger;
begin
  assert(ValidateMember('TModifyCredit', 'NewCredit', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TModifyCredit._GetNewCredit: Integer;
begin
  Result := M_NewCredit.AsInteger;
end;

procedure TModifyCredit._SetNewCredit(NewValue: Integer);
begin
  M_NewCredit.AsInteger := NewValue;
end;

function TModifyCredit._Get_M_account: TBoldObjectReference;
begin
  assert(ValidateMember('TModifyCredit', 'account', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TModifyCredit._Getaccount: TAccount;
begin
  assert(not assigned(M_account.BoldObject) or (M_account.BoldObject is TAccount), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'account', M_account.BoldObject.ClassName, 'TAccount']));
  Result := TAccount(M_account.BoldObject);
end;

procedure TModifyCredit._Setaccount(value: TAccount);
begin
  M_account.BoldObject := value;
end;

procedure TModifyCreditList.Add(NewObject: TModifyCredit);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TModifyCreditList.IndexOf(anObject: TModifyCredit): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TModifyCreditList.Includes(anObject: TModifyCredit) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TModifyCreditList.AddNew: TModifyCredit;
begin
  result := TModifyCredit(InternalAddNew);
end;

procedure TModifyCreditList.Insert(index: Integer; NewObject: TModifyCredit);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TModifyCreditList.GetBoldObject(index: Integer): TModifyCredit;
begin
  result := TModifyCredit(GetElement(index));
end;

procedure TModifyCreditList.SetBoldObject(index: Integer; NewObject: TModifyCredit);
begin;
  SetElement(index, NewObject);
end;

{ TTransfer }

function TTransfer._Get_M_Amount: TBAInteger;
begin
  assert(ValidateMember('TTransfer', 'Amount', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TTransfer._GetAmount: Integer;
begin
  Result := M_Amount.AsInteger;
end;

procedure TTransfer._SetAmount(NewValue: Integer);
begin
  M_Amount.AsInteger := NewValue;
end;

function TTransfer._Get_M_Source: TBoldObjectReference;
begin
  assert(ValidateMember('TTransfer', 'Source', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TTransfer._GetSource: TAccount;
begin
  assert(not assigned(M_Source.BoldObject) or (M_Source.BoldObject is TAccount), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Source', M_Source.BoldObject.ClassName, 'TAccount']));
  Result := TAccount(M_Source.BoldObject);
end;

procedure TTransfer._SetSource(value: TAccount);
begin
  M_Source.BoldObject := value;
end;

function TTransfer._Get_M_Target: TBoldObjectReference;
begin
  assert(ValidateMember('TTransfer', 'Target', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TTransfer._GetTarget: TAccount;
begin
  assert(not assigned(M_Target.BoldObject) or (M_Target.BoldObject is TAccount), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Target', M_Target.BoldObject.ClassName, 'TAccount']));
  Result := TAccount(M_Target.BoldObject);
end;

procedure TTransfer._SetTarget(value: TAccount);
begin
  M_Target.BoldObject := value;
end;

procedure TTransferList.Add(NewObject: TTransfer);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTransferList.IndexOf(anObject: TTransfer): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTransferList.Includes(anObject: TTransfer) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTransferList.AddNew: TTransfer;
begin
  result := TTransfer(InternalAddNew);
end;

procedure TTransferList.Insert(index: Integer; NewObject: TTransfer);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTransferList.GetBoldObject(index: Integer): TTransfer;
begin
  result := TTransfer(GetElement(index));
end;

procedure TTransferList.SetBoldObject(index: Integer; NewObject: TTransfer);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '478075486';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BankingClassesRoot', TBankingClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Account', TAccountList);
  BoldObjectListClasses.AddObjectEntry('Request', TRequestList);
  BoldObjectListClasses.AddObjectEntry('Close', TCloseList);
  BoldObjectListClasses.AddObjectEntry('ModifyCredit', TModifyCreditList);
  BoldObjectListClasses.AddObjectEntry('Transfer', TTransferList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BankingClassesRoot', TBankingClassesRoot);
  BoldObjectClasses.AddObjectEntry('Account', TAccount);
  BoldObjectClasses.AddObjectEntry('Request', TRequest);
  BoldObjectClasses.AddObjectEntry('Close', TClose);
  BoldObjectClasses.AddObjectEntry('ModifyCredit', TModifyCredit);
  BoldObjectClasses.AddObjectEntry('Transfer', TTransfer);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BankingClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

