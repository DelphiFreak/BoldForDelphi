(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:20:01         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BankingClasses_Interface.inc}
{$DEFINE BankingClasses_Interface.inc}

{$IFNDEF BankingClasses_unitheader}
unit BankingClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBankingClassesRoot = class;
  TBankingClassesRootList = class;
  TAccount = class;
  TAccountList = class;
  TRequest = class;
  TRequestList = class;
  TClose = class;
  TCloseList = class;
  TModifyCredit = class;
  TModifyCreditList = class;
  TTransfer = class;
  TTransferList = class;

  TBankingClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TAccount = class(TBankingClassesRoot)
  private
    function _Get_M_Total: TBAInteger;
    function _GetTotal: Integer;
    procedure _SetTotal(NewValue: Integer);
    function _Get_M_Number: TBAString;
    function _GetNumber: String;
    procedure _SetNumber(NewValue: String);
    function _Get_M_Credit: TBAInteger;
    function _GetCredit: Integer;
    procedure _SetCredit(NewValue: Integer);
    function _Gettransfer1: TTransferList;
    function _Gettransfer2: TTransferList;
    function _Getclose: TClose;
    function _Get_M_close: TBoldObjectReference;
    procedure _Setclose(value: TClose);
    function _GetmodifyCredit: TModifyCredit;
    function _Get_M_modifyCredit: TBoldObjectReference;
    procedure _SetmodifyCredit(value: TModifyCredit);
  protected
  public
    function ReceiveQueryFromOwned(Originator: TObject; OriginalEvent: TBoldEvent; const Args: array of const; Subscriber: TBoldSubscriber): Boolean; override;
    function MayDelete: Boolean; override;
    property M_Total: TBAInteger read _Get_M_Total;
    property M_Number: TBAString read _Get_M_Number;
    property M_Credit: TBAInteger read _Get_M_Credit;
    property M_transfer1: TTransferList read _Gettransfer1;
    property M_transfer2: TTransferList read _Gettransfer2;
    property M_close: TBoldObjectReference read _Get_M_close;
    property M_modifyCredit: TBoldObjectReference read _Get_M_modifyCredit;
    property Total: Integer read _GetTotal write _SetTotal;
    property Number: String read _GetNumber write _SetNumber;
    property Credit: Integer read _GetCredit write _SetCredit;
    property transfer1: TTransferList read _Gettransfer1;
    property transfer2: TTransferList read _Gettransfer2;
    property close: TClose read _Getclose write _Setclose;
    property modifyCredit: TModifyCredit read _GetmodifyCredit write _SetmodifyCredit;
  end;

  TRequest = class(TBankingClassesRoot)
  private
  protected
  public
    procedure Perform; virtual; abstract;
  end;

  TClose = class(TRequest)
  private
    function _Getaccount: TAccount;
    function _Get_M_account: TBoldObjectReference;
    procedure _Setaccount(value: TAccount);
  protected
  public
    procedure Perform; override;
    property M_account: TBoldObjectReference read _Get_M_account;
    property account: TAccount read _Getaccount write _Setaccount;
  end;

  TModifyCredit = class(TRequest)
  private
    function _Get_M_NewCredit: TBAInteger;
    function _GetNewCredit: Integer;
    procedure _SetNewCredit(NewValue: Integer);
    function _Getaccount: TAccount;
    function _Get_M_account: TBoldObjectReference;
    procedure _Setaccount(value: TAccount);
  protected
  public
    procedure Perform; override;
    property M_NewCredit: TBAInteger read _Get_M_NewCredit;
    property M_account: TBoldObjectReference read _Get_M_account;
    property NewCredit: Integer read _GetNewCredit write _SetNewCredit;
    property account: TAccount read _Getaccount write _Setaccount;
  end;

  TTransfer = class(TRequest)
  private
    function _Get_M_Amount: TBAInteger;
    function _GetAmount: Integer;
    procedure _SetAmount(NewValue: Integer);
    function _GetSource: TAccount;
    function _Get_M_Source: TBoldObjectReference;
    procedure _SetSource(value: TAccount);
    function _GetTarget: TAccount;
    function _Get_M_Target: TBoldObjectReference;
    procedure _SetTarget(value: TAccount);
  protected
  public
    procedure Perform; override;
    property M_Amount: TBAInteger read _Get_M_Amount;
    property M_Source: TBoldObjectReference read _Get_M_Source;
    property M_Target: TBoldObjectReference read _Get_M_Target;
    property Amount: Integer read _GetAmount write _SetAmount;
    property Source: TAccount read _GetSource write _SetSource;
    property Target: TAccount read _GetTarget write _SetTarget;
  end;

  TBankingClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBankingClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBankingClassesRoot);
  public
    function Includes(anObject: TBankingClassesRoot): Boolean;
    function IndexOf(anObject: TBankingClassesRoot): Integer;
    procedure Add(NewObject: TBankingClassesRoot);
    function AddNew: TBankingClassesRoot;
    procedure Insert(index: Integer; NewObject: TBankingClassesRoot);
    property BoldObjects[index: Integer]: TBankingClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TAccountList = class(TBankingClassesRootList)
  protected
    function GetBoldObject(index: Integer): TAccount;
    procedure SetBoldObject(index: Integer; NewObject: TAccount);
  public
    function Includes(anObject: TAccount): Boolean;
    function IndexOf(anObject: TAccount): Integer;
    procedure Add(NewObject: TAccount);
    function AddNew: TAccount;
    procedure Insert(index: Integer; NewObject: TAccount);
    property BoldObjects[index: Integer]: TAccount read GetBoldObject write SetBoldObject; default;
  end;

  TRequestList = class(TBankingClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRequest;
    procedure SetBoldObject(index: Integer; NewObject: TRequest);
  public
    function Includes(anObject: TRequest): Boolean;
    function IndexOf(anObject: TRequest): Integer;
    procedure Add(NewObject: TRequest);
    function AddNew: TRequest;
    procedure Insert(index: Integer; NewObject: TRequest);
    property BoldObjects[index: Integer]: TRequest read GetBoldObject write SetBoldObject; default;
  end;

  TCloseList = class(TRequestList)
  protected
    function GetBoldObject(index: Integer): TClose;
    procedure SetBoldObject(index: Integer; NewObject: TClose);
  public
    function Includes(anObject: TClose): Boolean;
    function IndexOf(anObject: TClose): Integer;
    procedure Add(NewObject: TClose);
    function AddNew: TClose;
    procedure Insert(index: Integer; NewObject: TClose);
    property BoldObjects[index: Integer]: TClose read GetBoldObject write SetBoldObject; default;
  end;

  TModifyCreditList = class(TRequestList)
  protected
    function GetBoldObject(index: Integer): TModifyCredit;
    procedure SetBoldObject(index: Integer; NewObject: TModifyCredit);
  public
    function Includes(anObject: TModifyCredit): Boolean;
    function IndexOf(anObject: TModifyCredit): Integer;
    procedure Add(NewObject: TModifyCredit);
    function AddNew: TModifyCredit;
    procedure Insert(index: Integer; NewObject: TModifyCredit);
    property BoldObjects[index: Integer]: TModifyCredit read GetBoldObject write SetBoldObject; default;
  end;

  TTransferList = class(TRequestList)
  protected
    function GetBoldObject(index: Integer): TTransfer;
    procedure SetBoldObject(index: Integer; NewObject: TTransfer);
  public
    function Includes(anObject: TTransfer): Boolean;
    function IndexOf(anObject: TTransfer): Integer;
    procedure Add(NewObject: TTransfer);
    function AddNew: TTransfer;
    procedure Insert(index: Integer; NewObject: TTransfer);
    property BoldObjects[index: Integer]: TTransfer read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

