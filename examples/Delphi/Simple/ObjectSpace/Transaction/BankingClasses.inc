{**********************************************************}
   {                                                          }
   {       Bold for Delphi Stub File                          }
   {                                                          }
   {       Autogenerated file for method implementations      }
   {                                                          }
   {**********************************************************}

// 
{$INCLUDE BankingClasses_Interface.inc}

function TAccount.ReceiveQueryFromOwned(Originator: TObject; OriginalEvent: TBoldEvent; const Args: array of const; Subscriber: TBoldSubscriber): Boolean;
begin
  result := inherited ReceiveQueryFromOwned(Originator, OriginalEvent, Args, Subscriber);

  if (OriginalEvent = bqMayCommit) and (Originator = M_Total) and
     (Total < -Credit) then
  begin
    result := false;
    SetBoldLastFailureReason(TBoldFailureReason.Create(Format('Account total is under credit limit for account %s', [number]), self));
  end;
end;


procedure TClose.Perform;
begin
  if not assigned(account) then
    BoldRaiseLastFailure(self, 'Perform', 'Close request without account');

  account.Delete;
end;


procedure TModifyCredit.Perform;
begin
  if not assigned(account) then
    BoldRaiseLastFailure(self, 'Perform', 'Modify credit request without account');

  account.Credit := NewCredit;
end;



procedure TTransfer.Perform;
begin
  if not assigned(source) then
    BoldRaiseLastFailure(self, 'Perform', 'Transfer request without source');
  if not assigned(target) then
    BoldRaiseLastFailure(self, 'Perform', 'Transfer request without target');

  source.Total := Source.Total - Amount;
  Target.Total := Target.Total + Amount;
end;



function TAccount.MayDelete: Boolean;
begin
  result := (Total = 0);
  if not result then
    SetBoldLastFailureReason(TBoldFailureReason.create('Can not delete an account unless the total is 0', self));
end;

