(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:31:13         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit CustAttrExampleClasses;

{$DEFINE CustAttrExampleClasses_unitheader}
{$INCLUDE CustAttrExampleClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE CustAttrExampleClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TTestClass }

function TTestClass._Get_M_shortString: TBAShortString;
begin
  assert(ValidateMember('TTestClass', 'shortString', 0, TBAShortString));
  Result := TBAShortString(BoldMembers[0]);
end;

function TTestClass._GetshortString: String;
begin
  Result := M_shortString.asString;
end;

procedure TTestClass._SetshortString(NewValue: String);
begin
  M_shortString.asString := NewValue;
end;

function TTestClass._Get_M_coordinate: TBACoordinate;
begin
  assert(ValidateMember('TTestClass', 'coordinate', 1, TBACoordinate));
  Result := TBACoordinate(BoldMembers[1]);
end;

function TTestClass._Get_M_swedishSocSec: TBASwedishSocSec;
begin
  assert(ValidateMember('TTestClass', 'swedishSocSec', 2, TBASwedishSocSec));
  Result := TBASwedishSocSec(BoldMembers[2]);
end;

function TTestClass._GetswedishSocSec: String;
begin
  Result := M_swedishSocSec.asString;
end;

procedure TTestClass._SetswedishSocSec(NewValue: String);
begin
  M_swedishSocSec.asString := NewValue;
end;

function TTestClass._Get_M_budgetStatus: TBABudgetStatus;
begin
  assert(ValidateMember('TTestClass', 'budgetStatus', 3, TBABudgetStatus));
  Result := TBABudgetStatus(BoldMembers[3]);
end;

function TTestClass._GetbudgetStatus: TBudgetStatusEnum;
begin
  Result := M_budgetStatus.asBudgetStatus;
end;

procedure TTestClass._SetbudgetStatus(NewValue: TBudgetStatusEnum);
begin
  M_budgetStatus.asBudgetStatus := NewValue;
end;

function TTestClass._Get_M_name: TBAName;
begin
  assert(ValidateMember('TTestClass', 'name', 4, TBAName));
  Result := TBAName(BoldMembers[4]);
end;

function TTestClass._Getname: String;
begin
  Result := M_name.asString;
end;

procedure TTestClass._Setname(NewValue: String);
begin
  M_name.asString := NewValue;
end;

procedure TTestClassList.Add(NewObject: TTestClass);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTestClassList.IndexOf(anObject: TTestClass): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTestClassList.Includes(anObject: TTestClass) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTestClassList.AddNew: TTestClass;
begin
  result := TTestClass(InternalAddNew);
end;

procedure TTestClassList.Insert(index: Integer; NewObject: TTestClass);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTestClassList.GetBoldObject(index: Integer): TTestClass;
begin
  result := TTestClass(GetElement(index));
end;

procedure TTestClassList.SetBoldObject(index: Integer; NewObject: TTestClass);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1984067415';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('TestClass', TTestClassList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('TestClass', TTestClass);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('CustAttrExampleClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 