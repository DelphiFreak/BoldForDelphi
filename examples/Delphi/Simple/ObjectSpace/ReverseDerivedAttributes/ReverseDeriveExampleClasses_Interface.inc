(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:11:11         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ReverseDeriveExampleClasses_Interface.inc}
{$DEFINE ReverseDeriveExampleClasses_Interface.inc}

{$IFNDEF ReverseDeriveExampleClasses_unitheader}
unit ReverseDeriveExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TFamily = class;
  TFamilyList = class;
  TFont = class;
  TFontList = class;
  TPerson = class;
  TPersonList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TFamily = class(TBusinessClassesRoot)
  private
    function _Get_M_familyName: TBAString;
    function _GetfamilyName: String;
    procedure _SetfamilyName(NewValue: String);
    function _GetfamilyMembers: TPersonList;
  protected
  public
    class function FindByName(BoldSystem: TBoldSystem; familyName: string): TFamily; 
    property M_familyName: TBAString read _Get_M_familyName;
    property M_familyMembers: TPersonList read _GetfamilyMembers;
    property familyName: String read _GetfamilyName write _SetfamilyName;
    property familyMembers: TPersonList read _GetfamilyMembers;
  end;

  TFont = class(TBusinessClassesRoot)
  private
    function _Get_M_blink: TBABoolean;
    function _Getblink: Boolean;
    procedure _Setblink(NewValue: Boolean);
    function _Get_M_bold: TBABoolean;
    function _Getbold: Boolean;
    procedure _Setbold(NewValue: Boolean);
    function _Get_M_noValues: TBABoolean;
    function _GetnoValues: Boolean;
    procedure _SetnoValues(NewValue: Boolean);
    function _Get_M_underline: TBABoolean;
    function _Getunderline: Boolean;
    procedure _Setunderline(NewValue: Boolean);
    function _Get_M_resultString: TBAString;
    function _GetresultString: String;
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(NewValue: String);
    procedure SubscribeToAttributes(subscriber: TBoldSubscriber); 
  protected
    procedure _noValues_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _noValues_ReverseDerive(DerivedObject: TObject); virtual;
    procedure _resultString_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    procedure ResetAll; 
    property M_blink: TBABoolean read _Get_M_blink;
    property M_bold: TBABoolean read _Get_M_bold;
    property M_noValues: TBABoolean read _Get_M_noValues;
    property M_underline: TBABoolean read _Get_M_underline;
    property M_resultString: TBAString read _Get_M_resultString;
    property M_name: TBAString read _Get_M_name;
    property blink: Boolean read _Getblink write _Setblink;
    property bold: Boolean read _Getbold write _Setbold;
    property noValues: Boolean read _GetnoValues write _SetnoValues;
    property underline: Boolean read _Getunderline write _Setunderline;
    property resultString: String read _GetresultString;
    property name: String read _Getname write _Setname;
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_fullName: TBAString;
    function _GetfullName: String;
    procedure _SetfullName(NewValue: String);
    function _Get_M_firstName: TBAString;
    function _GetfirstName: String;
    procedure _SetfirstName(NewValue: String);
    function _Getfamily: TFamily;
    function _Get_M_family: TBoldObjectReference;
    procedure _Setfamily(value: TFamily);
  protected
    procedure _fullName_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    procedure _fullName_ReverseDerive(DerivedObject: TObject); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_fullName: TBAString read _Get_M_fullName;
    property M_firstName: TBAString read _Get_M_firstName;
    property M_family: TBoldObjectReference read _Get_M_family;
    property fullName: String read _GetfullName write _SetfullName;
    property firstName: String read _GetfirstName write _SetfirstName;
    property family: TFamily read _Getfamily write _Setfamily;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TFamilyList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TFamily;
    procedure SetBoldObject(index: Integer; NewObject: TFamily);
  public
    function Includes(anObject: TFamily): Boolean;
    function IndexOf(anObject: TFamily): Integer;
    procedure Add(NewObject: TFamily);
    function AddNew: TFamily;
    procedure Insert(index: Integer; NewObject: TFamily);
    property BoldObjects[index: Integer]: TFamily read GetBoldObject write SetBoldObject; default;
  end;

  TFontList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TFont;
    procedure SetBoldObject(index: Integer; NewObject: TFont);
  public
    function Includes(anObject: TFont): Boolean;
    function IndexOf(anObject: TFont): Integer;
    procedure Add(NewObject: TFont);
    function AddNew: TFont;
    procedure Insert(index: Integer; NewObject: TFont);
    property BoldObjects[index: Integer]: TFont read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 