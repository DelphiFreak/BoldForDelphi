(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:27:03         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF ParentChildMappingClasses_Interface.inc}
{$DEFINE ParentChildMappingClasses_Interface.inc}

{$IFNDEF ParentChildMappingClasses_unitheader}
unit ParentChildMappingClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TAircraft = class;
  TAircraftList = class;
  TVehicle = class;
  TVehicleList = class;
  TJet = class;
  TJetList = class;
  TProp = class;
  TPropList = class;
  TBus = class;
  TBusList = class;
  TTruck = class;
  TTruckList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TAircraft = class(TBusinessClassesRoot)
  private
    function _Get_M_Name: TBAString;
    function _GetName: String;
    procedure _SetName(NewValue: String);
  protected
  public
    property M_Name: TBAString read _Get_M_Name;
    property Name: String read _GetName write _SetName;
  end;

  TVehicle = class(TBusinessClassesRoot)
  private
    function _Get_M_Model: TBAString;
    function _GetModel: String;
    procedure _SetModel(NewValue: String);
  protected
  public
    property M_Model: TBAString read _Get_M_Model;
    property Model: String read _GetModel write _SetModel;
  end;

  TJet = class(TAircraft)
  private
    function _Get_M_ThrustVector: TBABoolean;
    function _GetThrustVector: Boolean;
    procedure _SetThrustVector(NewValue: Boolean);
  protected
  public
    procedure CompleteCreate; override;
    property M_ThrustVector: TBABoolean read _Get_M_ThrustVector;
    property ThrustVector: Boolean read _GetThrustVector write _SetThrustVector;
  end;

  TProp = class(TAircraft)
  private
    function _Get_M_NoOfBlades: TBAInteger;
    function _GetNoOfBlades: Integer;
    procedure _SetNoOfBlades(NewValue: Integer);
  protected
  public
    procedure CompleteCreate; override;
    property M_NoOfBlades: TBAInteger read _Get_M_NoOfBlades;
    property NoOfBlades: Integer read _GetNoOfBlades write _SetNoOfBlades;
  end;

  TBus = class(TVehicle)
  private
    function _Get_M_NoOfPassengers: TBAString;
    function _GetNoOfPassengers: String;
    procedure _SetNoOfPassengers(NewValue: String);
  protected
  public
    property M_NoOfPassengers: TBAString read _Get_M_NoOfPassengers;
    property NoOfPassengers: String read _GetNoOfPassengers write _SetNoOfPassengers;
  end;

  TTruck = class(TVehicle)
  private
    function _Get_M_MaxLoad: TBAString;
    function _GetMaxLoad: String;
    procedure _SetMaxLoad(NewValue: String);
  protected
  public
    property M_MaxLoad: TBAString read _Get_M_MaxLoad;
    property MaxLoad: String read _GetMaxLoad write _SetMaxLoad;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TAircraftList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TAircraft;
    procedure SetBoldObject(index: Integer; NewObject: TAircraft);
  public
    function Includes(anObject: TAircraft): Boolean;
    function IndexOf(anObject: TAircraft): Integer;
    procedure Add(NewObject: TAircraft);
    function AddNew: TAircraft;
    procedure Insert(index: Integer; NewObject: TAircraft);
    property BoldObjects[index: Integer]: TAircraft read GetBoldObject write SetBoldObject; default;
  end;

  TVehicleList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TVehicle;
    procedure SetBoldObject(index: Integer; NewObject: TVehicle);
  public
    function Includes(anObject: TVehicle): Boolean;
    function IndexOf(anObject: TVehicle): Integer;
    procedure Add(NewObject: TVehicle);
    function AddNew: TVehicle;
    procedure Insert(index: Integer; NewObject: TVehicle);
    property BoldObjects[index: Integer]: TVehicle read GetBoldObject write SetBoldObject; default;
  end;

  TJetList = class(TAircraftList)
  protected
    function GetBoldObject(index: Integer): TJet;
    procedure SetBoldObject(index: Integer; NewObject: TJet);
  public
    function Includes(anObject: TJet): Boolean;
    function IndexOf(anObject: TJet): Integer;
    procedure Add(NewObject: TJet);
    function AddNew: TJet;
    procedure Insert(index: Integer; NewObject: TJet);
    property BoldObjects[index: Integer]: TJet read GetBoldObject write SetBoldObject; default;
  end;

  TPropList = class(TAircraftList)
  protected
    function GetBoldObject(index: Integer): TProp;
    procedure SetBoldObject(index: Integer; NewObject: TProp);
  public
    function Includes(anObject: TProp): Boolean;
    function IndexOf(anObject: TProp): Integer;
    procedure Add(NewObject: TProp);
    function AddNew: TProp;
    procedure Insert(index: Integer; NewObject: TProp);
    property BoldObjects[index: Integer]: TProp read GetBoldObject write SetBoldObject; default;
  end;

  TBusList = class(TVehicleList)
  protected
    function GetBoldObject(index: Integer): TBus;
    procedure SetBoldObject(index: Integer; NewObject: TBus);
  public
    function Includes(anObject: TBus): Boolean;
    function IndexOf(anObject: TBus): Integer;
    procedure Add(NewObject: TBus);
    function AddNew: TBus;
    procedure Insert(index: Integer; NewObject: TBus);
    property BoldObjects[index: Integer]: TBus read GetBoldObject write SetBoldObject; default;
  end;

  TTruckList = class(TVehicleList)
  protected
    function GetBoldObject(index: Integer): TTruck;
    procedure SetBoldObject(index: Integer; NewObject: TTruck);
  public
    function Includes(anObject: TTruck): Boolean;
    function IndexOf(anObject: TTruck): Integer;
    procedure Add(NewObject: TTruck);
    function AddNew: TTruck;
    procedure Insert(index: Integer; NewObject: TTruck);
    property BoldObjects[index: Integer]: TTruck read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 