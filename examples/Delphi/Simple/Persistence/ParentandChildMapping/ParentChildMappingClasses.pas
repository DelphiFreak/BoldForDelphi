(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 16:27:02         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit ParentChildMappingClasses;

{$DEFINE ParentChildMappingClasses_unitheader}
{$INCLUDE ParentChildMappingClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE ParentChildMappingClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TAircraft }

function TAircraft._Get_M_Name: TBAString;
begin
  assert(ValidateMember('TAircraft', 'Name', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TAircraft._GetName: String;
begin
  Result := M_Name.AsString;
end;

procedure TAircraft._SetName(NewValue: String);
begin
  M_Name.AsString := NewValue;
end;

procedure TAircraftList.Add(NewObject: TAircraft);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TAircraftList.IndexOf(anObject: TAircraft): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TAircraftList.Includes(anObject: TAircraft) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TAircraftList.AddNew: TAircraft;
begin
  result := TAircraft(InternalAddNew);
end;

procedure TAircraftList.Insert(index: Integer; NewObject: TAircraft);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TAircraftList.GetBoldObject(index: Integer): TAircraft;
begin
  result := TAircraft(GetElement(index));
end;

procedure TAircraftList.SetBoldObject(index: Integer; NewObject: TAircraft);
begin;
  SetElement(index, NewObject);
end;

{ TVehicle }

function TVehicle._Get_M_Model: TBAString;
begin
  assert(ValidateMember('TVehicle', 'Model', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TVehicle._GetModel: String;
begin
  Result := M_Model.AsString;
end;

procedure TVehicle._SetModel(NewValue: String);
begin
  M_Model.AsString := NewValue;
end;

procedure TVehicleList.Add(NewObject: TVehicle);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVehicleList.IndexOf(anObject: TVehicle): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVehicleList.Includes(anObject: TVehicle) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVehicleList.AddNew: TVehicle;
begin
  result := TVehicle(InternalAddNew);
end;

procedure TVehicleList.Insert(index: Integer; NewObject: TVehicle);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVehicleList.GetBoldObject(index: Integer): TVehicle;
begin
  result := TVehicle(GetElement(index));
end;

procedure TVehicleList.SetBoldObject(index: Integer; NewObject: TVehicle);
begin;
  SetElement(index, NewObject);
end;

{ TJet }

function TJet._Get_M_ThrustVector: TBABoolean;
begin
  assert(ValidateMember('TJet', 'ThrustVector', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TJet._GetThrustVector: Boolean;
begin
  Result := M_ThrustVector.AsBoolean;
end;

procedure TJet._SetThrustVector(NewValue: Boolean);
begin
  M_ThrustVector.AsBoolean := NewValue;
end;

procedure TJetList.Add(NewObject: TJet);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TJetList.IndexOf(anObject: TJet): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TJetList.Includes(anObject: TJet) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TJetList.AddNew: TJet;
begin
  result := TJet(InternalAddNew);
end;

procedure TJetList.Insert(index: Integer; NewObject: TJet);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TJetList.GetBoldObject(index: Integer): TJet;
begin
  result := TJet(GetElement(index));
end;

procedure TJetList.SetBoldObject(index: Integer; NewObject: TJet);
begin;
  SetElement(index, NewObject);
end;

{ TProp }

function TProp._Get_M_NoOfBlades: TBAInteger;
begin
  assert(ValidateMember('TProp', 'NoOfBlades', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TProp._GetNoOfBlades: Integer;
begin
  Result := M_NoOfBlades.AsInteger;
end;

procedure TProp._SetNoOfBlades(NewValue: Integer);
begin
  M_NoOfBlades.AsInteger := NewValue;
end;

procedure TPropList.Add(NewObject: TProp);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPropList.IndexOf(anObject: TProp): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPropList.Includes(anObject: TProp) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPropList.AddNew: TProp;
begin
  result := TProp(InternalAddNew);
end;

procedure TPropList.Insert(index: Integer; NewObject: TProp);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPropList.GetBoldObject(index: Integer): TProp;
begin
  result := TProp(GetElement(index));
end;

procedure TPropList.SetBoldObject(index: Integer; NewObject: TProp);
begin;
  SetElement(index, NewObject);
end;

{ TBus }

function TBus._Get_M_NoOfPassengers: TBAString;
begin
  assert(ValidateMember('TBus', 'NoOfPassengers', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TBus._GetNoOfPassengers: String;
begin
  Result := M_NoOfPassengers.AsString;
end;

procedure TBus._SetNoOfPassengers(NewValue: String);
begin
  M_NoOfPassengers.AsString := NewValue;
end;

procedure TBusList.Add(NewObject: TBus);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusList.IndexOf(anObject: TBus): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusList.Includes(anObject: TBus) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusList.AddNew: TBus;
begin
  result := TBus(InternalAddNew);
end;

procedure TBusList.Insert(index: Integer; NewObject: TBus);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusList.GetBoldObject(index: Integer): TBus;
begin
  result := TBus(GetElement(index));
end;

procedure TBusList.SetBoldObject(index: Integer; NewObject: TBus);
begin;
  SetElement(index, NewObject);
end;

{ TTruck }

function TTruck._Get_M_MaxLoad: TBAString;
begin
  assert(ValidateMember('TTruck', 'MaxLoad', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TTruck._GetMaxLoad: String;
begin
  Result := M_MaxLoad.AsString;
end;

procedure TTruck._SetMaxLoad(NewValue: String);
begin
  M_MaxLoad.AsString := NewValue;
end;

procedure TTruckList.Add(NewObject: TTruck);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTruckList.IndexOf(anObject: TTruck): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTruckList.Includes(anObject: TTruck) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTruckList.AddNew: TTruck;
begin
  result := TTruck(InternalAddNew);
end;

procedure TTruckList.Insert(index: Integer; NewObject: TTruck);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTruckList.GetBoldObject(index: Integer): TTruck;
begin
  result := TTruck(GetElement(index));
end;

procedure TTruckList.SetBoldObject(index: Integer; NewObject: TTruck);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1845494551';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Aircraft', TAircraftList);
  BoldObjectListClasses.AddObjectEntry('Vehicle', TVehicleList);
  BoldObjectListClasses.AddObjectEntry('Jet', TJetList);
  BoldObjectListClasses.AddObjectEntry('Prop', TPropList);
  BoldObjectListClasses.AddObjectEntry('Bus', TBusList);
  BoldObjectListClasses.AddObjectEntry('Truck', TTruckList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Aircraft', TAircraft);
  BoldObjectClasses.AddObjectEntry('Vehicle', TVehicle);
  BoldObjectClasses.AddObjectEntry('Jet', TJet);
  BoldObjectClasses.AddObjectEntry('Prop', TProp);
  BoldObjectClasses.AddObjectEntry('Bus', TBus);
  BoldObjectClasses.AddObjectEntry('Truck', TTruck);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('ParentChildMappingClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 