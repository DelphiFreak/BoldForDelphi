(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:15:47         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF RendererExampleClasses_Interface.inc}
{$DEFINE RendererExampleClasses_Interface.inc}

{$IFNDEF RendererExampleClasses_unitheader}
unit RendererExampleClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TGlobals = class;
  TGlobalsList = class;
  TPerson = class;
  TPersonList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TGlobals = class(TBusinessClassesRoot)
  private
    function _Get_M_SalaryBreakPoint: TBACurrency;
    function _GetSalaryBreakPoint: Currency;
    procedure _SetSalaryBreakPoint(NewValue: Currency);
  protected
  public
    property M_SalaryBreakPoint: TBACurrency read _Get_M_SalaryBreakPoint;
    property SalaryBreakPoint: Currency read _GetSalaryBreakPoint write _SetSalaryBreakPoint;
  end;

  TPerson = class(TBusinessClassesRoot)
  private
    function _Get_M_FirstName: TBAString;
    function _GetFirstName: String;
    procedure _SetFirstName(NewValue: String);
    function _Get_M_LastName: TBAString;
    function _GetLastName: String;
    procedure _SetLastName(NewValue: String);
    function _Get_M_Salary: TBACurrency;
    function _GetSalary: Currency;
    procedure _SetSalary(NewValue: Currency);
  protected
  public
    procedure CompleteCreate; override;
    property M_FirstName: TBAString read _Get_M_FirstName;
    property M_LastName: TBAString read _Get_M_LastName;
    property M_Salary: TBACurrency read _Get_M_Salary;
    property FirstName: String read _GetFirstName write _SetFirstName;
    property LastName: String read _GetLastName write _SetLastName;
    property Salary: Currency read _GetSalary write _SetSalary;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TGlobalsList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TGlobals;
    procedure SetBoldObject(index: Integer; NewObject: TGlobals);
  public
    function Includes(anObject: TGlobals): Boolean;
    function IndexOf(anObject: TGlobals): Integer;
    procedure Add(NewObject: TGlobals);
    function AddNew: TGlobals;
    procedure Insert(index: Integer; NewObject: TGlobals);
    property BoldObjects[index: Integer]: TGlobals read GetBoldObject write SetBoldObject; default;
  end;

  TPersonList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPerson;
    procedure SetBoldObject(index: Integer; NewObject: TPerson);
  public
    function Includes(anObject: TPerson): Boolean;
    function IndexOf(anObject: TPerson): Integer;
    procedure Add(NewObject: TPerson);
    function AddNew: TPerson;
    procedure Insert(index: Integer; NewObject: TPerson);
    property BoldObjects[index: Integer]: TPerson read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

{$ENDIF}

 