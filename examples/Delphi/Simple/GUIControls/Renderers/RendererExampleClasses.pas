(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 2002-04-05 15:15:47         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit RendererExampleClasses;

{$DEFINE RendererExampleClasses_unitheader}
{$INCLUDE RendererExampleClasses_Interface.inc}

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{ Includefile for methodimplementations }

{$INCLUDE RendererExampleClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TGlobals }

function TGlobals._Get_M_SalaryBreakPoint: TBACurrency;
begin
  assert(ValidateMember('TGlobals', 'SalaryBreakPoint', 0, TBACurrency));
  Result := TBACurrency(BoldMembers[0]);
end;

function TGlobals._GetSalaryBreakPoint: Currency;
begin
  Result := M_SalaryBreakPoint.AsCurrency;
end;

procedure TGlobals._SetSalaryBreakPoint(NewValue: Currency);
begin
  M_SalaryBreakPoint.AsCurrency := NewValue;
end;

procedure TGlobalsList.Add(NewObject: TGlobals);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TGlobalsList.IndexOf(anObject: TGlobals): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TGlobalsList.Includes(anObject: TGlobals) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TGlobalsList.AddNew: TGlobals;
begin
  result := TGlobals(InternalAddNew);
end;

procedure TGlobalsList.Insert(index: Integer; NewObject: TGlobals);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TGlobalsList.GetBoldObject(index: Integer): TGlobals;
begin
  result := TGlobals(GetElement(index));
end;

procedure TGlobalsList.SetBoldObject(index: Integer; NewObject: TGlobals);
begin;
  SetElement(index, NewObject);
end;

{ TPerson }

function TPerson._Get_M_FirstName: TBAString;
begin
  assert(ValidateMember('TPerson', 'FirstName', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPerson._GetFirstName: String;
begin
  Result := M_FirstName.AsString;
end;

procedure TPerson._SetFirstName(NewValue: String);
begin
  M_FirstName.AsString := NewValue;
end;

function TPerson._Get_M_LastName: TBAString;
begin
  assert(ValidateMember('TPerson', 'LastName', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPerson._GetLastName: String;
begin
  Result := M_LastName.AsString;
end;

procedure TPerson._SetLastName(NewValue: String);
begin
  M_LastName.AsString := NewValue;
end;

function TPerson._Get_M_Salary: TBACurrency;
begin
  assert(ValidateMember('TPerson', 'Salary', 2, TBACurrency));
  Result := TBACurrency(BoldMembers[2]);
end;

function TPerson._GetSalary: Currency;
begin
  Result := M_Salary.AsCurrency;
end;

procedure TPerson._SetSalary(NewValue: Currency);
begin
  M_Salary.AsCurrency := NewValue;
end;

procedure TPersonList.Add(NewObject: TPerson);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonList.IndexOf(anObject: TPerson): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonList.Includes(anObject: TPerson) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonList.AddNew: TPerson;
begin
  result := TPerson(InternalAddNew);
end;

procedure TPersonList.Insert(index: Integer; NewObject: TPerson);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonList.GetBoldObject(index: Integer): TPerson;
begin
  result := TPerson(GetElement(index));
end;

procedure TPersonList.SetBoldObject(index: Integer; NewObject: TPerson);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1246017168';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Globals', TGlobalsList);
  BoldObjectListClasses.AddObjectEntry('Person', TPersonList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Globals', TGlobals);
  BoldObjectClasses.AddObjectEntry('Person', TPerson);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('RendererExampleClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

 