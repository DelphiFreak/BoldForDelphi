//**********************************************************//
//                                                          //
//       Bold for Delphi Stub File                          //
//                                                          //
//       Autogenerated file for method implementations      //
//                                                          //
//**********************************************************//

// 
#include "BuildingClasses.hpp"

void __fastcall TResidential_Building::ChargeRent(void)
{
  int i;
  TPerson *pd;

  if (Residents == NULL || Residents->Count == 0)
    throw Exception("No residents to pay rent");
  if (Owners == NULL || Owners->Count == 0)
    throw Exception("No owners to receive payment");

  for(i = Residents->Count-1;i >= 0; i--)
  {
    pd = Residents->BoldObjects[i]; //Residents[i];
    pd->Assets = pd->Assets - (TotalRent / Residents->Count);
    if (pd->Assets < 0)
    {
      pd->Home = 0;
      TVarRec v[] = {pd->FirstName, pd->LastName, Address};
      ShowMessage( Format( "%s %s has been evicted from %s due to lack of funds", v, ARRAYSIZE(v) - 1));
    }
   }

  for(i = 0; i < Owners->Count; i++)
  {
    pd = Owners->BoldObjects[i]; //[i];
    pd->Assets = pd->Assets + (TotalRent / Owners->Count);
  }
}

void __fastcall TResidential_Building::CompleteCreate(void)
{
  TBuilding::CompleteCreate();

  TStringList *Streets = new TStringList();
  Streets->Add("Bold Drive");
  Streets->Add("5th Avenue");
  Streets->Add("Rose Path");
  Streets->Add("Select Avenue");
  Streets->Add("Pebble Road");

  Address = IntToStr( random(250) )+ " " + Streets->Strings[random(5)];
  TotalRent = random(100)*100;

  delete Streets;
}
 