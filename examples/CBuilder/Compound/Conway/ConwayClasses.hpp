/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2001-12-03 17:20:19         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#if !defined (ConwayClasses_HPP)
#define ConwayClasses_HPP

// interface uses
#include "Windows.hpp"

// interface dependancies

// attribute dependancies
#include "BoldAttributes.hpp"

#include <Classes.hpp>
#include <Controls.hpp>
#include <SysUtils.hpp>
#include "BoldDefs.hpp"
#include "BoldSubscription.hpp"
#include "BoldDeriver.hpp"
#include "BoldElements.hpp"
#include "BoldDomainElement.hpp"
#include "BoldSystemRT.hpp"
#include "BoldSystem.hpp"

#include "BoldReferenceHandle.hpp"
#include "BoldCheckBox.hpp"
#include "Dialogs.hpp"
#include "Forms.hpp"
#include "BoldQueue.hpp"

void unregisterCode();

// forward declarations of all classes }

class TBusinessClassesRoot;
class TBusinessClassesRootList;
class TCell;
class TCellList;
class TGame;
class TGameList;

class DELPHICLASS TBusinessClassesRoot;
class TBusinessClassesRoot : public Boldsystem::TBoldObject
{
typedef Boldsystem::TBoldObject inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TBusinessClassesRoot(Boldsystem::TBoldSystem* aBoldSystem) : Boldsystem::TBoldObject(aBoldSystem, true) { }
  #pragma option pop

};

class DELPHICLASS TCell;
class TCell : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
    Boolean fIntermediate;
    Boolean fNeighboursEnsured;
  TBABoolean* __fastcall _Get_M_Active();
  Boolean __fastcall _GetActive();
  void __fastcall _SetActive(Boolean NewValue);
  TBAInteger* __fastcall _Get_M_neighbours();
  Integer __fastcall _Getneighbours();
  TBAInteger* __fastcall _Get_M_x();
  Integer __fastcall _Getx();
  void __fastcall _Setx(Integer NewValue);
  TBAInteger* __fastcall _Get_M_y();
  Integer __fastcall _Gety();
  void __fastcall _Sety(Integer NewValue);
  TBAInteger* __fastcall _Get_M_ActiveCount();
  Integer __fastcall _GetActiveCount();
  TGame* __fastcall _GetGame();
  TBoldObjectReference* __fastcall _Get_M_Game();
  void __fastcall _SetGame(TGame *value);
  TCell* __fastcall _GetcLeft();
  TBoldObjectReference* __fastcall _Get_M_cLeft();
  void __fastcall _SetcLeft(TCell *value);
  TCell* __fastcall _GetcRight();
  TBoldObjectReference* __fastcall _Get_M_cRight();
  void __fastcall _SetcRight(TCell *value);
  TCell* __fastcall _GetcDown();
  TBoldObjectReference* __fastcall _Get_M_cDown();
  void __fastcall _SetcDown(TCell *value);
  TCell* __fastcall _GetcUp();
  TBoldObjectReference* __fastcall _Get_M_cUp();
  void __fastcall _SetcUp(TCell *value);
  TCell* __fastcall _GetcDownLeft();
  TBoldObjectReference* __fastcall _Get_M_cDownLeft();
  void __fastcall _SetcDownLeft(TCell *value);
  TCell* __fastcall _GetcUpRight();
  TBoldObjectReference* __fastcall _Get_M_cUpRight();
  void __fastcall _SetcUpRight(TCell *value);
  TCell* __fastcall _GetcDownRight();
  TBoldObjectReference* __fastcall _Get_M_cDownRight();
  void __fastcall _SetcDownRight(TCell *value);
  TCell* __fastcall _GetcUpLeft();
  TBoldObjectReference* __fastcall _Get_M_cUpLeft();
  void __fastcall _SetcUpLeft(TCell *value);
  void __fastcall UnensureNeighbours(void);
  __property TBAInteger* M_ActiveCount = {read=_Get_M_ActiveCount};
  __property Integer ActiveCount = {read=_GetActiveCount};
  __property Boolean Intermediate = { read=fIntermediate, write=fIntermediate};
protected:
  __property TBAInteger* M_neighbours = {read=_Get_M_neighbours};
  __property Integer neighbours = {read=_Getneighbours};
  __property Boolean NeighboursEnsured = { read=fNeighboursEnsured, write=fNeighboursEnsured};
public:
  #pragma option push -w-inl
  inline __fastcall TCell(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  void __fastcall CalculateIntermediate(void);
  void __fastcall UpdateActive(void);
  void __fastcall SetupCell(Integer x, Integer y);
  TCell* __fastcall EnsureCell(TCell* aCell, Integer x, Integer y);
  boolean __fastcall AllowRemove(void);
  void __fastcall PrepareDelete(void);
  void __fastcall NeighboursNotEnsured(void);
  void __fastcall UnensureCell(TCell* aCell);
  void __fastcall EnsureNeighbours(void);
  __property TBABoolean* M_Active = {read=_Get_M_Active};
  __property TBAInteger* M_x = {read=_Get_M_x};
  __property TBAInteger* M_y = {read=_Get_M_y};
  __property TBoldObjectReference* M_Game = {read=_Get_M_Game};
  __property TBoldObjectReference* M_cLeft = {read=_Get_M_cLeft};
  __property TBoldObjectReference* M_cRight = {read=_Get_M_cRight};
  __property TBoldObjectReference* M_cDown = {read=_Get_M_cDown};
  __property TBoldObjectReference* M_cUp = {read=_Get_M_cUp};
  __property TBoldObjectReference* M_cDownLeft = {read=_Get_M_cDownLeft};
  __property TBoldObjectReference* M_cUpRight = {read=_Get_M_cUpRight};
  __property TBoldObjectReference* M_cDownRight = {read=_Get_M_cDownRight};
  __property TBoldObjectReference* M_cUpLeft = {read=_Get_M_cUpLeft};
  __property Boolean Active = {read=_GetActive, write=_SetActive};
  __property Integer x = {read=_Getx, write=_Setx};
  __property Integer y = {read=_Gety, write=_Sety};
  __property TGame* Game = {read=_GetGame, write=_SetGame};
  __property TCell* cLeft = {read=_GetcLeft, write=_SetcLeft};
  __property TCell* cRight = {read=_GetcRight, write=_SetcRight};
  __property TCell* cDown = {read=_GetcDown, write=_SetcDown};
  __property TCell* cUp = {read=_GetcUp, write=_SetcUp};
  __property TCell* cDownLeft = {read=_GetcDownLeft, write=_SetcDownLeft};
  __property TCell* cUpRight = {read=_GetcUpRight, write=_SetcUpRight};
  __property TCell* cDownRight = {read=_GetcDownRight, write=_SetcDownRight};
  __property TCell* cUpLeft = {read=_GetcUpLeft, write=_SetcUpLeft};
};

class DELPHICLASS TGame;
class TGame : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
    Integer fInactiveCount;
  TBAInteger* __fastcall _Get_M_TimerTime();
  Integer __fastcall _GetTimerTime();
  void __fastcall _SetTimerTime(Integer NewValue);
  TBAInteger* __fastcall _Get_M_Generations();
  Integer __fastcall _GetGenerations();
  void __fastcall _SetGenerations(Integer NewValue);
  TBABlob* __fastcall _Get_M_board();
  String __fastcall _Getboard();
  void __fastcall _Setboard(String NewValue);
  TBAInteger* __fastcall _Get_M_xMax();
  Integer __fastcall _GetxMax();
  void __fastcall _SetxMax(Integer NewValue);
  TBAInteger* __fastcall _Get_M_xMin();
  Integer __fastcall _GetxMin();
  void __fastcall _SetxMin(Integer NewValue);
  TBAInteger* __fastcall _Get_M_yMax();
  Integer __fastcall _GetyMax();
  void __fastcall _SetyMax(Integer NewValue);
  TBAInteger* __fastcall _Get_M_yMin();
  Integer __fastcall _GetyMin();
  void __fastcall _SetyMin(Integer NewValue);
  TBAInteger* __fastcall _Get_M_xSize();
  Integer __fastcall _GetxSize();
  TBAInteger* __fastcall _Get_M_FontSize();
  Integer __fastcall _GetFontSize();
  void __fastcall _SetFontSize(Integer NewValue);
  TBABoolean* __fastcall _Get_M_collecting();
  Boolean __fastcall _Getcollecting();
  void __fastcall _Setcollecting(Boolean NewValue);
  TCellList* __fastcall _GetCell();
  TCellList* __fastcall _Getcoord();
  TCell* __fastcall _Get_Q_coord(Integer x, Integer y);
  void __fastcall RefreshBounds(void);
  TRect __fastcall GetBounds(void);
protected:
  virtual void __fastcall _board_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
  virtual void __fastcall _board_ReverseDerive(TObject *DerivedObject);
  virtual TBoldDeriveAndResubscribe __fastcall GetDeriveMethodForMember(TBoldMember *Member);
  virtual TBoldReverseDerive __fastcall GetReverseDeriveMethodForMember(TBoldMember *Member);
public:
  #pragma option push -w-inl
  inline __fastcall TGame(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  void __fastcall Tick(void);
  void __fastcall ClearCells(void);
  void __fastcall UpdateBounds(Integer x, Integer y);
  void __fastcall GarbageCollect(void);
  void __fastcall ResetBounds(void);
  __property TBAInteger* M_TimerTime = {read=_Get_M_TimerTime};
  __property TBAInteger* M_Generations = {read=_Get_M_Generations};
  __property TBABlob* M_board = {read=_Get_M_board};
  __property TBAInteger* M_xMax = {read=_Get_M_xMax};
  __property TBAInteger* M_xMin = {read=_Get_M_xMin};
  __property TBAInteger* M_yMax = {read=_Get_M_yMax};
  __property TBAInteger* M_yMin = {read=_Get_M_yMin};
  __property TBAInteger* M_xSize = {read=_Get_M_xSize};
  __property TBAInteger* M_FontSize = {read=_Get_M_FontSize};
  __property TBABoolean* M_collecting = {read=_Get_M_collecting};
  __property TCellList* M_Cell = {read=_GetCell};
  __property TCellList* M_coord = {read=_Getcoord};
  __property Integer TimerTime = {read=_GetTimerTime, write=_SetTimerTime};
  __property Integer Generations = {read=_GetGenerations, write=_SetGenerations};
  __property String board = {read=_Getboard, write=_Setboard};
  __property Integer xMax = {read=_GetxMax, write=_SetxMax};
  __property Integer xMin = {read=_GetxMin, write=_SetxMin};
  __property Integer yMax = {read=_GetyMax, write=_SetyMax};
  __property Integer yMin = {read=_GetyMin, write=_SetyMin};
  __property Integer xSize = {read=_GetxSize};
  __property Integer FontSize = {read=_GetFontSize, write=_SetFontSize};
  __property Boolean collecting = {read=_Getcollecting, write=_Setcollecting};
  __property TCellList* Cell = {read=_GetCell};
  __property TCell* coord[Integer x][Integer y] = {read=_Get_Q_coord};
  __property Integer InactiveCount = { read=fInactiveCount, write=fInactiveCount};
};

class DELPHICLASS TBusinessClassesRootList;
class TBusinessClassesRootList : public TBoldObjectList
{
protected:
  TBusinessClassesRoot* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TBusinessClassesRoot *NewObject);
public:
  int __fastcall Includes(TBusinessClassesRoot *anObject);
  int __fastcall IndexOf(TBusinessClassesRoot *anObject);
  void __fastcall Add(TBusinessClassesRoot *NewObject);
  TBusinessClassesRoot* __fastcall AddNew();
  void __fastcall Insert(int index, TBusinessClassesRoot *NewObject);
  __property TBusinessClassesRoot* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TCellList;
class TCellList : public TBusinessClassesRootList
{
protected:
  TCell* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TCell *NewObject);
public:
  int __fastcall Includes(TCell *anObject);
  int __fastcall IndexOf(TCell *anObject);
  void __fastcall Add(TCell *NewObject);
  TCell* __fastcall AddNew();
  void __fastcall Insert(int index, TCell *NewObject);
  __property TCell* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TGameList;
class TGameList : public TBusinessClassesRootList
{
protected:
  TGame* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TGame *NewObject);
public:
  int __fastcall Includes(TGame *anObject);
  int __fastcall IndexOf(TGame *anObject);
  void __fastcall Add(TGame *NewObject);
  TGame* __fastcall AddNew();
  void __fastcall Insert(int index, TGame *NewObject);
  __property TGame* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};


char* GeneratedCodeCRC();

#endif

 