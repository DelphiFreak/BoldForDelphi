//**********************************************************//
//                                                          //
//       Bold for Delphi Stub File                          //
//                                                          //
//       Autogenerated file for method implementations      //
//                                                          //
//**********************************************************//

// 
#include "ModelEvClasses.hpp"

void __fastcall TDiscount::ReceiveEventFromOwned(TObject *Originator, TBoldEvent OriginalEvent)
{
  TBusinessClassesRoot::ReceiveEventFromOwned(Originator, OriginalEvent);

  Integer i;

  // copy the new value to all orders we are related to...
  if ( (Originator == M_Percent) && (OriginalEvent == beCompleteModify) )
  {
    for (i = 0; i < Order->Count; i++)
      Order->BoldObjects[i]->Discount = Percent;
  }
}

void __fastcall TOrder::Upgrade(void)
{
  // the discount has moved from an attribute to an associated class.
  if (!theDiscount)
    theDiscount = new TDiscount(BoldSystem);
  theDiscount->Percent = Discount;
}

void __fastcall TPerson::PrepareUpdate(void)
{
  TBusinessClassesRoot::PrepareUpdate();
  FullName = Firstname + " " + LastName;
}

void __fastcall TPerson::Upgrade(void)
{
  // move the name from fullname (used in version 1) to first and last name
  Firstname = Trim(FullName.SubString(1, FullName.Pos(" ")-1));
  LastName = Trim(FullName.SubString(FullName.Pos(" ")+1, FullName.Length()));
}

void __fastcall TProduct::PrepareUpdate(void)
{
  TBusinessClassesRoot::PrepareUpdate();
  // the exchange rate between Swedish crowns (our old currency)
  // and Euro (the new currency)
  Cost = (CostEuro * 8);
}

void __fastcall TProduct::Upgrade(void)
{
  // Move the cost from the old currency (in swedish crowns) to the new (Euro)
  CostEuro = (Cost/8);
}
 