/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-02 16:01:16         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#if !defined (ProdStructClasses_HPP)
#define ProdStructClasses_HPP

// interface uses

// interface dependancies

// attribute dependancies
#include "BoldAttributes.hpp"

#include <Classes.hpp>
#include <Controls.hpp>
#include <SysUtils.hpp>
#include "BoldDefs.hpp"
#include "BoldSubscription.hpp"
#include "BoldDeriver.hpp"
#include "BoldElements.hpp"
#include "BoldDomainElement.hpp"
#include "BoldSystemRT.hpp"
#include "BoldSystem.hpp"

void unregisterCode();

// forward declarations of all classes }

class TProdStructClassesRoot;
class TProdStructClassesRootList;
class TPartOfParts;
class TPartOfPartsList;
class TProduct;
class TProductList;
class TAssembly;
class TAssemblyList;
class TSimple_Product;
class TSimple_ProductList;

class DELPHICLASS TProdStructClassesRoot;
class TProdStructClassesRoot : public Boldsystem::TBoldObject
{
typedef Boldsystem::TBoldObject inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TProdStructClassesRoot(Boldsystem::TBoldSystem* aBoldSystem) : Boldsystem::TBoldObject(aBoldSystem, true) { }
  #pragma option pop

};

class DELPHICLASS TPartOfParts;
class TPartOfParts : public TProdStructClassesRoot
{
typedef TProdStructClassesRoot inherited;
private:
  TProduct* __fastcall _GetParts();
  TBoldObjectReference* __fastcall _Get_M_Parts();
  TAssembly* __fastcall _GetPartOf();
  TBoldObjectReference* __fastcall _Get_M_PartOf();
  __property TBoldObjectReference* M_PartOf = {read=_Get_M_PartOf};
  __property TAssembly* PartOf = {read=_GetPartOf};
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TPartOfParts(Boldsystem::TBoldSystem* aBoldSystem) : TProdStructClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBoldObjectReference* M_Parts = {read=_Get_M_Parts};
  __property TProduct* Parts = {read=_GetParts};
};

class DELPHICLASS TProduct;
class TProduct : public TProdStructClassesRoot
{
typedef TProdStructClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Name();
  String __fastcall _GetName();
  void __fastcall _SetName(String NewValue);
  TBACurrency* __fastcall _Get_M_Price();
  Currency __fastcall _GetPrice();
  void __fastcall _SetPrice(Currency NewValue);
  TBACurrency* __fastcall _Get_M_TotalCost();
  Currency __fastcall _GetTotalCost();
  TAssemblyList* __fastcall _GetPartOf();
  TPartOfPartsList* __fastcall _GetPartOfPartOfParts();
  __property TAssemblyList* M_PartOf = {read=_GetPartOf};
  __property TPartOfPartsList* M_PartOfPartOfParts = {read=_GetPartOfPartOfParts};
  __property TAssemblyList* PartOf = {read=_GetPartOf};
  __property TPartOfPartsList* PartOfPartOfParts = {read=_GetPartOfPartOfParts};
protected:
  virtual void __fastcall _TotalCost_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
  virtual TBoldDeriveAndResubscribe __fastcall GetDeriveMethodForMember(TBoldMember *Member);
  virtual TBoldReverseDerive __fastcall GetReverseDeriveMethodForMember(TBoldMember *Member);
public:
  #pragma option push -w-inl
  inline __fastcall TProduct(Boldsystem::TBoldSystem* aBoldSystem) : TProdStructClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_Name = {read=_Get_M_Name};
  __property TBACurrency* M_Price = {read=_Get_M_Price};
  __property TBACurrency* M_TotalCost = {read=_Get_M_TotalCost};
  __property String Name = {read=_GetName, write=_SetName};
  __property Currency Price = {read=_GetPrice, write=_SetPrice};
  __property Currency TotalCost = {read=_GetTotalCost};
};

class DELPHICLASS TAssembly;
class TAssembly : public TProduct
{
typedef TProduct inherited;
private:
  TBACurrency* __fastcall _Get_M_AssemblyCost();
  Currency __fastcall _GetAssemblyCost();
  void __fastcall _SetAssemblyCost(Currency NewValue);
  TProductList* __fastcall _GetParts();
  TPartOfPartsList* __fastcall _GetPartsPartOfParts();
protected:
  virtual void __fastcall _TotalCost_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
public:
  #pragma option push -w-inl
  inline __fastcall TAssembly(Boldsystem::TBoldSystem* aBoldSystem) : TProduct(aBoldSystem) { }
  #pragma option pop

  __property TBACurrency* M_AssemblyCost = {read=_Get_M_AssemblyCost};
  __property TProductList* M_Parts = {read=_GetParts};
  __property TPartOfPartsList* M_PartsPartOfParts = {read=_GetPartsPartOfParts};
  __property Currency AssemblyCost = {read=_GetAssemblyCost, write=_SetAssemblyCost};
  __property TProductList* Parts = {read=_GetParts};
  __property TPartOfPartsList* PartsPartOfParts = {read=_GetPartsPartOfParts};
};

class DELPHICLASS TSimple_Product;
class TSimple_Product : public TProduct
{
typedef TProduct inherited;
private:
  TBACurrency* __fastcall _Get_M_ProductionCost();
  Currency __fastcall _GetProductionCost();
  void __fastcall _SetProductionCost(Currency NewValue);
protected:
  virtual void __fastcall _TotalCost_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
public:
  #pragma option push -w-inl
  inline __fastcall TSimple_Product(Boldsystem::TBoldSystem* aBoldSystem) : TProduct(aBoldSystem) { }
  #pragma option pop

  __property TBACurrency* M_ProductionCost = {read=_Get_M_ProductionCost};
  __property Currency ProductionCost = {read=_GetProductionCost, write=_SetProductionCost};
};

class DELPHICLASS TProdStructClassesRootList;
class TProdStructClassesRootList : public TBoldObjectList
{
protected:
  TProdStructClassesRoot* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TProdStructClassesRoot *NewObject);
public:
  int __fastcall Includes(TProdStructClassesRoot *anObject);
  int __fastcall IndexOf(TProdStructClassesRoot *anObject);
  void __fastcall Add(TProdStructClassesRoot *NewObject);
  TProdStructClassesRoot* __fastcall AddNew();
  void __fastcall Insert(int index, TProdStructClassesRoot *NewObject);
  __property TProdStructClassesRoot* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TPartOfPartsList;
class TPartOfPartsList : public TProdStructClassesRootList
{
protected:
  TPartOfParts* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TPartOfParts *NewObject);
public:
  int __fastcall Includes(TPartOfParts *anObject);
  int __fastcall IndexOf(TPartOfParts *anObject);
  void __fastcall Add(TPartOfParts *NewObject);
  TPartOfParts* __fastcall AddNew();
  void __fastcall Insert(int index, TPartOfParts *NewObject);
  __property TPartOfParts* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TProductList;
class TProductList : public TProdStructClassesRootList
{
protected:
  TProduct* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TProduct *NewObject);
public:
  int __fastcall Includes(TProduct *anObject);
  int __fastcall IndexOf(TProduct *anObject);
  void __fastcall Add(TProduct *NewObject);
  TProduct* __fastcall AddNew();
  void __fastcall Insert(int index, TProduct *NewObject);
  __property TProduct* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TAssemblyList;
class TAssemblyList : public TProductList
{
protected:
  TAssembly* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TAssembly *NewObject);
public:
  int __fastcall Includes(TAssembly *anObject);
  int __fastcall IndexOf(TAssembly *anObject);
  void __fastcall Add(TAssembly *NewObject);
  TAssembly* __fastcall AddNew();
  void __fastcall Insert(int index, TAssembly *NewObject);
  __property TAssembly* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TSimple_ProductList;
class TSimple_ProductList : public TProductList
{
protected:
  TSimple_Product* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TSimple_Product *NewObject);
public:
  int __fastcall Includes(TSimple_Product *anObject);
  int __fastcall IndexOf(TSimple_Product *anObject);
  void __fastcall Add(TSimple_Product *NewObject);
  TSimple_Product* __fastcall AddNew();
  void __fastcall Insert(int index, TSimple_Product *NewObject);
  __property TSimple_Product* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};


char* GeneratedCodeCRC();

#endif

