//**********************************************************//
//                                                          //
//       Bold for Delphi Stub File                          //
//                                                          //
//       Autogenerated file for method implementations      //
//                                                          //
//**********************************************************//

// 
#include "ProdStructClasses.hpp"

void __fastcall TProduct::_TotalCost_DeriveAndSubscribe(TObject* DerivedObject, TBoldSubscriber* Subscriber)
{
  /* Calculate value and place subscriptions on derived attribute.
  Procuct is an abstact class and there is no common code. */
}

void __fastcall TAssembly::_TotalCost_DeriveAndSubscribe(TObject* DerivedObject, TBoldSubscriber* Subscriber)
{
  Integer i;
  Currency c;
  TBoldExternalVariableList* VariableList = NULL;

  // Cost of Assembly is totalCost of each part + AssembyCost
  // Calculate value and place subscriptions on derived attribute.
  // Note, this example shows how you iterate over all items in a multi relation

  c = AssemblyCost;

  /* NB! SubscribeToExpression has Resubscribe set to TRUE to ensure that we are called again
  if the list changes. This is needed so we can place subscriptions on new parts. */
  SubscribeToExpression("parts", Subscriber, true, false, VariableList);

  for (i = 0; i < Parts->Count; i++)
  {
    c = c + Parts->BoldObjects[i]->TotalCost;
    Parts->BoldObjects[i]->SubscribeToExpression("totalCost", Subscriber, false, false, VariableList);
  }
  M_TotalCost->AsCurrency = c;

}

void __fastcall TSimple_Product::_TotalCost_DeriveAndSubscribe(TObject* DerivedObject, TBoldSubscriber* Subscriber)
{
  //TProduct::_TotalCost_DeriveAndSubscribe(DerivedObject, Subscriber);

  // Cost of simple product is simply productioncost
  TBoldExternalVariableList* VariableList = NULL;
  M_TotalCost->AsCurrency = ProductionCost;
  SubscribeToExpression("productionCost", Subscriber, false, false, VariableList);
}
 