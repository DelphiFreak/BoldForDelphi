/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-07 13:31:19         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "OptimisticLockingExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations


#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TCar

TBAString* __fastcall TCar::_Get_M_color()
{
  // assert(ValidateMember("TCar", "color", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TCar::_Getcolor()
{
  String result = M_color->AsString;
  return result;
}

void __fastcall TCar::_Setcolor(String NewValue)
{
  M_color->AsString = NewValue;
}

TBAString* __fastcall TCar::_Get_M_maxSpeed()
{
  // assert(ValidateMember("TCar", "maxSpeed", 1, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[1]);
  return result;
};

String __fastcall TCar::_GetmaxSpeed()
{
  String result = M_maxSpeed->AsString;
  return result;
}

void __fastcall TCar::_SetmaxSpeed(String NewValue)
{
  M_maxSpeed->AsString = NewValue;
}

TBAString* __fastcall TCar::_Get_M_model()
{
  // assert(ValidateMember("TCar", "model", 2, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[2]);
  return result;
};

String __fastcall TCar::_Getmodel()
{
  String result = M_model->AsString;
  return result;
}

void __fastcall TCar::_Setmodel(String NewValue)
{
  M_model->AsString = NewValue;
}

TBoldObjectReference* __fastcall TCar::_Get_M_driver()
{
  // assert(ValidateMember("TCar", "driver", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TPerson* _fastcall TCar::_Getdriver()
{
  // assert(not assigned(M_driver->BoldObject) or (M_driver->BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, driver, M_driver->BoldObject->ClassName, __classid(TPerson)]));
  TPerson *result = dynamic_cast<TPerson*>(M_driver->BoldObject);
  return result;
}

void __fastcall TCar::_Setdriver(TPerson *value)
{
  M_driver->BoldObject = value;
}

void __fastcall TCarList::Add(TCar *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TCarList::IndexOf(TCar *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TCarList::Includes(TCar *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TCar* __fastcall TCarList::AddNew()
{
  TCar *result = dynamic_cast<TCar*>(InternalAddNew());
  return result;
}

void __fastcall TCarList::Insert(int index, TCar *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TCar* __fastcall TCarList::GetBoldObject(int index)
{
  TCar *result = dynamic_cast<TCar*>(GetElement(index));
  return result;
}

void __fastcall TCarList::SetBoldObject(int index, TCar *NewObject)
{
  SetElement(index, NewObject);
}

// TPerson

TBAString* __fastcall TPerson::_Get_M_name()
{
  // assert(ValidateMember("TPerson", "name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TPerson::_Getname()
{
  String result = M_name->AsString;
  return result;
}

void __fastcall TPerson::_Setname(String NewValue)
{
  M_name->AsString = NewValue;
}

TBABoolean* __fastcall TPerson::_Get_M_hasLicense()
{
  // assert(ValidateMember("TPerson", "hasLicense", 1, __classid(TBABoolean)));
  TBABoolean *result = dynamic_cast<TBABoolean*>(BoldMembers[1]);
  return result;
};

Boolean __fastcall TPerson::_GethasLicense()
{
  Boolean result = M_hasLicense->AsBoolean;
  return result;
}

void __fastcall TPerson::_SethasLicense(Boolean NewValue)
{
  M_hasLicense->AsBoolean = NewValue;
}

TCarList* __fastcall TPerson::_Getcars()
{
  // assert(ValidateMember("TPerson", "cars", 2, __classid(TCarList)));
  TCarList *result = dynamic_cast<TCarList*>(BoldMembers[2]);
  return result;
}

void __fastcall TPersonList::Add(TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPersonList::IndexOf(TPerson *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPersonList::Includes(TPerson *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPerson* __fastcall TPersonList::AddNew()
{
  TPerson *result = dynamic_cast<TPerson*>(InternalAddNew());
  return result;
}

void __fastcall TPersonList::Insert(int index, TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPerson* __fastcall TPersonList::GetBoldObject(int index)
{
  TPerson *result = dynamic_cast<TPerson*>(GetElement(index));
  return result;
}

void __fastcall TPersonList::SetBoldObject(int index, TPerson *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "1864445554";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Car", __classid(TCarList));
  BoldObjectListClasses->AddObjectEntry("Person", __classid(TPersonList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Car", __classid(TCar));
  BoldObjectClasses->AddObjectEntry("Person", __classid(TPerson));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("OptimisticLockingExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 