/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-03 16:51:12         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "DataValidationExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "DataValidationExampleClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TRoom

TBAInteger* __fastcall TRoom::_Get_M_RoomNumber()
{
  // assert(ValidateMember("TRoom", "RoomNumber", 0, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[0]);
  return result;
};

Integer __fastcall TRoom::_GetRoomNumber()
{
  Integer result = M_RoomNumber->AsInteger;
  return result;
}

void __fastcall TRoom::_SetRoomNumber(Integer NewValue)
{
  M_RoomNumber->AsInteger = NewValue;
}

TBAInteger* __fastcall TRoom::_Get_M_NumberOfBeds()
{
  // assert(ValidateMember("TRoom", "NumberOfBeds", 1, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[1]);
  return result;
};

Integer __fastcall TRoom::_GetNumberOfBeds()
{
  Integer result = M_NumberOfBeds->AsInteger;
  return result;
}

void __fastcall TRoom::_SetNumberOfBeds(Integer NewValue)
{
  M_NumberOfBeds->AsInteger = NewValue;
}

TStudentList* __fastcall TRoom::_GetInhabitants()
{
  // assert(ValidateMember("TRoom", "Inhabitants", 2, __classid(TStudentList)));
  TStudentList *result = dynamic_cast<TStudentList*>(BoldMembers[2]);
  return result;
}

void __fastcall TRoomList::Add(TRoom *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TRoomList::IndexOf(TRoom *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TRoomList::Includes(TRoom *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TRoom* __fastcall TRoomList::AddNew()
{
  TRoom *result = dynamic_cast<TRoom*>(InternalAddNew());
  return result;
}

void __fastcall TRoomList::Insert(int index, TRoom *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TRoom* __fastcall TRoomList::GetBoldObject(int index)
{
  TRoom *result = dynamic_cast<TRoom*>(GetElement(index));
  return result;
}

void __fastcall TRoomList::SetBoldObject(int index, TRoom *NewObject)
{
  SetElement(index, NewObject);
}

// TStudent

TBAString* __fastcall TStudent::_Get_M_Name()
{
  // assert(ValidateMember("TStudent", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TStudent::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TStudent::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TBoldObjectReference* __fastcall TStudent::_Get_M_LivesIn()
{
  // assert(ValidateMember("TStudent", "LivesIn", 1, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[1]);
  return result;
}

TRoom* _fastcall TStudent::_GetLivesIn()
{
  // assert(not assigned(M_LivesIn->BoldObject) or (M_LivesIn->BoldObject is TRoom), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, LivesIn, M_LivesIn->BoldObject->ClassName, __classid(TRoom)]));
  TRoom *result = dynamic_cast<TRoom*>(M_LivesIn->BoldObject);
  return result;
}

void __fastcall TStudent::_SetLivesIn(TRoom *value)
{
  M_LivesIn->BoldObject = value;
}

void __fastcall TStudentList::Add(TStudent *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TStudentList::IndexOf(TStudent *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TStudentList::Includes(TStudent *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TStudent* __fastcall TStudentList::AddNew()
{
  TStudent *result = dynamic_cast<TStudent*>(InternalAddNew());
  return result;
}

void __fastcall TStudentList::Insert(int index, TStudent *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TStudent* __fastcall TStudentList::GetBoldObject(int index)
{
  TStudent *result = dynamic_cast<TStudent*>(GetElement(index));
  return result;
}

void __fastcall TStudentList::SetBoldObject(int index, TStudent *NewObject)
{
  SetElement(index, NewObject);
}

// TFemaleStudent

void __fastcall TFemaleStudentList::Add(TFemaleStudent *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TFemaleStudentList::IndexOf(TFemaleStudent *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TFemaleStudentList::Includes(TFemaleStudent *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TFemaleStudent* __fastcall TFemaleStudentList::AddNew()
{
  TFemaleStudent *result = dynamic_cast<TFemaleStudent*>(InternalAddNew());
  return result;
}

void __fastcall TFemaleStudentList::Insert(int index, TFemaleStudent *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TFemaleStudent* __fastcall TFemaleStudentList::GetBoldObject(int index)
{
  TFemaleStudent *result = dynamic_cast<TFemaleStudent*>(GetElement(index));
  return result;
}

void __fastcall TFemaleStudentList::SetBoldObject(int index, TFemaleStudent *NewObject)
{
  SetElement(index, NewObject);
}

// TMaleStudent

void __fastcall TMaleStudentList::Add(TMaleStudent *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TMaleStudentList::IndexOf(TMaleStudent *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TMaleStudentList::Includes(TMaleStudent *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TMaleStudent* __fastcall TMaleStudentList::AddNew()
{
  TMaleStudent *result = dynamic_cast<TMaleStudent*>(InternalAddNew());
  return result;
}

void __fastcall TMaleStudentList::Insert(int index, TMaleStudent *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TMaleStudent* __fastcall TMaleStudentList::GetBoldObject(int index)
{
  TMaleStudent *result = dynamic_cast<TMaleStudent*>(GetElement(index));
  return result;
}

void __fastcall TMaleStudentList::SetBoldObject(int index, TMaleStudent *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "833295871";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Room", __classid(TRoomList));
  BoldObjectListClasses->AddObjectEntry("Student", __classid(TStudentList));
  BoldObjectListClasses->AddObjectEntry("FemaleStudent", __classid(TFemaleStudentList));
  BoldObjectListClasses->AddObjectEntry("MaleStudent", __classid(TMaleStudentList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Room", __classid(TRoom));
  BoldObjectClasses->AddObjectEntry("Student", __classid(TStudent));
  BoldObjectClasses->AddObjectEntry("FemaleStudent", __classid(TFemaleStudent));
  BoldObjectClasses->AddObjectEntry("MaleStudent", __classid(TMaleStudent));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("DataValidationExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 