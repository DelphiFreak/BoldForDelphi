//**********************************************************//
//                                                          //
//       Bold for Delphi Stub File                          //
//                                                          //
//       Autogenerated file for method implementations      //
//                                                          //
//**********************************************************//

// 
#include "DataValidationExampleClasses.hpp"

const AnsiString MALEFIRST[] = {"John","Paul","Steve","Edward","Bill","Arthur","Scott","Michael"};
const AnsiString FEMALEFIRST[] = {"Sarah","Alice","Joanna","Mary","Lisa","Linda","Cathy","Elisabeth"};
const AnsiString LASTNAME[] = {"Wilkinson","McKenzie","Anderson","Shaw","Houston","Jackson","Miller","Woods"};

// Check if there are enough free beds and make
// sure all inhabitants are of the same gender.
boolean __fastcall TRoom::ValidateNewInhabitant(TStudent* NewInhabitant)
{
  boolean Result = (NumberOfBeds > Inhabitants->Count);
    if (Inhabitants->Count > 0)
      Result = (Result && (Inhabitants->BoldObjects[0]->BoldClassTypeInfo == NewInhabitant->BoldClassTypeInfo));
  return Result;
}

// Initialize new instances
void __fastcall TRoom::CompleteCreate(void)
{
  TBoldObjectList *aObjectList;
  TBusinessClassesRoot::CompleteCreate();

  aObjectList = BoldSystem->ClassByExpressionName["Room"];
  RoomNumber = aObjectList->Count;
  NumberOfBeds = random(3) + 2;
}

// Create random name on create.
void __fastcall TFemaleStudent::CompleteCreate(void)
{
  TStudent::CompleteCreate();
  Name = FEMALEFIRST[random(7)] + " " + LASTNAME[random(7)];
}

// Create random name on create.
void __fastcall TMaleStudent::CompleteCreate(void)
{
  TStudent::CompleteCreate();
  Name = MALEFIRST[random(7)] + " " + LASTNAME[random(7)];
}
 