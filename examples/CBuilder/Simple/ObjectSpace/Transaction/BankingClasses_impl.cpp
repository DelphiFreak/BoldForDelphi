//**********************************************************//
//                                                          //
//       Bold for Delphi Stub File                          //
//                                                          //
//       Autogenerated file for method implementations      //
//                                                          //
//**********************************************************//

//
#include "BankingClasses.hpp"

Boolean __fastcall TAccount::ReceiveQueryFromOwned(TObject *Originator, TBoldEvent OriginalEvent, const System::TVarRec * Args, const int Args_Size, Boldsubscription::TBoldSubscriber* Subscriber)
{
  Boolean Result = TBankingClassesRoot::ReceiveQueryFromOwned(Originator, OriginalEvent, Args, Args_Size, Subscriber);

  if ((OriginalEvent == bqMayCommit) && (Originator == M_Total) && (Total < -Credit))
  {
    Result = false;
    TVarRec v[] = {Number};
    SetBoldLastFailureReason(new TBoldFailureReason(Format("Account total is under credit limit for account %s", v, ARRAYSIZE(v) - 1), this));
  }

  return Result;
}

Boolean __fastcall TAccount::MayDelete(void)
{
  Boolean Result = (Total == 0);
  if (!Result)
    SetBoldLastFailureReason(new TBoldFailureReason("Can not delete an account unless the total is 0", this));

  return Result;
}

void __fastcall TClose::Perform(void)
{
  if (!account)
    BoldRaiseLastFailure(this, "Perform", "Close request without account");

  account->Delete();
}

void __fastcall TModifyCredit::Perform(void)
{
  if (!account)
    BoldRaiseLastFailure(this, "Perform", "Modify credit request without account");

  account->Credit = NewCredit;
}

void __fastcall TTransfer::Perform(void)
{
  if (!Source)
    BoldRaiseLastFailure(this, "Perform", "Transfer request without source");
  if (!Target)
    BoldRaiseLastFailure(this, "Perform", "Transfer request without target");

  Source->Total = Source->Total - Amount;
  Target->Total = Target->Total + Amount;
}
