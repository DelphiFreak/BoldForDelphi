/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-04 11:20:38         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "DerivedHandleExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "DerivedHandleExampleClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TPerson

TBAString* __fastcall TPerson::_Get_M_Name()
{
  // assert(ValidateMember("TPerson", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TPerson::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TPerson::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TProjectList* __fastcall TPerson::_GetparticipatesIn()
{
  // assert(ValidateMember("TPerson", "participatesIn", 1, __classid(TProjectList)));
  TProjectList *result = dynamic_cast<TProjectList*>(BoldMembers[1]);
  return result;
}

TProjectParticipatorsList* __fastcall TPerson::_GetProjectParticipators()
{
  // assert(ValidateMember("TPerson", "ProjectParticipators", 2, __classid(TProjectParticipatorsList)));
  TProjectParticipatorsList *result = dynamic_cast<TProjectParticipatorsList*>(BoldMembers[2]);
  return result;
}

TProjectList* __fastcall TPerson::_GetleadsProject()
{
  // assert(ValidateMember("TPerson", "leadsProject", 3, __classid(TProjectList)));
  TProjectList *result = dynamic_cast<TProjectList*>(BoldMembers[3]);
  return result;
}

TProjectList* __fastcall TPerson::_GetmemberOf()
{
  // assert(ValidateMember("TPerson", "memberOf", 4, __classid(TProjectList)));
  TProjectList *result = dynamic_cast<TProjectList*>(BoldMembers[4]);
  return result;
}

TPersonList* __fastcall TPerson::_Getassociates()
{
  // assert(ValidateMember("TPerson", "associates", 5, __classid(TPersonList)));
  TPersonList *result = dynamic_cast<TPersonList*>(BoldMembers[5]);
  return result;
}

void __fastcall TPersonList::Add(TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPersonList::IndexOf(TPerson *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPersonList::Includes(TPerson *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPerson* __fastcall TPersonList::AddNew()
{
  TPerson *result = dynamic_cast<TPerson*>(InternalAddNew());
  return result;
}

void __fastcall TPersonList::Insert(int index, TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPerson* __fastcall TPersonList::GetBoldObject(int index)
{
  TPerson *result = dynamic_cast<TPerson*>(GetElement(index));
  return result;
}

void __fastcall TPersonList::SetBoldObject(int index, TPerson *NewObject)
{
  SetElement(index, NewObject);
}

TBoldDeriveAndResubscribe __fastcall TPerson::GetDeriveMethodForMember(TBoldMember *Member)
{
  TBoldDeriveAndResubscribe result = NULL;
  if (result == NULL) {result = TBusinessClassesRoot::GetDeriveMethodForMember(Member);}
  return result;
}

TBoldReverseDerive __fastcall TPerson::GetReverseDeriveMethodForMember(TBoldMember *Member)
{
  TBoldReverseDerive result = NULL;
  if (result == NULL) {result = TBusinessClassesRoot::GetReverseDeriveMethodForMember(Member);}
  return result;
}

// TProject

TBAString* __fastcall TProject::_Get_M_Name()
{
  // assert(ValidateMember("TProject", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TProject::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TProject::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TPersonList* __fastcall TProject::_Getparticipator()
{
  // assert(ValidateMember("TProject", "participator", 1, __classid(TPersonList)));
  TPersonList *result = dynamic_cast<TPersonList*>(BoldMembers[1]);
  return result;
}

TProjectParticipatorsList* __fastcall TProject::_GetProjectParticipators()
{
  // assert(ValidateMember("TProject", "ProjectParticipators", 2, __classid(TProjectParticipatorsList)));
  TProjectParticipatorsList *result = dynamic_cast<TProjectParticipatorsList*>(BoldMembers[2]);
  return result;
}

TBoldObjectReference* __fastcall TProject::_Get_M_projectLeader()
{
  // assert(ValidateMember("TProject", "projectLeader", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TPerson* _fastcall TProject::_GetprojectLeader()
{
  // assert(not assigned(M_projectLeader->BoldObject) or (M_projectLeader->BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, projectLeader, M_projectLeader->BoldObject->ClassName, __classid(TPerson)]));
  TPerson *result = dynamic_cast<TPerson*>(M_projectLeader->BoldObject);
  return result;
}

void __fastcall TProject::_SetprojectLeader(TPerson *value)
{
  M_projectLeader->BoldObject = value;
}

TPersonList* __fastcall TProject::_GetallMembers()
{
  // assert(ValidateMember("TProject", "allMembers", 4, __classid(TPersonList)));
  TPersonList *result = dynamic_cast<TPersonList*>(BoldMembers[4]);
  return result;
}

void __fastcall TProjectList::Add(TProject *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TProjectList::IndexOf(TProject *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TProjectList::Includes(TProject *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TProject* __fastcall TProjectList::AddNew()
{
  TProject *result = dynamic_cast<TProject*>(InternalAddNew());
  return result;
}

void __fastcall TProjectList::Insert(int index, TProject *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TProject* __fastcall TProjectList::GetBoldObject(int index)
{
  TProject *result = dynamic_cast<TProject*>(GetElement(index));
  return result;
}

void __fastcall TProjectList::SetBoldObject(int index, TProject *NewObject)
{
  SetElement(index, NewObject);
}

// TProjectParticipators

TBoldObjectReference* __fastcall TProjectParticipators::_Get_M_participatesIn()
{
  // assert(ValidateMember("TProjectParticipators", "participatesIn", 0, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[0]);
  return result;
}

TProject* _fastcall TProjectParticipators::_GetparticipatesIn()
{
  // assert(not assigned(M_participatesIn->BoldObject) or (M_participatesIn->BoldObject is TProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, participatesIn, M_participatesIn->BoldObject->ClassName, __classid(TProject)]));
  TProject *result = dynamic_cast<TProject*>(M_participatesIn->BoldObject);
  return result;
}

TBoldObjectReference* __fastcall TProjectParticipators::_Get_M_participator()
{
  // assert(ValidateMember("TProjectParticipators", "participator", 1, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[1]);
  return result;
}

TPerson* _fastcall TProjectParticipators::_Getparticipator()
{
  // assert(not assigned(M_participator->BoldObject) or (M_participator->BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, participator, M_participator->BoldObject->ClassName, __classid(TPerson)]));
  TPerson *result = dynamic_cast<TPerson*>(M_participator->BoldObject);
  return result;
}

void __fastcall TProjectParticipatorsList::Add(TProjectParticipators *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TProjectParticipatorsList::IndexOf(TProjectParticipators *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TProjectParticipatorsList::Includes(TProjectParticipators *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TProjectParticipators* __fastcall TProjectParticipatorsList::AddNew()
{
  TProjectParticipators *result = dynamic_cast<TProjectParticipators*>(InternalAddNew());
  return result;
}

void __fastcall TProjectParticipatorsList::Insert(int index, TProjectParticipators *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TProjectParticipators* __fastcall TProjectParticipatorsList::GetBoldObject(int index)
{
  TProjectParticipators *result = dynamic_cast<TProjectParticipators*>(GetElement(index));
  return result;
}

void __fastcall TProjectParticipatorsList::SetBoldObject(int index, TProjectParticipators *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "376045650";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Person", __classid(TPersonList));
  BoldObjectListClasses->AddObjectEntry("Project", __classid(TProjectList));
  BoldObjectListClasses->AddObjectEntry("ProjectParticipators", __classid(TProjectParticipatorsList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Person", __classid(TPerson));
  BoldObjectClasses->AddObjectEntry("Project", __classid(TProject));
  BoldObjectClasses->AddObjectEntry("ProjectParticipators", __classid(TProjectParticipators));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("DerivedHandleExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 