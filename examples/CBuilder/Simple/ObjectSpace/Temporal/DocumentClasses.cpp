/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-11 17:11:01         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "DocumentClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "DocumentClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TDocumentClassesRoot

TDocumentClassesRoot* _fastcall TDocumentClassesRoot::AtTime(TBoldTimeStampType Time)
{
  TDocumentClassesRoot* result = (TDocumentClassesRoot*)TBoldObject::AtTime(Time);
  return result;
}

void __fastcall TDocumentClassesRootList::Add(TDocumentClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TDocumentClassesRootList::IndexOf(TDocumentClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TDocumentClassesRootList::Includes(TDocumentClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TDocumentClassesRoot* __fastcall TDocumentClassesRootList::AddNew()
{
  TDocumentClassesRoot *result = dynamic_cast<TDocumentClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TDocumentClassesRootList::Insert(int index, TDocumentClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TDocumentClassesRoot* __fastcall TDocumentClassesRootList::GetBoldObject(int index)
{
  TDocumentClassesRoot *result = dynamic_cast<TDocumentClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TDocumentClassesRootList::SetBoldObject(int index, TDocumentClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TContainsProject

TBoldObjectReference* __fastcall TContainsProject::_Get_M_Project()
{
  // assert(ValidateMember("TContainsProject", "Project", 0, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[0]);
  return result;
}

TProject* _fastcall TContainsProject::_GetProject()
{
  // assert(not assigned(M_Project->BoldObject) or (M_Project->BoldObject is TProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Project, M_Project->BoldObject->ClassName, __classid(TProject)]));
  TProject *result = dynamic_cast<TProject*>(M_Project->BoldObject);
  return result;
}

TBoldObjectReference* __fastcall TContainsProject::_Get_M_Contains()
{
  // assert(ValidateMember("TContainsProject", "Contains", 1, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[1]);
  return result;
}

TDocument* _fastcall TContainsProject::_GetContains()
{
  // assert(not assigned(M_Contains->BoldObject) or (M_Contains->BoldObject is TDocument), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Contains, M_Contains->BoldObject->ClassName, __classid(TDocument)]));
  TDocument *result = dynamic_cast<TDocument*>(M_Contains->BoldObject);
  return result;
}

TContainsProject* _fastcall TContainsProject::AtTime(TBoldTimeStampType Time)
{
  TContainsProject* result = (TContainsProject*)TBoldObject::AtTime(Time);
  return result;
}

void __fastcall TContainsProjectList::Add(TContainsProject *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TContainsProjectList::IndexOf(TContainsProject *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TContainsProjectList::Includes(TContainsProject *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TContainsProject* __fastcall TContainsProjectList::AddNew()
{
  TContainsProject *result = dynamic_cast<TContainsProject*>(InternalAddNew());
  return result;
}

void __fastcall TContainsProjectList::Insert(int index, TContainsProject *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TContainsProject* __fastcall TContainsProjectList::GetBoldObject(int index)
{
  TContainsProject *result = dynamic_cast<TContainsProject*>(GetElement(index));
  return result;
}

void __fastcall TContainsProjectList::SetBoldObject(int index, TContainsProject *NewObject)
{
  SetElement(index, NewObject);
}

// TDocument

TBAInteger* __fastcall TDocument::_Get_M_ViewVersion()
{
  // assert(ValidateMember("TDocument", "ViewVersion", 0, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[0]);
  return result;
};

Integer __fastcall TDocument::_GetViewVersion()
{
  Integer result = M_ViewVersion->AsInteger;
  return result;
}

TBAString* __fastcall TDocument::_Get_M_Title()
{
  // assert(ValidateMember("TDocument", "Title", 1, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[1]);
  return result;
};

String __fastcall TDocument::_GetTitle()
{
  String result = M_Title->AsString;
  return result;
}

void __fastcall TDocument::_SetTitle(String NewValue)
{
  M_Title->AsString = NewValue;
}

TBAInteger* __fastcall TDocument::_Get_M_LastPublished()
{
  // assert(ValidateMember("TDocument", "LastPublished", 2, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[2]);
  return result;
};

Integer __fastcall TDocument::_GetLastPublished()
{
  Integer result = M_LastPublished->AsInteger;
  return result;
}

TBoldObjectReference* __fastcall TDocument::_Get_M_Project()
{
  // assert(ValidateMember("TDocument", "Project", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TProject* _fastcall TDocument::_GetProject()
{
  // assert(not assigned(M_Project->BoldObject) or (M_Project->BoldObject is TProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Project, M_Project->BoldObject->ClassName, __classid(TProject)]));
  TProject *result = dynamic_cast<TProject*>(M_Project->BoldObject);
  return result;
}

void __fastcall TDocument::_SetProject(TProject *value)
{
  M_Project->BoldObject = value;
}

TBoldObjectReference* __fastcall TDocument::_Get_M_ContainsProject()
{
  // assert(ValidateMember("TDocument", "ContainsProject", 4, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[4]);
  return result;
}

TContainsProject* _fastcall TDocument::_GetContainsProject()
{
  // assert(not assigned(M_ContainsProject->BoldObject) or (M_ContainsProject->BoldObject is TContainsProject), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, ContainsProject, M_ContainsProject->BoldObject->ClassName, __classid(TContainsProject)]));
  TContainsProject *result = dynamic_cast<TContainsProject*>(M_ContainsProject->BoldObject);
  return result;
}

TBoldObjectReference* __fastcall TDocument::_Get_M_Author()
{
  // assert(ValidateMember("TDocument", "Author", 5, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[5]);
  return result;
}

TPerson* _fastcall TDocument::_GetAuthor()
{
  // assert(not assigned(M_Author->BoldObject) or (M_Author->BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Author, M_Author->BoldObject->ClassName, __classid(TPerson)]));
  TPerson *result = dynamic_cast<TPerson*>(M_Author->BoldObject);
  return result;
}

void __fastcall TDocument::_SetAuthor(TPerson *value)
{
  M_Author->BoldObject = value;
}

TVersionList* __fastcall TDocument::_GetVersion()
{
  // assert(ValidateMember("TDocument", "Version", 6, __classid(TVersionList)));
  TVersionList *result = dynamic_cast<TVersionList*>(BoldMembers[6]);
  return result;
}

TDocumentPartList* __fastcall TDocument::_GetDocumentPart()
{
  // assert(ValidateMember("TDocument", "DocumentPart", 7, __classid(TDocumentPartList)));
  TDocumentPartList *result = dynamic_cast<TDocumentPartList*>(BoldMembers[7]);
  return result;
}

TDocument* _fastcall TDocument::AtTime(TBoldTimeStampType Time)
{
  TDocument* result = (TDocument*)TBoldObject::AtTime(Time);
  return result;
}

void __fastcall TDocumentList::Add(TDocument *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TDocumentList::IndexOf(TDocument *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TDocumentList::Includes(TDocument *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TDocument* __fastcall TDocumentList::AddNew()
{
  TDocument *result = dynamic_cast<TDocument*>(InternalAddNew());
  return result;
}

void __fastcall TDocumentList::Insert(int index, TDocument *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TDocument* __fastcall TDocumentList::GetBoldObject(int index)
{
  TDocument *result = dynamic_cast<TDocument*>(GetElement(index));
  return result;
}

void __fastcall TDocumentList::SetBoldObject(int index, TDocument *NewObject)
{
  SetElement(index, NewObject);
}

TBoldDeriveAndResubscribe __fastcall TDocument::GetDeriveMethodForMember(TBoldMember *Member)
{
  TBoldDeriveAndResubscribe result = NULL;
  if (result == NULL) {result = TDocumentClassesRoot::GetDeriveMethodForMember(Member);}
  return result;
}

TBoldReverseDerive __fastcall TDocument::GetReverseDeriveMethodForMember(TBoldMember *Member)
{
  TBoldReverseDerive result = NULL;
  if (result == NULL) {result = TDocumentClassesRoot::GetReverseDeriveMethodForMember(Member);}
  return result;
}

// TDocumentPart

TBAString* __fastcall TDocumentPart::_Get_M_Header()
{
  // assert(ValidateMember("TDocumentPart", "Header", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TDocumentPart::_GetHeader()
{
  String result = M_Header->AsString;
  return result;
}

void __fastcall TDocumentPart::_SetHeader(String NewValue)
{
  M_Header->AsString = NewValue;
}

TBAString* __fastcall TDocumentPart::_Get_M_Text()
{
  // assert(ValidateMember("TDocumentPart", "Text", 1, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[1]);
  return result;
};

String __fastcall TDocumentPart::_GetText()
{
  String result = M_Text->AsString;
  return result;
}

void __fastcall TDocumentPart::_SetText(String NewValue)
{
  M_Text->AsString = NewValue;
}

TBoldObjectReference* __fastcall TDocumentPart::_Get_M_Document()
{
  // assert(ValidateMember("TDocumentPart", "Document", 2, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[2]);
  return result;
}

TDocument* _fastcall TDocumentPart::_GetDocument()
{
  // assert(not assigned(M_Document->BoldObject) or (M_Document->BoldObject is TDocument), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Document, M_Document->BoldObject->ClassName, __classid(TDocument)]));
  TDocument *result = dynamic_cast<TDocument*>(M_Document->BoldObject);
  return result;
}

void __fastcall TDocumentPart::_SetDocument(TDocument *value)
{
  M_Document->BoldObject = value;
}

TBoldObjectReference* __fastcall TDocumentPart::_Get_M_PartOf()
{
  // assert(ValidateMember("TDocumentPart", "PartOf", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TDocumentPart* _fastcall TDocumentPart::_GetPartOf()
{
  // assert(not assigned(M_PartOf->BoldObject) or (M_PartOf->BoldObject is TDocumentPart), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, PartOf, M_PartOf->BoldObject->ClassName, __classid(TDocumentPart)]));
  TDocumentPart *result = dynamic_cast<TDocumentPart*>(M_PartOf->BoldObject);
  return result;
}

void __fastcall TDocumentPart::_SetPartOf(TDocumentPart *value)
{
  M_PartOf->BoldObject = value;
}

TDocumentPartList* __fastcall TDocumentPart::_GetPart()
{
  // assert(ValidateMember("TDocumentPart", "Part", 4, __classid(TDocumentPartList)));
  TDocumentPartList *result = dynamic_cast<TDocumentPartList*>(BoldMembers[4]);
  return result;
}

TDocumentPart* _fastcall TDocumentPart::AtTime(TBoldTimeStampType Time)
{
  TDocumentPart* result = (TDocumentPart*)TBoldObject::AtTime(Time);
  return result;
}

void __fastcall TDocumentPartList::Add(TDocumentPart *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TDocumentPartList::IndexOf(TDocumentPart *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TDocumentPartList::Includes(TDocumentPart *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TDocumentPart* __fastcall TDocumentPartList::AddNew()
{
  TDocumentPart *result = dynamic_cast<TDocumentPart*>(InternalAddNew());
  return result;
}

void __fastcall TDocumentPartList::Insert(int index, TDocumentPart *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TDocumentPart* __fastcall TDocumentPartList::GetBoldObject(int index)
{
  TDocumentPart *result = dynamic_cast<TDocumentPart*>(GetElement(index));
  return result;
}

void __fastcall TDocumentPartList::SetBoldObject(int index, TDocumentPart *NewObject)
{
  SetElement(index, NewObject);
}

// TPersContext

TBoldObjectReference* __fastcall TPersContext::_Get_M_CurrentUser()
{
  // assert(ValidateMember("TPersContext", "CurrentUser", 0, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[0]);
  return result;
}

TPerson* _fastcall TPersContext::_GetCurrentUser()
{
  // assert(not assigned(M_CurrentUser->BoldObject) or (M_CurrentUser->BoldObject is TPerson), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, CurrentUser, M_CurrentUser->BoldObject->ClassName, __classid(TPerson)]));
  TPerson *result = dynamic_cast<TPerson*>(M_CurrentUser->BoldObject);
  return result;
}

void __fastcall TPersContext::_SetCurrentUser(TPerson *value)
{
  M_CurrentUser->BoldObject = value;
}

void __fastcall TPersContextList::Add(TPersContext *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPersContextList::IndexOf(TPersContext *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPersContextList::Includes(TPersContext *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPersContext* __fastcall TPersContextList::AddNew()
{
  TPersContext *result = dynamic_cast<TPersContext*>(InternalAddNew());
  return result;
}

void __fastcall TPersContextList::Insert(int index, TPersContext *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPersContext* __fastcall TPersContextList::GetBoldObject(int index)
{
  TPersContext *result = dynamic_cast<TPersContext*>(GetElement(index));
  return result;
}

void __fastcall TPersContextList::SetBoldObject(int index, TPersContext *NewObject)
{
  SetElement(index, NewObject);
}

// TPerson

TBAString* __fastcall TPerson::_Get_M_Name()
{
  // assert(ValidateMember("TPerson", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TPerson::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TPerson::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TDocumentList* __fastcall TPerson::_GetDocument()
{
  // assert(ValidateMember("TPerson", "Document", 1, __classid(TDocumentList)));
  TDocumentList *result = dynamic_cast<TDocumentList*>(BoldMembers[1]);
  return result;
}

TPersContextList* __fastcall TPerson::_GetPersContext()
{
  // assert(ValidateMember("TPerson", "PersContext", 2, __classid(TPersContextList)));
  TPersContextList *result = dynamic_cast<TPersContextList*>(BoldMembers[2]);
  return result;
}

TPerson* _fastcall TPerson::AtTime(TBoldTimeStampType Time)
{
  TPerson* result = (TPerson*)TBoldObject::AtTime(Time);
  return result;
}

void __fastcall TPersonList::Add(TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPersonList::IndexOf(TPerson *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPersonList::Includes(TPerson *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPerson* __fastcall TPersonList::AddNew()
{
  TPerson *result = dynamic_cast<TPerson*>(InternalAddNew());
  return result;
}

void __fastcall TPersonList::Insert(int index, TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPerson* __fastcall TPersonList::GetBoldObject(int index)
{
  TPerson *result = dynamic_cast<TPerson*>(GetElement(index));
  return result;
}

void __fastcall TPersonList::SetBoldObject(int index, TPerson *NewObject)
{
  SetElement(index, NewObject);
}

// TProject

TBAString* __fastcall TProject::_Get_M_Name()
{
  // assert(ValidateMember("TProject", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TProject::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TProject::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TDocumentList* __fastcall TProject::_GetContains()
{
  // assert(ValidateMember("TProject", "Contains", 1, __classid(TDocumentList)));
  TDocumentList *result = dynamic_cast<TDocumentList*>(BoldMembers[1]);
  return result;
}

TContainsProjectList* __fastcall TProject::_GetContainsProject()
{
  // assert(ValidateMember("TProject", "ContainsProject", 2, __classid(TContainsProjectList)));
  TContainsProjectList *result = dynamic_cast<TContainsProjectList*>(BoldMembers[2]);
  return result;
}

TDocumentList* __fastcall TProject::_GetViewContains()
{
  // assert(ValidateMember("TProject", "ViewContains", 3, __classid(TDocumentList)));
  TDocumentList *result = dynamic_cast<TDocumentList*>(BoldMembers[3]);
  return result;
}

void __fastcall TProjectList::Add(TProject *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TProjectList::IndexOf(TProject *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TProjectList::Includes(TProject *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TProject* __fastcall TProjectList::AddNew()
{
  TProject *result = dynamic_cast<TProject*>(InternalAddNew());
  return result;
}

void __fastcall TProjectList::Insert(int index, TProject *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TProject* __fastcall TProjectList::GetBoldObject(int index)
{
  TProject *result = dynamic_cast<TProject*>(GetElement(index));
  return result;
}

void __fastcall TProjectList::SetBoldObject(int index, TProject *NewObject)
{
  SetElement(index, NewObject);
}

// TVersion

TBAString* __fastcall TVersion::_Get_M_Name()
{
  // assert(ValidateMember("TVersion", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TVersion::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TVersion::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TBAInteger* __fastcall TVersion::_Get_M_Time()
{
  // assert(ValidateMember("TVersion", "Time", 1, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[1]);
  return result;
};

Integer __fastcall TVersion::_GetTime()
{
  Integer result = M_Time->AsInteger;
  return result;
}

void __fastcall TVersion::_SetTime(Integer NewValue)
{
  M_Time->AsInteger = NewValue;
}

TBABoolean* __fastcall TVersion::_Get_M_IsPublished()
{
  // assert(ValidateMember("TVersion", "IsPublished", 2, __classid(TBABoolean)));
  TBABoolean *result = dynamic_cast<TBABoolean*>(BoldMembers[2]);
  return result;
};

Boolean __fastcall TVersion::_GetIsPublished()
{
  Boolean result = M_IsPublished->AsBoolean;
  return result;
}

void __fastcall TVersion::_SetIsPublished(Boolean NewValue)
{
  M_IsPublished->AsBoolean = NewValue;
}

TBoldObjectReference* __fastcall TVersion::_Get_M_Document()
{
  // assert(ValidateMember("TVersion", "Document", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TDocument* _fastcall TVersion::_GetDocument()
{
  // assert(not assigned(M_Document->BoldObject) or (M_Document->BoldObject is TDocument), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Document, M_Document->BoldObject->ClassName, __classid(TDocument)]));
  TDocument *result = dynamic_cast<TDocument*>(M_Document->BoldObject);
  return result;
}

void __fastcall TVersion::_SetDocument(TDocument *value)
{
  M_Document->BoldObject = value;
}

void __fastcall TVersionList::Add(TVersion *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TVersionList::IndexOf(TVersion *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TVersionList::Includes(TVersion *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TVersion* __fastcall TVersionList::AddNew()
{
  TVersion *result = dynamic_cast<TVersion*>(InternalAddNew());
  return result;
}

void __fastcall TVersionList::Insert(int index, TVersion *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TVersion* __fastcall TVersionList::GetBoldObject(int index)
{
  TVersion *result = dynamic_cast<TVersion*>(GetElement(index));
  return result;
}

void __fastcall TVersionList::SetBoldObject(int index, TVersion *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "1462056398";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("DocumentClassesRoot", __classid(TDocumentClassesRootList));
  BoldObjectListClasses->AddObjectEntry("ContainsProject", __classid(TContainsProjectList));
  BoldObjectListClasses->AddObjectEntry("Document", __classid(TDocumentList));
  BoldObjectListClasses->AddObjectEntry("DocumentPart", __classid(TDocumentPartList));
  BoldObjectListClasses->AddObjectEntry("PersContext", __classid(TPersContextList));
  BoldObjectListClasses->AddObjectEntry("Person", __classid(TPersonList));
  BoldObjectListClasses->AddObjectEntry("Project", __classid(TProjectList));
  BoldObjectListClasses->AddObjectEntry("Version", __classid(TVersionList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("DocumentClassesRoot", __classid(TDocumentClassesRoot));
  BoldObjectClasses->AddObjectEntry("ContainsProject", __classid(TContainsProject));
  BoldObjectClasses->AddObjectEntry("Document", __classid(TDocument));
  BoldObjectClasses->AddObjectEntry("DocumentPart", __classid(TDocumentPart));
  BoldObjectClasses->AddObjectEntry("PersContext", __classid(TPersContext));
  BoldObjectClasses->AddObjectEntry("Person", __classid(TPerson));
  BoldObjectClasses->AddObjectEntry("Project", __classid(TProject));
  BoldObjectClasses->AddObjectEntry("Version", __classid(TVersion));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("DocumentClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}

