/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-11 17:11:02         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#if !defined (DocumentClasses_HPP)
#define DocumentClasses_HPP

// interface uses

// interface dependancies

// attribute dependancies
#include "BoldAttributes.hpp"

#include <Classes.hpp>
#include <Controls.hpp>
#include <SysUtils.hpp>
#include "BoldDefs.hpp"
#include "BoldSubscription.hpp"
#include "BoldDeriver.hpp"
#include "BoldElements.hpp"
#include "BoldDomainElement.hpp"
#include "BoldSystemRT.hpp"
#include "BoldSystem.hpp"

void unregisterCode();

// forward declarations of all classes }

class TDocumentClassesRoot;
class TDocumentClassesRootList;
class TContainsProject;
class TContainsProjectList;
class TDocument;
class TDocumentList;
class TDocumentPart;
class TDocumentPartList;
class TPersContext;
class TPersContextList;
class TPerson;
class TPersonList;
class TProject;
class TProjectList;
class TVersion;
class TVersionList;

class DELPHICLASS TDocumentClassesRoot;
class TDocumentClassesRoot : public Boldsystem::TBoldObject
{
typedef Boldsystem::TBoldObject inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TDocumentClassesRoot(Boldsystem::TBoldSystem* aBoldSystem) : Boldsystem::TBoldObject(aBoldSystem, true) { }
  #pragma option pop

  TDocumentClassesRoot* _fastcall AtTime(TBoldTimeStampType Time);
};

class DELPHICLASS TContainsProject;
class TContainsProject : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TProject* __fastcall _GetProject();
  TBoldObjectReference* __fastcall _Get_M_Project();
  TDocument* __fastcall _GetContains();
  TBoldObjectReference* __fastcall _Get_M_Contains();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TContainsProject(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  TContainsProject* _fastcall AtTime(TBoldTimeStampType Time);
  __property TBoldObjectReference* M_Project = {read=_Get_M_Project};
  __property TBoldObjectReference* M_Contains = {read=_Get_M_Contains};
  __property TProject* Project = {read=_GetProject};
  __property TDocument* Contains = {read=_GetContains};
};

class DELPHICLASS TDocument;
class TDocument : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TBAInteger* __fastcall _Get_M_ViewVersion();
  Integer __fastcall _GetViewVersion();
  TBAString* __fastcall _Get_M_Title();
  String __fastcall _GetTitle();
  void __fastcall _SetTitle(String NewValue);
  TBAInteger* __fastcall _Get_M_LastPublished();
  Integer __fastcall _GetLastPublished();
  TProject* __fastcall _GetProject();
  TBoldObjectReference* __fastcall _Get_M_Project();
  void __fastcall _SetProject(TProject *value);
  TContainsProject* __fastcall _GetContainsProject();
  TBoldObjectReference* __fastcall _Get_M_ContainsProject();
  TPerson* __fastcall _GetAuthor();
  TBoldObjectReference* __fastcall _Get_M_Author();
  void __fastcall _SetAuthor(TPerson *value);
  TVersionList* __fastcall _GetVersion();
  TDocumentPartList* __fastcall _GetDocumentPart();
protected:
  virtual TBoldDeriveAndResubscribe __fastcall GetDeriveMethodForMember(TBoldMember *Member);
  virtual TBoldReverseDerive __fastcall GetReverseDeriveMethodForMember(TBoldMember *Member);
public:
  #pragma option push -w-inl
  inline __fastcall TDocument(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  TDocument* _fastcall AtTime(TBoldTimeStampType Time);
  void __fastcall CompleteCreate(void);
  __property TBAInteger* M_ViewVersion = {read=_Get_M_ViewVersion};
  __property TBAString* M_Title = {read=_Get_M_Title};
  __property TBAInteger* M_LastPublished = {read=_Get_M_LastPublished};
  __property TBoldObjectReference* M_Project = {read=_Get_M_Project};
  __property TBoldObjectReference* M_ContainsProject = {read=_Get_M_ContainsProject};
  __property TBoldObjectReference* M_Author = {read=_Get_M_Author};
  __property TVersionList* M_Version = {read=_GetVersion};
  __property TDocumentPartList* M_DocumentPart = {read=_GetDocumentPart};
  __property Integer ViewVersion = {read=_GetViewVersion};
  __property String Title = {read=_GetTitle, write=_SetTitle};
  __property Integer LastPublished = {read=_GetLastPublished};
  __property TProject* Project = {read=_GetProject, write=_SetProject};
  __property TContainsProject* ContainsProject = {read=_GetContainsProject};
  __property TPerson* Author = {read=_GetAuthor, write=_SetAuthor};
  __property TVersionList* Version = {read=_GetVersion};
  __property TDocumentPartList* DocumentPart = {read=_GetDocumentPart};
};

class DELPHICLASS TDocumentPart;
class TDocumentPart : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Header();
  String __fastcall _GetHeader();
  void __fastcall _SetHeader(String NewValue);
  TBAString* __fastcall _Get_M_Text();
  String __fastcall _GetText();
  void __fastcall _SetText(String NewValue);
  TDocument* __fastcall _GetDocument();
  TBoldObjectReference* __fastcall _Get_M_Document();
  void __fastcall _SetDocument(TDocument *value);
  TDocumentPart* __fastcall _GetPartOf();
  TBoldObjectReference* __fastcall _Get_M_PartOf();
  void __fastcall _SetPartOf(TDocumentPart *value);
  TDocumentPartList* __fastcall _GetPart();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TDocumentPart(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  TDocumentPart* _fastcall AtTime(TBoldTimeStampType Time);
  __property TBAString* M_Header = {read=_Get_M_Header};
  __property TBAString* M_Text = {read=_Get_M_Text};
  __property TBoldObjectReference* M_Document = {read=_Get_M_Document};
  __property TBoldObjectReference* M_PartOf = {read=_Get_M_PartOf};
  __property TDocumentPartList* M_Part = {read=_GetPart};
  __property String Header = {read=_GetHeader, write=_SetHeader};
  __property String Text = {read=_GetText, write=_SetText};
  __property TDocument* Document = {read=_GetDocument, write=_SetDocument};
  __property TDocumentPart* PartOf = {read=_GetPartOf, write=_SetPartOf};
  __property TDocumentPartList* Part = {read=_GetPart};
};

class DELPHICLASS TPersContext;
class TPersContext : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TPerson* __fastcall _GetCurrentUser();
  TBoldObjectReference* __fastcall _Get_M_CurrentUser();
  void __fastcall _SetCurrentUser(TPerson *value);
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TPersContext(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBoldObjectReference* M_CurrentUser = {read=_Get_M_CurrentUser};
  __property TPerson* CurrentUser = {read=_GetCurrentUser, write=_SetCurrentUser};
};

class DELPHICLASS TPerson;
class TPerson : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Name();
  String __fastcall _GetName();
  void __fastcall _SetName(String NewValue);
  TDocumentList* __fastcall _GetDocument();
  TPersContextList* __fastcall _GetPersContext();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TPerson(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  TPerson* _fastcall AtTime(TBoldTimeStampType Time);
  __property TBAString* M_Name = {read=_Get_M_Name};
  __property TDocumentList* M_Document = {read=_GetDocument};
  __property TPersContextList* M_PersContext = {read=_GetPersContext};
  __property String Name = {read=_GetName, write=_SetName};
  __property TDocumentList* Document = {read=_GetDocument};
  __property TPersContextList* PersContext = {read=_GetPersContext};
};

class DELPHICLASS TProject;
class TProject : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Name();
  String __fastcall _GetName();
  void __fastcall _SetName(String NewValue);
  TDocumentList* __fastcall _GetContains();
  TContainsProjectList* __fastcall _GetContainsProject();
  TDocumentList* __fastcall _GetViewContains();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TProject(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_Name = {read=_Get_M_Name};
  __property TDocumentList* M_Contains = {read=_GetContains};
  __property TContainsProjectList* M_ContainsProject = {read=_GetContainsProject};
  __property TDocumentList* M_ViewContains = {read=_GetViewContains};
  __property String Name = {read=_GetName, write=_SetName};
  __property TDocumentList* Contains = {read=_GetContains};
  __property TContainsProjectList* ContainsProject = {read=_GetContainsProject};
  __property TDocumentList* ViewContains = {read=_GetViewContains};
};

class DELPHICLASS TVersion;
class TVersion : public TDocumentClassesRoot
{
typedef TDocumentClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Name();
  String __fastcall _GetName();
  void __fastcall _SetName(String NewValue);
  TBAInteger* __fastcall _Get_M_Time();
  Integer __fastcall _GetTime();
  void __fastcall _SetTime(Integer NewValue);
  TBABoolean* __fastcall _Get_M_IsPublished();
  Boolean __fastcall _GetIsPublished();
  void __fastcall _SetIsPublished(Boolean NewValue);
  TDocument* __fastcall _GetDocument();
  TBoldObjectReference* __fastcall _Get_M_Document();
  void __fastcall _SetDocument(TDocument *value);
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TVersion(Boldsystem::TBoldSystem* aBoldSystem) : TDocumentClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_Name = {read=_Get_M_Name};
  __property TBAInteger* M_Time = {read=_Get_M_Time};
  __property TBABoolean* M_IsPublished = {read=_Get_M_IsPublished};
  __property TBoldObjectReference* M_Document = {read=_Get_M_Document};
  __property String Name = {read=_GetName, write=_SetName};
  __property Integer Time = {read=_GetTime, write=_SetTime};
  __property Boolean IsPublished = {read=_GetIsPublished, write=_SetIsPublished};
  __property TDocument* Document = {read=_GetDocument, write=_SetDocument};
};

class DELPHICLASS TDocumentClassesRootList;
class TDocumentClassesRootList : public TBoldObjectList
{
protected:
  TDocumentClassesRoot* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TDocumentClassesRoot *NewObject);
public:
  int __fastcall Includes(TDocumentClassesRoot *anObject);
  int __fastcall IndexOf(TDocumentClassesRoot *anObject);
  void __fastcall Add(TDocumentClassesRoot *NewObject);
  TDocumentClassesRoot* __fastcall AddNew();
  void __fastcall Insert(int index, TDocumentClassesRoot *NewObject);
  __property TDocumentClassesRoot* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TContainsProjectList;
class TContainsProjectList : public TDocumentClassesRootList
{
protected:
  TContainsProject* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TContainsProject *NewObject);
public:
  int __fastcall Includes(TContainsProject *anObject);
  int __fastcall IndexOf(TContainsProject *anObject);
  void __fastcall Add(TContainsProject *NewObject);
  TContainsProject* __fastcall AddNew();
  void __fastcall Insert(int index, TContainsProject *NewObject);
  __property TContainsProject* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TDocumentList;
class TDocumentList : public TDocumentClassesRootList
{
protected:
  TDocument* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TDocument *NewObject);
public:
  int __fastcall Includes(TDocument *anObject);
  int __fastcall IndexOf(TDocument *anObject);
  void __fastcall Add(TDocument *NewObject);
  TDocument* __fastcall AddNew();
  void __fastcall Insert(int index, TDocument *NewObject);
  __property TDocument* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TDocumentPartList;
class TDocumentPartList : public TDocumentClassesRootList
{
protected:
  TDocumentPart* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TDocumentPart *NewObject);
public:
  int __fastcall Includes(TDocumentPart *anObject);
  int __fastcall IndexOf(TDocumentPart *anObject);
  void __fastcall Add(TDocumentPart *NewObject);
  TDocumentPart* __fastcall AddNew();
  void __fastcall Insert(int index, TDocumentPart *NewObject);
  __property TDocumentPart* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TPersContextList;
class TPersContextList : public TDocumentClassesRootList
{
protected:
  TPersContext* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TPersContext *NewObject);
public:
  int __fastcall Includes(TPersContext *anObject);
  int __fastcall IndexOf(TPersContext *anObject);
  void __fastcall Add(TPersContext *NewObject);
  TPersContext* __fastcall AddNew();
  void __fastcall Insert(int index, TPersContext *NewObject);
  __property TPersContext* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TPersonList;
class TPersonList : public TDocumentClassesRootList
{
protected:
  TPerson* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TPerson *NewObject);
public:
  int __fastcall Includes(TPerson *anObject);
  int __fastcall IndexOf(TPerson *anObject);
  void __fastcall Add(TPerson *NewObject);
  TPerson* __fastcall AddNew();
  void __fastcall Insert(int index, TPerson *NewObject);
  __property TPerson* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TProjectList;
class TProjectList : public TDocumentClassesRootList
{
protected:
  TProject* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TProject *NewObject);
public:
  int __fastcall Includes(TProject *anObject);
  int __fastcall IndexOf(TProject *anObject);
  void __fastcall Add(TProject *NewObject);
  TProject* __fastcall AddNew();
  void __fastcall Insert(int index, TProject *NewObject);
  __property TProject* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TVersionList;
class TVersionList : public TDocumentClassesRootList
{
protected:
  TVersion* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TVersion *NewObject);
public:
  int __fastcall Includes(TVersion *anObject);
  int __fastcall IndexOf(TVersion *anObject);
  void __fastcall Add(TVersion *NewObject);
  TVersion* __fastcall AddNew();
  void __fastcall Insert(int index, TVersion *NewObject);
  __property TVersion* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};


char* GeneratedCodeCRC();

#endif

