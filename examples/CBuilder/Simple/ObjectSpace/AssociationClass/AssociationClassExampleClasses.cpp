/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2001-12-17 17:29:24         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "AssociationClassExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "AssociationClassExampleClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TCompany

TBAString* __fastcall TCompany::_Get_M_name()
{
  // assert(ValidateMember("TCompany", "name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TCompany::_Getname()
{
  String result = M_name->AsString;
  return result;
}

void __fastcall TCompany::_Setname(String NewValue)
{
  M_name->AsString = NewValue;
}

TEmployeeList* __fastcall TCompany::_GetEmployee()
{
  // assert(ValidateMember("TCompany", "Employee", 1, __classid(TEmployeeList)));
  TEmployeeList *result = dynamic_cast<TEmployeeList*>(BoldMembers[1]);
  return result;
}

TJobList* __fastcall TCompany::_GetJob()
{
  // assert(ValidateMember("TCompany", "Job", 2, __classid(TJobList)));
  TJobList *result = dynamic_cast<TJobList*>(BoldMembers[2]);
  return result;
}

void __fastcall TCompanyList::Add(TCompany *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TCompanyList::IndexOf(TCompany *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TCompanyList::Includes(TCompany *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TCompany* __fastcall TCompanyList::AddNew()
{
  TCompany *result = dynamic_cast<TCompany*>(InternalAddNew());
  return result;
}

void __fastcall TCompanyList::Insert(int index, TCompany *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TCompany* __fastcall TCompanyList::GetBoldObject(int index)
{
  TCompany *result = dynamic_cast<TCompany*>(GetElement(index));
  return result;
}

void __fastcall TCompanyList::SetBoldObject(int index, TCompany *NewObject)
{
  SetElement(index, NewObject);
}

// TEmployee

TBAString* __fastcall TEmployee::_Get_M_name()
{
  // assert(ValidateMember("TEmployee", "name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TEmployee::_Getname()
{
  String result = M_name->AsString;
  return result;
}

void __fastcall TEmployee::_Setname(String NewValue)
{
  M_name->AsString = NewValue;
}

TCompanyList* __fastcall TEmployee::_GetEmployer()
{
  // assert(ValidateMember("TEmployee", "Employer", 1, __classid(TCompanyList)));
  TCompanyList *result = dynamic_cast<TCompanyList*>(BoldMembers[1]);
  return result;
}

TJobList* __fastcall TEmployee::_GetJob()
{
  // assert(ValidateMember("TEmployee", "Job", 2, __classid(TJobList)));
  TJobList *result = dynamic_cast<TJobList*>(BoldMembers[2]);
  return result;
}

void __fastcall TEmployeeList::Add(TEmployee *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TEmployeeList::IndexOf(TEmployee *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TEmployeeList::Includes(TEmployee *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TEmployee* __fastcall TEmployeeList::AddNew()
{
  TEmployee *result = dynamic_cast<TEmployee*>(InternalAddNew());
  return result;
}

void __fastcall TEmployeeList::Insert(int index, TEmployee *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TEmployee* __fastcall TEmployeeList::GetBoldObject(int index)
{
  TEmployee *result = dynamic_cast<TEmployee*>(GetElement(index));
  return result;
}

void __fastcall TEmployeeList::SetBoldObject(int index, TEmployee *NewObject)
{
  SetElement(index, NewObject);
}

// TJob

TBAString* __fastcall TJob::_Get_M_title()
{
  // assert(ValidateMember("TJob", "title", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TJob::_Gettitle()
{
  String result = M_title->AsString;
  return result;
}

void __fastcall TJob::_Settitle(String NewValue)
{
  M_title->AsString = NewValue;
}

TBACurrency* __fastcall TJob::_Get_M_salary()
{
  // assert(ValidateMember("TJob", "salary", 1, __classid(TBACurrency)));
  TBACurrency *result = dynamic_cast<TBACurrency*>(BoldMembers[1]);
  return result;
};

Currency __fastcall TJob::_Getsalary()
{
  Currency result = M_salary->AsCurrency;
  return result;
}

void __fastcall TJob::_Setsalary(Currency NewValue)
{
  M_salary->AsCurrency = NewValue;
}

TBoldObjectReference* __fastcall TJob::_Get_M_Employee()
{
  // assert(ValidateMember("TJob", "Employee", 2, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[2]);
  return result;
}

TEmployee* _fastcall TJob::_GetEmployee()
{
  // assert(not assigned(M_Employee->BoldObject) or (M_Employee->BoldObject is TEmployee), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Employee, M_Employee->BoldObject->ClassName, __classid(TEmployee)]));
  TEmployee *result = dynamic_cast<TEmployee*>(M_Employee->BoldObject);
  return result;
}

TBoldObjectReference* __fastcall TJob::_Get_M_Employer()
{
  // assert(ValidateMember("TJob", "Employer", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TCompany* _fastcall TJob::_GetEmployer()
{
  // assert(not assigned(M_Employer->BoldObject) or (M_Employer->BoldObject is TCompany), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Employer, M_Employer->BoldObject->ClassName, __classid(TCompany)]));
  TCompany *result = dynamic_cast<TCompany*>(M_Employer->BoldObject);
  return result;
}

void __fastcall TJobList::Add(TJob *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TJobList::IndexOf(TJob *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TJobList::Includes(TJob *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TJob* __fastcall TJobList::AddNew()
{
  TJob *result = dynamic_cast<TJob*>(InternalAddNew());
  return result;
}

void __fastcall TJobList::Insert(int index, TJob *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TJob* __fastcall TJobList::GetBoldObject(int index)
{
  TJob *result = dynamic_cast<TJob*>(GetElement(index));
  return result;
}

void __fastcall TJobList::SetBoldObject(int index, TJob *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "112469376";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Company", __classid(TCompanyList));
  BoldObjectListClasses->AddObjectEntry("Employee", __classid(TEmployeeList));
  BoldObjectListClasses->AddObjectEntry("Job", __classid(TJobList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Company", __classid(TCompany));
  BoldObjectClasses->AddObjectEntry("Employee", __classid(TEmployee));
  BoldObjectClasses->AddObjectEntry("Job", __classid(TJob));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("AssociationClassExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 