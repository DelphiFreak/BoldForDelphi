/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2001-12-18 09:26:07         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "DataSetExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "DataSetExampleClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TBuilding

TBAInteger* __fastcall TBuilding::_Get_M_ZipCode()
{
  // assert(ValidateMember("TBuilding", "ZipCode", 0, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[0]);
  return result;
};

Integer __fastcall TBuilding::_GetZipCode()
{
  Integer result = M_ZipCode->AsInteger;
  return result;
}

void __fastcall TBuilding::_SetZipCode(Integer NewValue)
{
  M_ZipCode->AsInteger = NewValue;
}

TBAString* __fastcall TBuilding::_Get_M_Address()
{
  // assert(ValidateMember("TBuilding", "Address", 1, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[1]);
  return result;
};

String __fastcall TBuilding::_GetAddress()
{
  String result = M_Address->AsString;
  return result;
}

void __fastcall TBuilding::_SetAddress(String NewValue)
{
  M_Address->AsString = NewValue;
}

TPersonList* __fastcall TBuilding::_GetResidents()
{
  // assert(ValidateMember("TBuilding", "Residents", 2, __classid(TPersonList)));
  TPersonList *result = dynamic_cast<TPersonList*>(BoldMembers[2]);
  return result;
}

void __fastcall TBuildingList::Add(TBuilding *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBuildingList::IndexOf(TBuilding *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBuildingList::Includes(TBuilding *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBuilding* __fastcall TBuildingList::AddNew()
{
  TBuilding *result = dynamic_cast<TBuilding*>(InternalAddNew());
  return result;
}

void __fastcall TBuildingList::Insert(int index, TBuilding *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBuilding* __fastcall TBuildingList::GetBoldObject(int index)
{
  TBuilding *result = dynamic_cast<TBuilding*>(GetElement(index));
  return result;
}

void __fastcall TBuildingList::SetBoldObject(int index, TBuilding *NewObject)
{
  SetElement(index, NewObject);
}

// TPerson

TBAString* __fastcall TPerson::_Get_M_FirstName()
{
  // assert(ValidateMember("TPerson", "FirstName", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TPerson::_GetFirstName()
{
  String result = M_FirstName->AsString;
  return result;
}

void __fastcall TPerson::_SetFirstName(String NewValue)
{
  M_FirstName->AsString = NewValue;
}

TBAString* __fastcall TPerson::_Get_M_LastName()
{
  // assert(ValidateMember("TPerson", "LastName", 1, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[1]);
  return result;
};

String __fastcall TPerson::_GetLastName()
{
  String result = M_LastName->AsString;
  return result;
}

void __fastcall TPerson::_SetLastName(String NewValue)
{
  M_LastName->AsString = NewValue;
}

TBoldObjectReference* __fastcall TPerson::_Get_M_Home()
{
  // assert(ValidateMember("TPerson", "Home", 2, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[2]);
  return result;
}

TBuilding* _fastcall TPerson::_GetHome()
{
  // assert(not assigned(M_Home->BoldObject) or (M_Home->BoldObject is TBuilding), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, Home, M_Home->BoldObject->ClassName, __classid(TBuilding)]));
  TBuilding *result = dynamic_cast<TBuilding*>(M_Home->BoldObject);
  return result;
}

void __fastcall TPerson::_SetHome(TBuilding *value)
{
  M_Home->BoldObject = value;
}

void __fastcall TPersonList::Add(TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPersonList::IndexOf(TPerson *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPersonList::Includes(TPerson *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPerson* __fastcall TPersonList::AddNew()
{
  TPerson *result = dynamic_cast<TPerson*>(InternalAddNew());
  return result;
}

void __fastcall TPersonList::Insert(int index, TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPerson* __fastcall TPersonList::GetBoldObject(int index)
{
  TPerson *result = dynamic_cast<TPerson*>(GetElement(index));
  return result;
}

void __fastcall TPersonList::SetBoldObject(int index, TPerson *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "1409208390";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Building", __classid(TBuildingList));
  BoldObjectListClasses->AddObjectEntry("Person", __classid(TPersonList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Building", __classid(TBuilding));
  BoldObjectClasses->AddObjectEntry("Person", __classid(TPerson));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("DataSetExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 