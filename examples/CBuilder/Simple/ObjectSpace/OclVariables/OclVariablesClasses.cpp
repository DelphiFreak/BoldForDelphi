/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-03-05 08:18:55         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "OclVariablesClasses.hpp"

// interface uses

// interface dependencies

// attribute dependencies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations


#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TGlobalSettings

TBAFloat* __fastcall TGlobalSettings::_Get_M_vat()
{
  // assert(ValidateMember("TGlobalSettings", "vat", 0, __classid(TBAFloat)));
  TBAFloat *result = dynamic_cast<TBAFloat*>(BoldMembers[0]);
  return result;
};

double __fastcall TGlobalSettings::_Getvat()
{
  double result = M_vat->AsFloat;
  return result;
}

void __fastcall TGlobalSettings::_Setvat(double NewValue)
{
  M_vat->AsFloat = NewValue;
}

void __fastcall TGlobalSettingsList::Add(TGlobalSettings *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TGlobalSettingsList::IndexOf(TGlobalSettings *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TGlobalSettingsList::Includes(TGlobalSettings *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TGlobalSettings* __fastcall TGlobalSettingsList::AddNew()
{
  TGlobalSettings *result = dynamic_cast<TGlobalSettings*>(InternalAddNew());
  return result;
}

void __fastcall TGlobalSettingsList::Insert(int index, TGlobalSettings *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TGlobalSettings* __fastcall TGlobalSettingsList::GetBoldObject(int index)
{
  TGlobalSettings *result = dynamic_cast<TGlobalSettings*>(GetElement(index));
  return result;
}

void __fastcall TGlobalSettingsList::SetBoldObject(int index, TGlobalSettings *NewObject)
{
  SetElement(index, NewObject);
}

// TProduct

TBAString* __fastcall TProduct::_Get_M_prodName()
{
  // assert(ValidateMember("TProduct", "prodName", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TProduct::_GetprodName()
{
  String result = M_prodName->AsString;
  return result;
}

void __fastcall TProduct::_SetprodName(String NewValue)
{
  M_prodName->AsString = NewValue;
}

TBACurrency* __fastcall TProduct::_Get_M_net_Price()
{
  // assert(ValidateMember("TProduct", "net_Price", 1, __classid(TBACurrency)));
  TBACurrency *result = dynamic_cast<TBACurrency*>(BoldMembers[1]);
  return result;
};

Currency __fastcall TProduct::_Getnet_Price()
{
  Currency result = M_net_Price->AsCurrency;
  return result;
}

void __fastcall TProduct::_Setnet_Price(Currency NewValue)
{
  M_net_Price->AsCurrency = NewValue;
}

void __fastcall TProductList::Add(TProduct *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TProductList::IndexOf(TProduct *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TProductList::Includes(TProduct *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TProduct* __fastcall TProductList::AddNew()
{
  TProduct *result = dynamic_cast<TProduct*>(InternalAddNew());
  return result;
}

void __fastcall TProductList::Insert(int index, TProduct *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TProduct* __fastcall TProductList::GetBoldObject(int index)
{
  TProduct *result = dynamic_cast<TProduct*>(GetElement(index));
  return result;
}

void __fastcall TProductList::SetBoldObject(int index, TProduct *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "379036377";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("GlobalSettings", __classid(TGlobalSettingsList));
  BoldObjectListClasses->AddObjectEntry("Product", __classid(TProductList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("GlobalSettings", __classid(TGlobalSettings));
  BoldObjectClasses->AddObjectEntry("Product", __classid(TProduct));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor_OclVariablesClasses = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("OclVariablesClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor_OclVariablesClasses != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor_OclVariablesClasses);
  }
}
 