/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-15 14:39:18         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#if !defined (ReverseDeriveExampleClasses_HPP)
#define ReverseDeriveExampleClasses_HPP

// interface uses

// interface dependancies

// attribute dependancies
#include "BoldAttributes.hpp"

#include <Classes.hpp>
#include <Controls.hpp>
#include <SysUtils.hpp>
#include "BoldDefs.hpp"
#include "BoldSubscription.hpp"
#include "BoldDeriver.hpp"
#include "BoldElements.hpp"
#include "BoldDomainElement.hpp"
#include "BoldSystemRT.hpp"
#include "BoldSystem.hpp"

void unregisterCode();

// forward declarations of all classes }

class TBusinessClassesRoot;
class TBusinessClassesRootList;
class TFamily;
class TFamilyList;
class TMyFont;
class TMyFontList;
class TPerson;
class TPersonList;

class DELPHICLASS TBusinessClassesRoot;
class TBusinessClassesRoot : public Boldsystem::TBoldObject
{
typedef Boldsystem::TBoldObject inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TBusinessClassesRoot(Boldsystem::TBoldSystem* aBoldSystem) : Boldsystem::TBoldObject(aBoldSystem, true) { }
  #pragma option pop

};

class DELPHICLASS TFamily;
class TFamily : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_familyName();
  String __fastcall _GetfamilyName();
  void __fastcall _SetfamilyName(String NewValue);
  TPersonList* __fastcall _GetfamilyMembers();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TFamily(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  static TFamily* __fastcall FindByName(TBoldSystem BoldSystem, AnsiString familyName);
  __property TBAString* M_familyName = {read=_Get_M_familyName};
  __property TPersonList* M_familyMembers = {read=_GetfamilyMembers};
  __property String familyName = {read=_GetfamilyName, write=_SetfamilyName};
  __property TPersonList* familyMembers = {read=_GetfamilyMembers};
};

class DELPHICLASS TMyFont;
class TMyFont : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TBABoolean* __fastcall _Get_M_blink();
  Boolean __fastcall _Getblink();
  void __fastcall _Setblink(Boolean NewValue);
  TBABoolean* __fastcall _Get_M_bold();
  Boolean __fastcall _Getbold();
  void __fastcall _Setbold(Boolean NewValue);
  TBABoolean* __fastcall _Get_M_noValues();
  Boolean __fastcall _GetnoValues();
  void __fastcall _SetnoValues(Boolean NewValue);
  TBABoolean* __fastcall _Get_M_underline();
  Boolean __fastcall _Getunderline();
  void __fastcall _Setunderline(Boolean NewValue);
  TBAString* __fastcall _Get_M_resultString();
  String __fastcall _GetresultString();
  TBAString* __fastcall _Get_M_name();
  String __fastcall _Getname();
  void __fastcall _Setname(String NewValue);
  void __fastcall SubscribeToAttributes(TBoldSubscriber* Subscriber);
protected:
  virtual void __fastcall _noValues_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
  virtual void __fastcall _noValues_ReverseDerive(TObject *DerivedObject);
  virtual void __fastcall _resultString_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
  virtual TBoldDeriveAndResubscribe __fastcall GetDeriveMethodForMember(TBoldMember *Member);
  virtual TBoldReverseDerive __fastcall GetReverseDeriveMethodForMember(TBoldMember *Member);
public:
  #pragma option push -w-inl
  inline __fastcall TMyFont(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  void __fastcall ResetAll(void);
  __property TBABoolean* M_blink = {read=_Get_M_blink};
  __property TBABoolean* M_bold = {read=_Get_M_bold};
  __property TBABoolean* M_noValues = {read=_Get_M_noValues};
  __property TBABoolean* M_underline = {read=_Get_M_underline};
  __property TBAString* M_resultString = {read=_Get_M_resultString};
  __property TBAString* M_name = {read=_Get_M_name};
  __property Boolean blink = {read=_Getblink, write=_Setblink};
  __property Boolean bold = {read=_Getbold, write=_Setbold};
  __property Boolean noValues = {read=_GetnoValues, write=_SetnoValues};
  __property Boolean underline = {read=_Getunderline, write=_Setunderline};
  __property String resultString = {read=_GetresultString};
  __property String name = {read=_Getname, write=_Setname};
};

class DELPHICLASS TPerson;
class TPerson : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_fullName();
  String __fastcall _GetfullName();
  void __fastcall _SetfullName(String NewValue);
  TBAString* __fastcall _Get_M_firstName();
  String __fastcall _GetfirstName();
  void __fastcall _SetfirstName(String NewValue);
  TFamily* __fastcall _Getfamily();
  TBoldObjectReference* __fastcall _Get_M_family();
  void __fastcall _Setfamily(TFamily *value);
protected:
  virtual void __fastcall _fullName_DeriveAndSubscribe(TObject *DerivedObject, TBoldSubscriber *Subscriber);
  virtual void __fastcall _fullName_ReverseDerive(TObject *DerivedObject);
  virtual TBoldDeriveAndResubscribe __fastcall GetDeriveMethodForMember(TBoldMember *Member);
  virtual TBoldReverseDerive __fastcall GetReverseDeriveMethodForMember(TBoldMember *Member);
public:
  #pragma option push -w-inl
  inline __fastcall TPerson(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_fullName = {read=_Get_M_fullName};
  __property TBAString* M_firstName = {read=_Get_M_firstName};
  __property TBoldObjectReference* M_family = {read=_Get_M_family};
  __property String fullName = {read=_GetfullName, write=_SetfullName};
  __property String firstName = {read=_GetfirstName, write=_SetfirstName};
  __property TFamily* family = {read=_Getfamily, write=_Setfamily};
};

class DELPHICLASS TBusinessClassesRootList;
class TBusinessClassesRootList : public TBoldObjectList
{
protected:
  TBusinessClassesRoot* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TBusinessClassesRoot *NewObject);
public:
  int __fastcall Includes(TBusinessClassesRoot *anObject);
  int __fastcall IndexOf(TBusinessClassesRoot *anObject);
  void __fastcall Add(TBusinessClassesRoot *NewObject);
  TBusinessClassesRoot* __fastcall AddNew();
  void __fastcall Insert(int index, TBusinessClassesRoot *NewObject);
  __property TBusinessClassesRoot* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TFamilyList;
class TFamilyList : public TBusinessClassesRootList
{
protected:
  TFamily* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TFamily *NewObject);
public:
  int __fastcall Includes(TFamily *anObject);
  int __fastcall IndexOf(TFamily *anObject);
  void __fastcall Add(TFamily *NewObject);
  TFamily* __fastcall AddNew();
  void __fastcall Insert(int index, TFamily *NewObject);
  __property TFamily* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TMyFontList;
class TMyFontList : public TBusinessClassesRootList
{
protected:
  TMyFont* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TMyFont *NewObject);
public:
  int __fastcall Includes(TMyFont *anObject);
  int __fastcall IndexOf(TMyFont *anObject);
  void __fastcall Add(TMyFont *NewObject);
  TMyFont* __fastcall AddNew();
  void __fastcall Insert(int index, TMyFont *NewObject);
  __property TMyFont* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TPersonList;
class TPersonList : public TBusinessClassesRootList
{
protected:
  TPerson* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TPerson *NewObject);
public:
  int __fastcall Includes(TPerson *anObject);
  int __fastcall IndexOf(TPerson *anObject);
  void __fastcall Add(TPerson *NewObject);
  TPerson* __fastcall AddNew();
  void __fastcall Insert(int index, TPerson *NewObject);
  __property TPerson* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};


char* GeneratedCodeCRC();

#endif

