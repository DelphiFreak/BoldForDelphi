//**********************************************************//
//                                                          //
//       Bold for Delphi Stub File                          //
//                                                          //
//       Autogenerated file for method implementations      //
//                                                          //
//**********************************************************//

// 
#include "ConstraintExampleClasses.hpp"

Boolean __fastcall TBusinessClassesRoot::MayUpdate(void)
{
  //return TBoldObject::MayUpdate();

  AnsiString message;
  TBoldFailureReason *failure;

  // this method will be run automatically for new and deleted objects, but not for objects
  // that just update some members.

  Boolean result = true;

  if (BoldExistenceState == besExisting)
  {
    result = (EvaluateExpressionAsString("constraints->select(a|not a)->size = 0", brDefault, false, NULL) == "Y");
    if (!result)
    {
      // retrieve the message from the first broken constraint
      message = EvaluateExpressionAsString("constraints->select(a|not a)->first", 10, false, NULL);
      failure = new TBoldFailureReason(message, this);
      failure->MessageFormatStr = "Validation error for %s: %2:s";
      SetBoldLastFailureReason(failure);
    }
  }
  return (result && TBoldObject::MayUpdate());
}

Boolean __fastcall TBusinessClassesRoot::ReceiveQueryFromOwned(TObject *Originator, TBoldEvent OriginalEvent, const System::TVarRec * Args, const int Args_Size, Boldsubscription::TBoldSubscriber* Subscriber)
{
 // return TBoldObject::ReceiveQueryFromOwned(Originator, OriginalEvent, Args, Subscriber);

  Boolean result = TBoldObject::ReceiveQueryFromOwned(Originator, OriginalEvent, Args, Args_Size, Subscriber);

  // we must catch the update of our members.

  if ((OriginalEvent == bqMayUpdate) && (dynamic_cast<TBoldMember*>(Originator) != 0) && (((TBoldMember*)Originator)->OwningObject == this))
    result = (result && MayUpdate());

  return result;

}

void __fastcall TOrder::CompleteCreate(void)
{
  TBusinessClassesRoot::CompleteCreate();
  orderDate = Now();
}
 