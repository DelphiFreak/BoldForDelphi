/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-03 15:20:25         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "ConstraintExampleClasses.hpp"

// interface uses
#pragma link "BoldValueSpaceInterfaces"

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "ConstraintExampleClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TCustomer

TBAString* __fastcall TCustomer::_Get_M_name()
{
  // assert(ValidateMember("TCustomer", "name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TCustomer::_Getname()
{
  String result = M_name->AsString;
  return result;
}

void __fastcall TCustomer::_Setname(String NewValue)
{
  M_name->AsString = NewValue;
}

TBACurrency* __fastcall TCustomer::_Get_M_creditLimit()
{
  // assert(ValidateMember("TCustomer", "creditLimit", 1, __classid(TBACurrency)));
  TBACurrency *result = dynamic_cast<TBACurrency*>(BoldMembers[1]);
  return result;
};

Currency __fastcall TCustomer::_GetcreditLimit()
{
  Currency result = M_creditLimit->AsCurrency;
  return result;
}

void __fastcall TCustomer::_SetcreditLimit(Currency NewValue)
{
  M_creditLimit->AsCurrency = NewValue;
}

TBAString* __fastcall TCustomer::_Get_M_shippingaddress()
{
  // assert(ValidateMember("TCustomer", "shippingaddress", 2, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[2]);
  return result;
};

String __fastcall TCustomer::_Getshippingaddress()
{
  String result = M_shippingaddress->AsString;
  return result;
}

void __fastcall TCustomer::_Setshippingaddress(String NewValue)
{
  M_shippingaddress->AsString = NewValue;
}

TBAString* __fastcall TCustomer::_Get_M_creditCardNo()
{
  // assert(ValidateMember("TCustomer", "creditCardNo", 3, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[3]);
  return result;
};

String __fastcall TCustomer::_GetcreditCardNo()
{
  String result = M_creditCardNo->AsString;
  return result;
}

void __fastcall TCustomer::_SetcreditCardNo(String NewValue)
{
  M_creditCardNo->AsString = NewValue;
}

TOrderList* __fastcall TCustomer::_Getorders()
{
  // assert(ValidateMember("TCustomer", "orders", 4, __classid(TOrderList)));
  TOrderList *result = dynamic_cast<TOrderList*>(BoldMembers[4]);
  return result;
}

void __fastcall TCustomerList::Add(TCustomer *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TCustomerList::IndexOf(TCustomer *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TCustomerList::Includes(TCustomer *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TCustomer* __fastcall TCustomerList::AddNew()
{
  TCustomer *result = dynamic_cast<TCustomer*>(InternalAddNew());
  return result;
}

void __fastcall TCustomerList::Insert(int index, TCustomer *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TCustomer* __fastcall TCustomerList::GetBoldObject(int index)
{
  TCustomer *result = dynamic_cast<TCustomer*>(GetElement(index));
  return result;
}

void __fastcall TCustomerList::SetBoldObject(int index, TCustomer *NewObject)
{
  SetElement(index, NewObject);
}

// TOrder

TBADate* __fastcall TOrder::_Get_M_orderDate()
{
  // assert(ValidateMember("TOrder", "orderDate", 0, __classid(TBADate)));
  TBADate *result = dynamic_cast<TBADate*>(BoldMembers[0]);
  return result;
};

TDate __fastcall TOrder::_GetorderDate()
{
  TDate result = M_orderDate->AsDate;
  return result;
}

void __fastcall TOrder::_SetorderDate(TDate NewValue)
{
  M_orderDate->AsDate = NewValue;
}

TBADate* __fastcall TOrder::_Get_M_shippingDate()
{
  // assert(ValidateMember("TOrder", "shippingDate", 1, __classid(TBADate)));
  TBADate *result = dynamic_cast<TBADate*>(BoldMembers[1]);
  return result;
};

TDate __fastcall TOrder::_GetshippingDate()
{
  TDate result = M_shippingDate->AsDate;
  return result;
}

void __fastcall TOrder::_SetshippingDate(TDate NewValue)
{
  M_shippingDate->AsDate = NewValue;
}

TBAFloat* __fastcall TOrder::_Get_M_orderSum()
{
  // assert(ValidateMember("TOrder", "orderSum", 2, __classid(TBAFloat)));
  TBAFloat *result = dynamic_cast<TBAFloat*>(BoldMembers[2]);
  return result;
};

double __fastcall TOrder::_GetorderSum()
{
  double result = M_orderSum->AsFloat;
  return result;
}

TBoldObjectReference* __fastcall TOrder::_Get_M_customer()
{
  // assert(ValidateMember("TOrder", "customer", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TCustomer* _fastcall TOrder::_Getcustomer()
{
  // assert(not assigned(M_customer->BoldObject) or (M_customer->BoldObject is TCustomer), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, customer, M_customer->BoldObject->ClassName, __classid(TCustomer)]));
  TCustomer *result = dynamic_cast<TCustomer*>(M_customer->BoldObject);
  return result;
}

void __fastcall TOrder::_Setcustomer(TCustomer *value)
{
  M_customer->BoldObject = value;
}

TOrderItemList* __fastcall TOrder::_Getitems()
{
  // assert(ValidateMember("TOrder", "items", 4, __classid(TOrderItemList)));
  TOrderItemList *result = dynamic_cast<TOrderItemList*>(BoldMembers[4]);
  return result;
}

void __fastcall TOrderList::Add(TOrder *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TOrderList::IndexOf(TOrder *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TOrderList::Includes(TOrder *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TOrder* __fastcall TOrderList::AddNew()
{
  TOrder *result = dynamic_cast<TOrder*>(InternalAddNew());
  return result;
}

void __fastcall TOrderList::Insert(int index, TOrder *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TOrder* __fastcall TOrderList::GetBoldObject(int index)
{
  TOrder *result = dynamic_cast<TOrder*>(GetElement(index));
  return result;
}

void __fastcall TOrderList::SetBoldObject(int index, TOrder *NewObject)
{
  SetElement(index, NewObject);
}

// TOrderItem

TBAInteger* __fastcall TOrderItem::_Get_M_qty()
{
  // assert(ValidateMember("TOrderItem", "qty", 0, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[0]);
  return result;
};

Integer __fastcall TOrderItem::_Getqty()
{
  Integer result = M_qty->AsInteger;
  return result;
}

void __fastcall TOrderItem::_Setqty(Integer NewValue)
{
  M_qty->AsInteger = NewValue;
}

TBAFloat* __fastcall TOrderItem::_Get_M_itemSum()
{
  // assert(ValidateMember("TOrderItem", "itemSum", 1, __classid(TBAFloat)));
  TBAFloat *result = dynamic_cast<TBAFloat*>(BoldMembers[1]);
  return result;
};

double __fastcall TOrderItem::_GetitemSum()
{
  double result = M_itemSum->AsFloat;
  return result;
}

TBoldObjectReference* __fastcall TOrderItem::_Get_M_order()
{
  // assert(ValidateMember("TOrderItem", "order", 2, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[2]);
  return result;
}

TOrder* _fastcall TOrderItem::_Getorder()
{
  // assert(not assigned(M_order->BoldObject) or (M_order->BoldObject is TOrder), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, order, M_order->BoldObject->ClassName, __classid(TOrder)]));
  TOrder *result = dynamic_cast<TOrder*>(M_order->BoldObject);
  return result;
}

void __fastcall TOrderItem::_Setorder(TOrder *value)
{
  M_order->BoldObject = value;
}

TBoldObjectReference* __fastcall TOrderItem::_Get_M_part()
{
  // assert(ValidateMember("TOrderItem", "part", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TPart* _fastcall TOrderItem::_Getpart()
{
  // assert(not assigned(M_part->BoldObject) or (M_part->BoldObject is TPart), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, part, M_part->BoldObject->ClassName, __classid(TPart)]));
  TPart *result = dynamic_cast<TPart*>(M_part->BoldObject);
  return result;
}

void __fastcall TOrderItem::_Setpart(TPart *value)
{
  M_part->BoldObject = value;
}

void __fastcall TOrderItemList::Add(TOrderItem *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TOrderItemList::IndexOf(TOrderItem *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TOrderItemList::Includes(TOrderItem *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TOrderItem* __fastcall TOrderItemList::AddNew()
{
  TOrderItem *result = dynamic_cast<TOrderItem*>(InternalAddNew());
  return result;
}

void __fastcall TOrderItemList::Insert(int index, TOrderItem *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TOrderItem* __fastcall TOrderItemList::GetBoldObject(int index)
{
  TOrderItem *result = dynamic_cast<TOrderItem*>(GetElement(index));
  return result;
}

void __fastcall TOrderItemList::SetBoldObject(int index, TOrderItem *NewObject)
{
  SetElement(index, NewObject);
}

// TPart

TBAString* __fastcall TPart::_Get_M_name()
{
  // assert(ValidateMember("TPart", "name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TPart::_Getname()
{
  String result = M_name->AsString;
  return result;
}

void __fastcall TPart::_Setname(String NewValue)
{
  M_name->AsString = NewValue;
}

TBACurrency* __fastcall TPart::_Get_M_price()
{
  // assert(ValidateMember("TPart", "price", 1, __classid(TBACurrency)));
  TBACurrency *result = dynamic_cast<TBACurrency*>(BoldMembers[1]);
  return result;
};

Currency __fastcall TPart::_Getprice()
{
  Currency result = M_price->AsCurrency;
  return result;
}

void __fastcall TPart::_Setprice(Currency NewValue)
{
  M_price->AsCurrency = NewValue;
}

TOrderItemList* __fastcall TPart::_Getorderitems()
{
  // assert(ValidateMember("TPart", "orderitems", 2, __classid(TOrderItemList)));
  TOrderItemList *result = dynamic_cast<TOrderItemList*>(BoldMembers[2]);
  return result;
}

void __fastcall TPartList::Add(TPart *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPartList::IndexOf(TPart *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPartList::Includes(TPart *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPart* __fastcall TPartList::AddNew()
{
  TPart *result = dynamic_cast<TPart*>(InternalAddNew());
  return result;
}

void __fastcall TPartList::Insert(int index, TPart *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPart* __fastcall TPartList::GetBoldObject(int index)
{
  TPart *result = dynamic_cast<TPart*>(GetElement(index));
  return result;
}

void __fastcall TPartList::SetBoldObject(int index, TPart *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "33704237";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Customer", __classid(TCustomerList));
  BoldObjectListClasses->AddObjectEntry("Order", __classid(TOrderList));
  BoldObjectListClasses->AddObjectEntry("OrderItem", __classid(TOrderItemList));
  BoldObjectListClasses->AddObjectEntry("Part", __classid(TPartList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Customer", __classid(TCustomer));
  BoldObjectClasses->AddObjectEntry("Order", __classid(TOrder));
  BoldObjectClasses->AddObjectEntry("OrderItem", __classid(TOrderItem));
  BoldObjectClasses->AddObjectEntry("Part", __classid(TPart));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("ConstraintExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 