/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2002-01-04 11:59:19         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "QueryDemoClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "QueryDemoClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TThing

TBAString* __fastcall TThing::_Get_M_Name()
{
  // assert(ValidateMember("TThing", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TThing::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TThing::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TBoldObjectReference* __fastcall TThing::_Get_M_partof()
{
  // assert(ValidateMember("TThing", "partof", 1, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[1]);
  return result;
}

TThing* _fastcall TThing::_Getpartof()
{
  // assert(not assigned(M_partof->BoldObject) or (M_partof->BoldObject is TThing), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, partof, M_partof->BoldObject->ClassName, __classid(TThing)]));
  TThing *result = dynamic_cast<TThing*>(M_partof->BoldObject);
  return result;
}

void __fastcall TThing::_Setpartof(TThing *value)
{
  M_partof->BoldObject = value;
}

TThingList* __fastcall TThing::_Getparts()
{
  // assert(ValidateMember("TThing", "parts", 2, __classid(TThingList)));
  TThingList *result = dynamic_cast<TThingList*>(BoldMembers[2]);
  return result;
}

void __fastcall TThingList::Add(TThing *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TThingList::IndexOf(TThing *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TThingList::Includes(TThing *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TThing* __fastcall TThingList::AddNew()
{
  TThing *result = dynamic_cast<TThing*>(InternalAddNew());
  return result;
}

void __fastcall TThingList::Insert(int index, TThing *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TThing* __fastcall TThingList::GetBoldObject(int index)
{
  TThing *result = dynamic_cast<TThing*>(GetElement(index));
  return result;
}

void __fastcall TThingList::SetBoldObject(int index, TThing *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "101090197";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("Thing", __classid(TThingList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Thing", __classid(TThing));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("QueryDemoClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}

