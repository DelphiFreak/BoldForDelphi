/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2001-12-07 15:10:52         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "TreeViewExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations


#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TBikeFrame

TBAString* __fastcall TBikeFrame::_Get_M_Name()
{
  // assert(ValidateMember("TBikeFrame", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TBikeFrame::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TBikeFrame::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TBAInteger* __fastcall TBikeFrame::_Get_M_FrameSize()
{
  // assert(ValidateMember("TBikeFrame", "FrameSize", 1, __classid(TBAInteger)));
  TBAInteger *result = dynamic_cast<TBAInteger*>(BoldMembers[1]);
  return result;
};

Integer __fastcall TBikeFrame::_GetFrameSize()
{
  Integer result = M_FrameSize->AsInteger;
  return result;
}

void __fastcall TBikeFrame::_SetFrameSize(Integer NewValue)
{
  M_FrameSize->AsInteger = NewValue;
}

TMTBList* __fastcall TBikeFrame::_GetPartOf()
{
  // assert(ValidateMember("TBikeFrame", "PartOf", 2, __classid(TMTBList)));
  TMTBList *result = dynamic_cast<TMTBList*>(BoldMembers[2]);
  return result;
}

void __fastcall TBikeFrameList::Add(TBikeFrame *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBikeFrameList::IndexOf(TBikeFrame *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBikeFrameList::Includes(TBikeFrame *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBikeFrame* __fastcall TBikeFrameList::AddNew()
{
  TBikeFrame *result = dynamic_cast<TBikeFrame*>(InternalAddNew());
  return result;
}

void __fastcall TBikeFrameList::Insert(int index, TBikeFrame *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBikeFrame* __fastcall TBikeFrameList::GetBoldObject(int index)
{
  TBikeFrame *result = dynamic_cast<TBikeFrame*>(GetElement(index));
  return result;
}

void __fastcall TBikeFrameList::SetBoldObject(int index, TBikeFrame *NewObject)
{
  SetElement(index, NewObject);
}

// TMTB

TBAString* __fastcall TMTB::_Get_M_Name()
{
  // assert(ValidateMember("TMTB", "Name", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TMTB::_GetName()
{
  String result = M_Name->AsString;
  return result;
}

void __fastcall TMTB::_SetName(String NewValue)
{
  M_Name->AsString = NewValue;
}

TPartsList* __fastcall TMTB::_GetConsistsOf()
{
  // assert(ValidateMember("TMTB", "ConsistsOf", 1, __classid(TPartsList)));
  TPartsList *result = dynamic_cast<TPartsList*>(BoldMembers[1]);
  return result;
}

TMTB_CompsList* __fastcall TMTB::_GetMTB_Comps()
{
  // assert(ValidateMember("TMTB", "MTB_Comps", 2, __classid(TMTB_CompsList)));
  TMTB_CompsList *result = dynamic_cast<TMTB_CompsList*>(BoldMembers[2]);
  return result;
}

TBoldObjectReference* __fastcall TMTB::_Get_M_BuiltAround()
{
  // assert(ValidateMember("TMTB", "BuiltAround", 3, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[3]);
  return result;
}

TBikeFrame* _fastcall TMTB::_GetBuiltAround()
{
  // assert(not assigned(M_BuiltAround->BoldObject) or (M_BuiltAround->BoldObject is TBikeFrame), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, BuiltAround, M_BuiltAround->BoldObject->ClassName, __classid(TBikeFrame)]));
  TBikeFrame *result = dynamic_cast<TBikeFrame*>(M_BuiltAround->BoldObject);
  return result;
}

void __fastcall TMTB::_SetBuiltAround(TBikeFrame *value)
{
  M_BuiltAround->BoldObject = value;
}

void __fastcall TMTBList::Add(TMTB *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TMTBList::IndexOf(TMTB *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TMTBList::Includes(TMTB *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TMTB* __fastcall TMTBList::AddNew()
{
  TMTB *result = dynamic_cast<TMTB*>(InternalAddNew());
  return result;
}

void __fastcall TMTBList::Insert(int index, TMTB *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TMTB* __fastcall TMTBList::GetBoldObject(int index)
{
  TMTB *result = dynamic_cast<TMTB*>(GetElement(index));
  return result;
}

void __fastcall TMTBList::SetBoldObject(int index, TMTB *NewObject)
{
  SetElement(index, NewObject);
}

// TMTB_Comps

TBoldObjectReference* __fastcall TMTB_Comps::_Get_M_PartOf()
{
  // assert(ValidateMember("TMTB_Comps", "PartOf", 0, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[0]);
  return result;
}

TMTB* _fastcall TMTB_Comps::_GetPartOf()
{
  // assert(not assigned(M_PartOf->BoldObject) or (M_PartOf->BoldObject is TMTB), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, PartOf, M_PartOf->BoldObject->ClassName, __classid(TMTB)]));
  TMTB *result = dynamic_cast<TMTB*>(M_PartOf->BoldObject);
  return result;
}

TBoldObjectReference* __fastcall TMTB_Comps::_Get_M_ConsistsOf()
{
  // assert(ValidateMember("TMTB_Comps", "ConsistsOf", 1, __classid(TBoldObjectReference)));
  TBoldObjectReference *result = dynamic_cast<TBoldObjectReference*>(BoldMembers[1]);
  return result;
}

TParts* _fastcall TMTB_Comps::_GetConsistsOf()
{
  // assert(not assigned(M_ConsistsOf->BoldObject) or (M_ConsistsOf->BoldObject is TParts), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, ConsistsOf, M_ConsistsOf->BoldObject->ClassName, __classid(TParts)]));
  TParts *result = dynamic_cast<TParts*>(M_ConsistsOf->BoldObject);
  return result;
}

void __fastcall TMTB_CompsList::Add(TMTB_Comps *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TMTB_CompsList::IndexOf(TMTB_Comps *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TMTB_CompsList::Includes(TMTB_Comps *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TMTB_Comps* __fastcall TMTB_CompsList::AddNew()
{
  TMTB_Comps *result = dynamic_cast<TMTB_Comps*>(InternalAddNew());
  return result;
}

void __fastcall TMTB_CompsList::Insert(int index, TMTB_Comps *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TMTB_Comps* __fastcall TMTB_CompsList::GetBoldObject(int index)
{
  TMTB_Comps *result = dynamic_cast<TMTB_Comps*>(GetElement(index));
  return result;
}

void __fastcall TMTB_CompsList::SetBoldObject(int index, TMTB_Comps *NewObject)
{
  SetElement(index, NewObject);
}

// TParts

TBAString* __fastcall TParts::_Get_M_Model()
{
  // assert(ValidateMember("TParts", "Model", 0, __classid(TBAString)));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TParts::_GetModel()
{
  String result = M_Model->AsString;
  return result;
}

void __fastcall TParts::_SetModel(String NewValue)
{
  M_Model->AsString = NewValue;
}

TMTBList* __fastcall TParts::_GetPartOf()
{
  // assert(ValidateMember("TParts", "PartOf", 1, __classid(TMTBList)));
  TMTBList *result = dynamic_cast<TMTBList*>(BoldMembers[1]);
  return result;
}

TMTB_CompsList* __fastcall TParts::_GetMTB_Comps()
{
  // assert(ValidateMember("TParts", "MTB_Comps", 2, __classid(TMTB_CompsList)));
  TMTB_CompsList *result = dynamic_cast<TMTB_CompsList*>(BoldMembers[2]);
  return result;
}

void __fastcall TPartsList::Add(TParts *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPartsList::IndexOf(TParts *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPartsList::Includes(TParts *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TParts* __fastcall TPartsList::AddNew()
{
  TParts *result = dynamic_cast<TParts*>(InternalAddNew());
  return result;
}

void __fastcall TPartsList::Insert(int index, TParts *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TParts* __fastcall TPartsList::GetBoldObject(int index)
{
  TParts *result = dynamic_cast<TParts*>(GetElement(index));
  return result;
}

void __fastcall TPartsList::SetBoldObject(int index, TParts *NewObject)
{
  SetElement(index, NewObject);
}

// TBrake

void __fastcall TBrakeList::Add(TBrake *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBrakeList::IndexOf(TBrake *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBrakeList::Includes(TBrake *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBrake* __fastcall TBrakeList::AddNew()
{
  TBrake *result = dynamic_cast<TBrake*>(InternalAddNew());
  return result;
}

void __fastcall TBrakeList::Insert(int index, TBrake *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBrake* __fastcall TBrakeList::GetBoldObject(int index)
{
  TBrake *result = dynamic_cast<TBrake*>(GetElement(index));
  return result;
}

void __fastcall TBrakeList::SetBoldObject(int index, TBrake *NewObject)
{
  SetElement(index, NewObject);
}

// TGear

void __fastcall TGearList::Add(TGear *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TGearList::IndexOf(TGear *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TGearList::Includes(TGear *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TGear* __fastcall TGearList::AddNew()
{
  TGear *result = dynamic_cast<TGear*>(InternalAddNew());
  return result;
}

void __fastcall TGearList::Insert(int index, TGear *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TGear* __fastcall TGearList::GetBoldObject(int index)
{
  TGear *result = dynamic_cast<TGear*>(GetElement(index));
  return result;
}

void __fastcall TGearList::SetBoldObject(int index, TGear *NewObject)
{
  SetElement(index, NewObject);
}

// TWheel

void __fastcall TWheelList::Add(TWheel *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TWheelList::IndexOf(TWheel *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TWheelList::Includes(TWheel *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TWheel* __fastcall TWheelList::AddNew()
{
  TWheel *result = dynamic_cast<TWheel*>(InternalAddNew());
  return result;
}

void __fastcall TWheelList::Insert(int index, TWheel *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TWheel* __fastcall TWheelList::GetBoldObject(int index)
{
  TWheel *result = dynamic_cast<TWheel*>(GetElement(index));
  return result;
}

void __fastcall TWheelList::SetBoldObject(int index, TWheel *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "1108431894";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("BikeFrame", __classid(TBikeFrameList));
  BoldObjectListClasses->AddObjectEntry("MTB", __classid(TMTBList));
  BoldObjectListClasses->AddObjectEntry("MTB_Comps", __classid(TMTB_CompsList));
  BoldObjectListClasses->AddObjectEntry("Parts", __classid(TPartsList));
  BoldObjectListClasses->AddObjectEntry("Brake", __classid(TBrakeList));
  BoldObjectListClasses->AddObjectEntry("Gear", __classid(TGearList));
  BoldObjectListClasses->AddObjectEntry("Wheel", __classid(TWheelList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("BikeFrame", __classid(TBikeFrame));
  BoldObjectClasses->AddObjectEntry("MTB", __classid(TMTB));
  BoldObjectClasses->AddObjectEntry("MTB_Comps", __classid(TMTB_Comps));
  BoldObjectClasses->AddObjectEntry("Parts", __classid(TParts));
  BoldObjectClasses->AddObjectEntry("Brake", __classid(TBrake));
  BoldObjectClasses->AddObjectEntry("Gear", __classid(TGear));
  BoldObjectClasses->AddObjectEntry("Wheel", __classid(TWheel));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("TreeViewExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 