/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2001-12-07 15:10:52         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#if !defined (TreeViewExampleClasses_HPP)
#define TreeViewExampleClasses_HPP

// interface uses

// interface dependancies

// attribute dependancies
#include "BoldAttributes.hpp"

#include <Classes.hpp>
#include <Controls.hpp>
#include <SysUtils.hpp>
#include "BoldDefs.hpp"
#include "BoldSubscription.hpp"
#include "BoldDeriver.hpp"
#include "BoldElements.hpp"
#include "BoldDomainElement.hpp"
#include "BoldSystemRT.hpp"
#include "BoldSystem.hpp"

void unregisterCode();

// forward declarations of all classes }

class TBusinessClassesRoot;
class TBusinessClassesRootList;
class TBikeFrame;
class TBikeFrameList;
class TMTB;
class TMTBList;
class TMTB_Comps;
class TMTB_CompsList;
class TParts;
class TPartsList;
class TBrake;
class TBrakeList;
class TGear;
class TGearList;
class TWheel;
class TWheelList;

class DELPHICLASS TBusinessClassesRoot;
class TBusinessClassesRoot : public Boldsystem::TBoldObject
{
typedef Boldsystem::TBoldObject inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TBusinessClassesRoot(Boldsystem::TBoldSystem* aBoldSystem) : Boldsystem::TBoldObject(aBoldSystem, true) { }
  #pragma option pop

};

class DELPHICLASS TBikeFrame;
class TBikeFrame : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Name();
  String __fastcall _GetName();
  void __fastcall _SetName(String NewValue);
  TBAInteger* __fastcall _Get_M_FrameSize();
  Integer __fastcall _GetFrameSize();
  void __fastcall _SetFrameSize(Integer NewValue);
  TMTBList* __fastcall _GetPartOf();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TBikeFrame(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_Name = {read=_Get_M_Name};
  __property TBAInteger* M_FrameSize = {read=_Get_M_FrameSize};
  __property TMTBList* M_PartOf = {read=_GetPartOf};
  __property String Name = {read=_GetName, write=_SetName};
  __property Integer FrameSize = {read=_GetFrameSize, write=_SetFrameSize};
  __property TMTBList* PartOf = {read=_GetPartOf};
};

class DELPHICLASS TMTB;
class TMTB : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Name();
  String __fastcall _GetName();
  void __fastcall _SetName(String NewValue);
  TPartsList* __fastcall _GetConsistsOf();
  TMTB_CompsList* __fastcall _GetMTB_Comps();
  TBikeFrame* __fastcall _GetBuiltAround();
  TBoldObjectReference* __fastcall _Get_M_BuiltAround();
  void __fastcall _SetBuiltAround(TBikeFrame *value);
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TMTB(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_Name = {read=_Get_M_Name};
  __property TPartsList* M_ConsistsOf = {read=_GetConsistsOf};
  __property TMTB_CompsList* M_MTB_Comps = {read=_GetMTB_Comps};
  __property TBoldObjectReference* M_BuiltAround = {read=_Get_M_BuiltAround};
  __property String Name = {read=_GetName, write=_SetName};
  __property TPartsList* ConsistsOf = {read=_GetConsistsOf};
  __property TMTB_CompsList* MTB_Comps = {read=_GetMTB_Comps};
  __property TBikeFrame* BuiltAround = {read=_GetBuiltAround, write=_SetBuiltAround};
};

class DELPHICLASS TMTB_Comps;
class TMTB_Comps : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TMTB* __fastcall _GetPartOf();
  TBoldObjectReference* __fastcall _Get_M_PartOf();
  TParts* __fastcall _GetConsistsOf();
  TBoldObjectReference* __fastcall _Get_M_ConsistsOf();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TMTB_Comps(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBoldObjectReference* M_PartOf = {read=_Get_M_PartOf};
  __property TBoldObjectReference* M_ConsistsOf = {read=_Get_M_ConsistsOf};
  __property TMTB* PartOf = {read=_GetPartOf};
  __property TParts* ConsistsOf = {read=_GetConsistsOf};
};

class DELPHICLASS TParts;
class TParts : public TBusinessClassesRoot
{
typedef TBusinessClassesRoot inherited;
private:
  TBAString* __fastcall _Get_M_Model();
  String __fastcall _GetModel();
  void __fastcall _SetModel(String NewValue);
  TMTBList* __fastcall _GetPartOf();
  TMTB_CompsList* __fastcall _GetMTB_Comps();
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TParts(Boldsystem::TBoldSystem* aBoldSystem) : TBusinessClassesRoot(aBoldSystem) { }
  #pragma option pop

  __property TBAString* M_Model = {read=_Get_M_Model};
  __property TMTBList* M_PartOf = {read=_GetPartOf};
  __property TMTB_CompsList* M_MTB_Comps = {read=_GetMTB_Comps};
  __property String Model = {read=_GetModel, write=_SetModel};
  __property TMTBList* PartOf = {read=_GetPartOf};
  __property TMTB_CompsList* MTB_Comps = {read=_GetMTB_Comps};
};

class DELPHICLASS TBrake;
class TBrake : public TParts
{
typedef TParts inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TBrake(Boldsystem::TBoldSystem* aBoldSystem) : TParts(aBoldSystem) { }
  #pragma option pop

};

class DELPHICLASS TGear;
class TGear : public TParts
{
typedef TParts inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TGear(Boldsystem::TBoldSystem* aBoldSystem) : TParts(aBoldSystem) { }
  #pragma option pop

};

class DELPHICLASS TWheel;
class TWheel : public TParts
{
typedef TParts inherited;
private:
protected:
public:
  #pragma option push -w-inl
  inline __fastcall TWheel(Boldsystem::TBoldSystem* aBoldSystem) : TParts(aBoldSystem) { }
  #pragma option pop

};

class DELPHICLASS TBusinessClassesRootList;
class TBusinessClassesRootList : public TBoldObjectList
{
protected:
  TBusinessClassesRoot* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TBusinessClassesRoot *NewObject);
public:
  int __fastcall Includes(TBusinessClassesRoot *anObject);
  int __fastcall IndexOf(TBusinessClassesRoot *anObject);
  void __fastcall Add(TBusinessClassesRoot *NewObject);
  TBusinessClassesRoot* __fastcall AddNew();
  void __fastcall Insert(int index, TBusinessClassesRoot *NewObject);
  __property TBusinessClassesRoot* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TBikeFrameList;
class TBikeFrameList : public TBusinessClassesRootList
{
protected:
  TBikeFrame* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TBikeFrame *NewObject);
public:
  int __fastcall Includes(TBikeFrame *anObject);
  int __fastcall IndexOf(TBikeFrame *anObject);
  void __fastcall Add(TBikeFrame *NewObject);
  TBikeFrame* __fastcall AddNew();
  void __fastcall Insert(int index, TBikeFrame *NewObject);
  __property TBikeFrame* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TMTBList;
class TMTBList : public TBusinessClassesRootList
{
protected:
  TMTB* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TMTB *NewObject);
public:
  int __fastcall Includes(TMTB *anObject);
  int __fastcall IndexOf(TMTB *anObject);
  void __fastcall Add(TMTB *NewObject);
  TMTB* __fastcall AddNew();
  void __fastcall Insert(int index, TMTB *NewObject);
  __property TMTB* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TMTB_CompsList;
class TMTB_CompsList : public TBusinessClassesRootList
{
protected:
  TMTB_Comps* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TMTB_Comps *NewObject);
public:
  int __fastcall Includes(TMTB_Comps *anObject);
  int __fastcall IndexOf(TMTB_Comps *anObject);
  void __fastcall Add(TMTB_Comps *NewObject);
  TMTB_Comps* __fastcall AddNew();
  void __fastcall Insert(int index, TMTB_Comps *NewObject);
  __property TMTB_Comps* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TPartsList;
class TPartsList : public TBusinessClassesRootList
{
protected:
  TParts* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TParts *NewObject);
public:
  int __fastcall Includes(TParts *anObject);
  int __fastcall IndexOf(TParts *anObject);
  void __fastcall Add(TParts *NewObject);
  TParts* __fastcall AddNew();
  void __fastcall Insert(int index, TParts *NewObject);
  __property TParts* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TBrakeList;
class TBrakeList : public TPartsList
{
protected:
  TBrake* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TBrake *NewObject);
public:
  int __fastcall Includes(TBrake *anObject);
  int __fastcall IndexOf(TBrake *anObject);
  void __fastcall Add(TBrake *NewObject);
  TBrake* __fastcall AddNew();
  void __fastcall Insert(int index, TBrake *NewObject);
  __property TBrake* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TGearList;
class TGearList : public TPartsList
{
protected:
  TGear* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TGear *NewObject);
public:
  int __fastcall Includes(TGear *anObject);
  int __fastcall IndexOf(TGear *anObject);
  void __fastcall Add(TGear *NewObject);
  TGear* __fastcall AddNew();
  void __fastcall Insert(int index, TGear *NewObject);
  __property TGear* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};

class DELPHICLASS TWheelList;
class TWheelList : public TPartsList
{
protected:
  TWheel* __fastcall GetBoldObject(int index);
  void __fastcall SetBoldObject(int index, TWheel *NewObject);
public:
  int __fastcall Includes(TWheel *anObject);
  int __fastcall IndexOf(TWheel *anObject);
  void __fastcall Add(TWheel *NewObject);
  TWheel* __fastcall AddNew();
  void __fastcall Insert(int index, TWheel *NewObject);
  __property TWheel* BoldObjects[int index] = {read=GetBoldObject, write=SetBoldObject};
};


char* GeneratedCodeCRC();

#endif
 