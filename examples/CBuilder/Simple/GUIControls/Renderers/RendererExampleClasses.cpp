/*****************************************/
/*      This file is autogenerated       */
/*   Any manual changes will be LOST!    */
/*****************************************/
/* Generated 2001-12-05 14:33:03         */
/*****************************************/
/* This file should be stored in the     */
/* same directory as the form/datamodule */
/* with the corresponding model          */
/*****************************************/
/* Copyright notice:                     */
/*                                       */
/*****************************************/

#include <vcl.h>
#pragma hdrstop

#include "RendererExampleClasses.hpp"

// interface uses

// interface dependancies

// attribute dependancies
#pragma link "BoldAttributes"

#pragma link "BoldDefs"
#pragma link "BoldSubscription"
#pragma link "BoldDeriver"
#pragma link "BoldElements"
#pragma link "BoldDomainElement"
#pragma link "BoldSystemRT"
#pragma link "BoldSystem"
#pragma link "BoldGeneratedCodeDictionary"

// implementation uses

// implementation dependancies

#include "BoldGeneratedCodeDictionary.hpp"

// Includefiles for methodimplementations

#include "RendererExampleClasses_impl.cpp"

#define BoldMemberAssertInvalidObjectType = "Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)";

// TBusinessClassesRoot

void __fastcall TBusinessClassesRootList::Add(TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TBusinessClassesRootList::IndexOf(TBusinessClassesRoot *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TBusinessClassesRootList::Includes(TBusinessClassesRoot *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::AddNew()
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(InternalAddNew());
  return result;
}

void __fastcall TBusinessClassesRootList::Insert(int index, TBusinessClassesRoot *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TBusinessClassesRoot* __fastcall TBusinessClassesRootList::GetBoldObject(int index)
{
  TBusinessClassesRoot *result = dynamic_cast<TBusinessClassesRoot*>(GetElement(index));
  return result;
}

void __fastcall TBusinessClassesRootList::SetBoldObject(int index, TBusinessClassesRoot *NewObject)
{
  SetElement(index, NewObject);
}

// TGlobals

TBACurrency* __fastcall TGlobals::_Get_M_SalaryBreakPoint()
{
  // assert(ValidateMember("TGlobals", "SalaryBreakPoint", 0, TBACurrency));
  TBACurrency *result = dynamic_cast<TBACurrency*>(BoldMembers[0]);
  return result;
};

Currency __fastcall TGlobals::_GetSalaryBreakPoint()
{
  Currency result = M_SalaryBreakPoint->AsCurrency;
  return result;
}

void __fastcall TGlobals::_SetSalaryBreakPoint(Currency NewValue)
{
  M_SalaryBreakPoint->AsCurrency = NewValue;
}

void __fastcall TGlobalsList::Add(TGlobals *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TGlobalsList::IndexOf(TGlobals *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TGlobalsList::Includes(TGlobals *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TGlobals* __fastcall TGlobalsList::AddNew()
{
  TGlobals *result = dynamic_cast<TGlobals*>(InternalAddNew());
  return result;
}

void __fastcall TGlobalsList::Insert(int index, TGlobals *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TGlobals* __fastcall TGlobalsList::GetBoldObject(int index)
{
  TGlobals *result = dynamic_cast<TGlobals*>(GetElement(index));
  return result;
}

void __fastcall TGlobalsList::SetBoldObject(int index, TGlobals *NewObject)
{
  SetElement(index, NewObject);
}

// TPerson

TBAString* __fastcall TPerson::_Get_M_FirstName()
{
  // assert(ValidateMember("TPerson", "FirstName", 0, TBAString));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[0]);
  return result;
};

String __fastcall TPerson::_GetFirstName()
{
  String result = M_FirstName->AsString;
  return result;
}

void __fastcall TPerson::_SetFirstName(String NewValue)
{
  M_FirstName->AsString = NewValue;
}

TBAString* __fastcall TPerson::_Get_M_LastName()
{
  // assert(ValidateMember("TPerson", "LastName", 1, TBAString));
  TBAString *result = dynamic_cast<TBAString*>(BoldMembers[1]);
  return result;
};

String __fastcall TPerson::_GetLastName()
{
  String result = M_LastName->AsString;
  return result;
}

void __fastcall TPerson::_SetLastName(String NewValue)
{
  M_LastName->AsString = NewValue;
}

TBACurrency* __fastcall TPerson::_Get_M_Salary()
{
  // assert(ValidateMember("TPerson", "Salary", 2, TBACurrency));
  TBACurrency *result = dynamic_cast<TBACurrency*>(BoldMembers[2]);
  return result;
};

Currency __fastcall TPerson::_GetSalary()
{
  Currency result = M_Salary->AsCurrency;
  return result;
}

void __fastcall TPerson::_SetSalary(Currency NewValue)
{
  M_Salary->AsCurrency = NewValue;
}

void __fastcall TPersonList::Add(TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    AddElement(NewObject);
  }
}

int __fastcall TPersonList::IndexOf(TPerson *anObject)
{
  int result = IndexOfElement(anObject);
  return result;
}

int __fastcall TPersonList::Includes(TPerson *anObject) // boolean?
{
  int result = IncludesElement(anObject);
  return result;
}

TPerson* __fastcall TPersonList::AddNew()
{
  TPerson *result = dynamic_cast<TPerson*>(InternalAddNew());
  return result;
}

void __fastcall TPersonList::Insert(int index, TPerson *NewObject)
{
  if (NewObject != NULL)
  {
    InsertElement(index, NewObject);
  }
}

TPerson* __fastcall TPersonList::GetBoldObject(int index)
{
  TPerson *result = dynamic_cast<TPerson*>(GetElement(index));
  return result;
}

void __fastcall TPersonList::SetBoldObject(int index, TPerson *NewObject)
{
  SetElement(index, NewObject);
}

char *GeneratedCodeCRC()
{
  return "1246017168";
}

void __fastcall InstallObjectListClasses(TBoldGeneratedClassList *BoldObjectListClasses)
{
  BoldObjectListClasses->AddObjectEntry("BusinessClassesRootList", __classid(TBusinessClassesRootList));
  BoldObjectListClasses->AddObjectEntry("GlobalsList", __classid(TGlobalsList));
  BoldObjectListClasses->AddObjectEntry("PersonList", __classid(TPersonList));
}

void __fastcall InstallBusinessClasses(TBoldGeneratedClassList *BoldObjectClasses)
{
  BoldObjectClasses->AddObjectEntry("BusinessClassesRoot", __classid(TBusinessClassesRoot));
  BoldObjectClasses->AddObjectEntry("Globals", __classid(TGlobals));
  BoldObjectClasses->AddObjectEntry("Person", __classid(TPerson));
}

// the codedestricptor is initialized automatically

TBoldGeneratedCodeDescriptor *CodeDescriptor = GeneratedCodes()->AddGeneratedCodeDescriptorWithFunc("RendererExampleClasses", &InstallBusinessClasses, &InstallObjectListClasses, GeneratedCodeCRC());

// but should be unloaded manually when it is not needed anymore

void unregisterCode()
{
  if (CodeDescriptor != NULL)
  {
    GeneratedCodes()->Remove(CodeDescriptor);
  }
}
 